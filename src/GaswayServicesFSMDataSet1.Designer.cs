// ------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool.
// Runtime Version:4.0.30319.42000
// 
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Data;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using Microsoft.VisualBasic.CompilerServices;

namespace FSM
{



    /// <summary>
/// Represents a strongly typed in-memory cache of data.
/// </summary>
    [Serializable()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProvider("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRoot("FSMDataSet")]
    [System.ComponentModel.Design.HelpKeyword("vs.data.DataSet")]
    public partial class FSMDataSet : DataSet
    {
        private Customer_Get_ForSiteIDDataTable tableCustomer_Get_ForSiteID;
        private EngineerVisitAssetWorkSheet_GetForVisitDataTable tableEngineerVisitAssetWorkSheet_GetForVisit;
        private EngineerVisitDefects_GetForEngineerVisitDataTable tableEngineerVisitDefects_GetForEngineerVisit;
        private EngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitIDDataTable tableEngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitID;
        private EngineerVisitTimeSheet_Get_For_EngineerVisitIDDataTable tableEngineerVisitTimeSheet_Get_For_EngineerVisitID;
        private EngineerVisitUnitsUsed_Get_For_EngineerVisitIDDataTable tableEngineerVisitUnitsUsed_Get_For_EngineerVisitID;
        private InvoiceAddress_Get_EngineerVisitIDDataTable tableInvoiceAddress_Get_EngineerVisitID;
        private Job_Get_For_An_EngineerVisit_IDDataTable tableJob_Get_For_An_EngineerVisit_ID;
        private JobItems_Get_For_JobDataTable tableJobItems_Get_For_Job;
        private Site_Get_ForEngineerVisitIDDataTable tableSite_Get_ForEngineerVisitID;
        private SchemaSerializationMode _schemaSerializationMode = SchemaSerializationMode.IncludeSchema;

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public FSMDataSet() : base()
        {
            BeginInit();
            InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = SchemaChanged;
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            EndInit();
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected FSMDataSet(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context, false)
        {
            if (IsBinarySerialized(info, context) == true)
            {
                InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = SchemaChanged;
                Tables.CollectionChanged += schemaChangedHandler1;
                Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }

            string strSchema = Conversions.ToString(info.GetValue("XmlSchema", typeof(string)));
            if (DetermineSchemaSerializationMode(info, context) == SchemaSerializationMode.IncludeSchema)
            {
                var ds = new DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if (ds.Tables["Customer_Get_ForSiteID"] is object)
                {
                    base.Tables.Add(new Customer_Get_ForSiteIDDataTable(ds.Tables["Customer_Get_ForSiteID"]));
                }

                if (ds.Tables["EngineerVisitAssetWorkSheet_GetForVisit"] is object)
                {
                    base.Tables.Add(new EngineerVisitAssetWorkSheet_GetForVisitDataTable(ds.Tables["EngineerVisitAssetWorkSheet_GetForVisit"]));
                }

                if (ds.Tables["EngineerVisitDefects_GetForEngineerVisit"] is object)
                {
                    base.Tables.Add(new EngineerVisitDefects_GetForEngineerVisitDataTable(ds.Tables["EngineerVisitDefects_GetForEngineerVisit"]));
                }

                if (ds.Tables["EngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitID"] is object)
                {
                    base.Tables.Add(new EngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitIDDataTable(ds.Tables["EngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitID"]));
                }

                if (ds.Tables["EngineerVisitTimeSheet_Get_For_EngineerVisitID"] is object)
                {
                    base.Tables.Add(new EngineerVisitTimeSheet_Get_For_EngineerVisitIDDataTable(ds.Tables["EngineerVisitTimeSheet_Get_For_EngineerVisitID"]));
                }

                if (ds.Tables["EngineerVisitUnitsUsed_Get_For_EngineerVisitID"] is object)
                {
                    base.Tables.Add(new EngineerVisitUnitsUsed_Get_For_EngineerVisitIDDataTable(ds.Tables["EngineerVisitUnitsUsed_Get_For_EngineerVisitID"]));
                }

                if (ds.Tables["InvoiceAddress_Get_EngineerVisitID"] is object)
                {
                    base.Tables.Add(new InvoiceAddress_Get_EngineerVisitIDDataTable(ds.Tables["InvoiceAddress_Get_EngineerVisitID"]));
                }

                if (ds.Tables["Job_Get_For_An_EngineerVisit_ID"] is object)
                {
                    base.Tables.Add(new Job_Get_For_An_EngineerVisit_IDDataTable(ds.Tables["Job_Get_For_An_EngineerVisit_ID"]));
                }

                if (ds.Tables["JobItems_Get_For_Job"] is object)
                {
                    base.Tables.Add(new JobItems_Get_For_JobDataTable(ds.Tables["JobItems_Get_For_Job"]));
                }

                if (ds.Tables["Site_Get_ForEngineerVisitID"] is object)
                {
                    base.Tables.Add(new Site_Get_ForEngineerVisitIDDataTable(ds.Tables["Site_Get_ForEngineerVisitID"]));
                }

                DataSetName = ds.DataSetName;
                Prefix = ds.Prefix;
                Namespace = ds.Namespace;
                Locale = ds.Locale;
                CaseSensitive = ds.CaseSensitive;
                EnforceConstraints = ds.EnforceConstraints;
                Merge(ds, false, MissingSchemaAction.Add);
                InitVars();
            }
            else
            {
                ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }

            GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = SchemaChanged;
            base.Tables.CollectionChanged += schemaChangedHandler;
            Relations.CollectionChanged += schemaChangedHandler;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Customer_Get_ForSiteIDDataTable Customer_Get_ForSiteID
        {
            get
            {
                return tableCustomer_Get_ForSiteID;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EngineerVisitAssetWorkSheet_GetForVisitDataTable EngineerVisitAssetWorkSheet_GetForVisit
        {
            get
            {
                return tableEngineerVisitAssetWorkSheet_GetForVisit;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EngineerVisitDefects_GetForEngineerVisitDataTable EngineerVisitDefects_GetForEngineerVisit
        {
            get
            {
                return tableEngineerVisitDefects_GetForEngineerVisit;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitIDDataTable EngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitID
        {
            get
            {
                return tableEngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitID;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EngineerVisitTimeSheet_Get_For_EngineerVisitIDDataTable EngineerVisitTimeSheet_Get_For_EngineerVisitID
        {
            get
            {
                return tableEngineerVisitTimeSheet_Get_For_EngineerVisitID;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EngineerVisitUnitsUsed_Get_For_EngineerVisitIDDataTable EngineerVisitUnitsUsed_Get_For_EngineerVisitID
        {
            get
            {
                return tableEngineerVisitUnitsUsed_Get_For_EngineerVisitID;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public InvoiceAddress_Get_EngineerVisitIDDataTable InvoiceAddress_Get_EngineerVisitID
        {
            get
            {
                return tableInvoiceAddress_Get_EngineerVisitID;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Job_Get_For_An_EngineerVisit_IDDataTable Job_Get_For_An_EngineerVisit_ID
        {
            get
            {
                return tableJob_Get_For_An_EngineerVisit_ID;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public JobItems_Get_For_JobDataTable JobItems_Get_For_Job
        {
            get
            {
                return tableJobItems_Get_For_Job;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Site_Get_ForEngineerVisitIDDataTable Site_Get_ForEngineerVisitID
        {
            get
            {
                return tableSite_Get_ForEngineerVisitID;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [System.ComponentModel.Browsable(true)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override SchemaSerializationMode SchemaSerializationMode
        {
            get
            {
                return _schemaSerializationMode;
            }

            set
            {
                _schemaSerializationMode = value;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new DataTableCollection Tables
        {
            get
            {
                return base.Tables;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new DataRelationCollection Relations
        {
            get
            {
                return base.Relations;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected override void InitializeDerivedDataSet()
        {
            BeginInit();
            InitClass();
            EndInit();
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public override DataSet Clone()
        {
            FSMDataSet cln = (FSMDataSet)base.Clone();
            cln.InitVars();
            cln.SchemaSerializationMode = SchemaSerializationMode;
            return cln;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected override bool ShouldSerializeTables()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected override bool ShouldSerializeRelations()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader)
        {
            if (DetermineSchemaSerializationMode(reader) == SchemaSerializationMode.IncludeSchema)
            {
                Reset();
                var ds = new DataSet();
                ds.ReadXml(reader);
                if (ds.Tables["Customer_Get_ForSiteID"] is object)
                {
                    base.Tables.Add(new Customer_Get_ForSiteIDDataTable(ds.Tables["Customer_Get_ForSiteID"]));
                }

                if (ds.Tables["EngineerVisitAssetWorkSheet_GetForVisit"] is object)
                {
                    base.Tables.Add(new EngineerVisitAssetWorkSheet_GetForVisitDataTable(ds.Tables["EngineerVisitAssetWorkSheet_GetForVisit"]));
                }

                if (ds.Tables["EngineerVisitDefects_GetForEngineerVisit"] is object)
                {
                    base.Tables.Add(new EngineerVisitDefects_GetForEngineerVisitDataTable(ds.Tables["EngineerVisitDefects_GetForEngineerVisit"]));
                }

                if (ds.Tables["EngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitID"] is object)
                {
                    base.Tables.Add(new EngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitIDDataTable(ds.Tables["EngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitID"]));
                }

                if (ds.Tables["EngineerVisitTimeSheet_Get_For_EngineerVisitID"] is object)
                {
                    base.Tables.Add(new EngineerVisitTimeSheet_Get_For_EngineerVisitIDDataTable(ds.Tables["EngineerVisitTimeSheet_Get_For_EngineerVisitID"]));
                }

                if (ds.Tables["EngineerVisitUnitsUsed_Get_For_EngineerVisitID"] is object)
                {
                    base.Tables.Add(new EngineerVisitUnitsUsed_Get_For_EngineerVisitIDDataTable(ds.Tables["EngineerVisitUnitsUsed_Get_For_EngineerVisitID"]));
                }

                if (ds.Tables["InvoiceAddress_Get_EngineerVisitID"] is object)
                {
                    base.Tables.Add(new InvoiceAddress_Get_EngineerVisitIDDataTable(ds.Tables["InvoiceAddress_Get_EngineerVisitID"]));
                }

                if (ds.Tables["Job_Get_For_An_EngineerVisit_ID"] is object)
                {
                    base.Tables.Add(new Job_Get_For_An_EngineerVisit_IDDataTable(ds.Tables["Job_Get_For_An_EngineerVisit_ID"]));
                }

                if (ds.Tables["JobItems_Get_For_Job"] is object)
                {
                    base.Tables.Add(new JobItems_Get_For_JobDataTable(ds.Tables["JobItems_Get_For_Job"]));
                }

                if (ds.Tables["Site_Get_ForEngineerVisitID"] is object)
                {
                    base.Tables.Add(new Site_Get_ForEngineerVisitIDDataTable(ds.Tables["Site_Get_ForEngineerVisitID"]));
                }

                DataSetName = ds.DataSetName;
                Prefix = ds.Prefix;
                Namespace = ds.Namespace;
                Locale = ds.Locale;
                CaseSensitive = ds.CaseSensitive;
                EnforceConstraints = ds.EnforceConstraints;
                Merge(ds, false, MissingSchemaAction.Add);
                InitVars();
            }
            else
            {
                ReadXml(reader);
                InitVars();
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable()
        {
            var stream = new System.IO.MemoryStream();
            WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        internal void InitVars()
        {
            InitVars(true);
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        internal void InitVars(bool initTable)
        {
            tableCustomer_Get_ForSiteID = (Customer_Get_ForSiteIDDataTable)base.Tables["Customer_Get_ForSiteID"];
            if (initTable == true)
            {
                if (tableCustomer_Get_ForSiteID is object)
                {
                    tableCustomer_Get_ForSiteID.InitVars();
                }
            }

            tableEngineerVisitAssetWorkSheet_GetForVisit = (EngineerVisitAssetWorkSheet_GetForVisitDataTable)base.Tables["EngineerVisitAssetWorkSheet_GetForVisit"];
            if (initTable == true)
            {
                if (tableEngineerVisitAssetWorkSheet_GetForVisit is object)
                {
                    tableEngineerVisitAssetWorkSheet_GetForVisit.InitVars();
                }
            }

            tableEngineerVisitDefects_GetForEngineerVisit = (EngineerVisitDefects_GetForEngineerVisitDataTable)base.Tables["EngineerVisitDefects_GetForEngineerVisit"];
            if (initTable == true)
            {
                if (tableEngineerVisitDefects_GetForEngineerVisit is object)
                {
                    tableEngineerVisitDefects_GetForEngineerVisit.InitVars();
                }
            }

            tableEngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitID = (EngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitIDDataTable)base.Tables["EngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitID"];
            if (initTable == true)
            {
                if (tableEngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitID is object)
                {
                    tableEngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitID.InitVars();
                }
            }

            tableEngineerVisitTimeSheet_Get_For_EngineerVisitID = (EngineerVisitTimeSheet_Get_For_EngineerVisitIDDataTable)base.Tables["EngineerVisitTimeSheet_Get_For_EngineerVisitID"];
            if (initTable == true)
            {
                if (tableEngineerVisitTimeSheet_Get_For_EngineerVisitID is object)
                {
                    tableEngineerVisitTimeSheet_Get_For_EngineerVisitID.InitVars();
                }
            }

            tableEngineerVisitUnitsUsed_Get_For_EngineerVisitID = (EngineerVisitUnitsUsed_Get_For_EngineerVisitIDDataTable)base.Tables["EngineerVisitUnitsUsed_Get_For_EngineerVisitID"];
            if (initTable == true)
            {
                if (tableEngineerVisitUnitsUsed_Get_For_EngineerVisitID is object)
                {
                    tableEngineerVisitUnitsUsed_Get_For_EngineerVisitID.InitVars();
                }
            }

            tableInvoiceAddress_Get_EngineerVisitID = (InvoiceAddress_Get_EngineerVisitIDDataTable)base.Tables["InvoiceAddress_Get_EngineerVisitID"];
            if (initTable == true)
            {
                if (tableInvoiceAddress_Get_EngineerVisitID is object)
                {
                    tableInvoiceAddress_Get_EngineerVisitID.InitVars();
                }
            }

            tableJob_Get_For_An_EngineerVisit_ID = (Job_Get_For_An_EngineerVisit_IDDataTable)base.Tables["Job_Get_For_An_EngineerVisit_ID"];
            if (initTable == true)
            {
                if (tableJob_Get_For_An_EngineerVisit_ID is object)
                {
                    tableJob_Get_For_An_EngineerVisit_ID.InitVars();
                }
            }

            tableJobItems_Get_For_Job = (JobItems_Get_For_JobDataTable)base.Tables["JobItems_Get_For_Job"];
            if (initTable == true)
            {
                if (tableJobItems_Get_For_Job is object)
                {
                    tableJobItems_Get_For_Job.InitVars();
                }
            }

            tableSite_Get_ForEngineerVisitID = (Site_Get_ForEngineerVisitIDDataTable)base.Tables["Site_Get_ForEngineerVisitID"];
            if (initTable == true)
            {
                if (tableSite_Get_ForEngineerVisitID is object)
                {
                    tableSite_Get_ForEngineerVisitID.InitVars();
                }
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private void InitClass()
        {
            DataSetName = "FSMDataSet";
            Prefix = "";
            Namespace = "http://tempuri.org/FSMDataSet1.xsd";
            EnforceConstraints = true;
            SchemaSerializationMode = SchemaSerializationMode.IncludeSchema;
            tableCustomer_Get_ForSiteID = new Customer_Get_ForSiteIDDataTable();
            base.Tables.Add(tableCustomer_Get_ForSiteID);
            tableEngineerVisitAssetWorkSheet_GetForVisit = new EngineerVisitAssetWorkSheet_GetForVisitDataTable();
            base.Tables.Add(tableEngineerVisitAssetWorkSheet_GetForVisit);
            tableEngineerVisitDefects_GetForEngineerVisit = new EngineerVisitDefects_GetForEngineerVisitDataTable();
            base.Tables.Add(tableEngineerVisitDefects_GetForEngineerVisit);
            tableEngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitID = new EngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitIDDataTable();
            base.Tables.Add(tableEngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitID);
            tableEngineerVisitTimeSheet_Get_For_EngineerVisitID = new EngineerVisitTimeSheet_Get_For_EngineerVisitIDDataTable();
            base.Tables.Add(tableEngineerVisitTimeSheet_Get_For_EngineerVisitID);
            tableEngineerVisitUnitsUsed_Get_For_EngineerVisitID = new EngineerVisitUnitsUsed_Get_For_EngineerVisitIDDataTable();
            base.Tables.Add(tableEngineerVisitUnitsUsed_Get_For_EngineerVisitID);
            tableInvoiceAddress_Get_EngineerVisitID = new InvoiceAddress_Get_EngineerVisitIDDataTable();
            base.Tables.Add(tableInvoiceAddress_Get_EngineerVisitID);
            tableJob_Get_For_An_EngineerVisit_ID = new Job_Get_For_An_EngineerVisit_IDDataTable();
            base.Tables.Add(tableJob_Get_For_An_EngineerVisit_ID);
            tableJobItems_Get_For_Job = new JobItems_Get_For_JobDataTable();
            base.Tables.Add(tableJobItems_Get_For_Job);
            tableSite_Get_ForEngineerVisitID = new Site_Get_ForEngineerVisitIDDataTable();
            base.Tables.Add(tableSite_Get_ForEngineerVisitID);
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private bool ShouldSerializeCustomer_Get_ForSiteID()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private bool ShouldSerializeEngineerVisitAssetWorkSheet_GetForVisit()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private bool ShouldSerializeEngineerVisitDefects_GetForEngineerVisit()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private bool ShouldSerializeEngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitID()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private bool ShouldSerializeEngineerVisitTimeSheet_Get_For_EngineerVisitID()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private bool ShouldSerializeEngineerVisitUnitsUsed_Get_For_EngineerVisitID()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private bool ShouldSerializeInvoiceAddress_Get_EngineerVisitID()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private bool ShouldSerializeJob_Get_For_An_EngineerVisit_ID()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private bool ShouldSerializeJobItems_Get_For_Job()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private bool ShouldSerializeSite_Get_ForEngineerVisitID()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e)
        {
            if (e.Action == System.ComponentModel.CollectionChangeAction.Remove)
            {
                InitVars();
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs)
        {
            var ds = new FSMDataSet();
            var type = new System.Xml.Schema.XmlSchemaComplexType();
            var sequence = new System.Xml.Schema.XmlSchemaSequence();
            var any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            var dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace))
            {
                var s1 = new System.IO.MemoryStream();
                var s2 = new System.IO.MemoryStream();
                try
                {
                    System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    var schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                    while (schemas.MoveNext())
                    {
                        schema = (System.Xml.Schema.XmlSchema)schemas.Current;
                        s2.SetLength(0);
                        schema.Write(s2);
                        if (s1.Length == s2.Length)
                        {
                            s1.Position = 0;
                            s2.Position = 0;
                            while (s1.Position != s1.Length && s1.ReadByte() == s2.ReadByte())
                            {
                            }

                            if (s1.Position == s1.Length)
                            {
                                return type;
                            }
                        }
                    }
                }
                finally
                {
                    if (s1 is object)
                    {
                        s1.Close();
                    }

                    if (s2 is object)
                    {
                        s2.Close();
                    }
                }
            }

            xs.Add(dsSchema);
            return type;
        }

        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public delegate void Customer_Get_ForSiteIDRowChangeEventHandler(object sender, Customer_Get_ForSiteIDRowChangeEvent e);

        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public delegate void EngineerVisitAssetWorkSheet_GetForVisitRowChangeEventHandler(object sender, EngineerVisitAssetWorkSheet_GetForVisitRowChangeEvent e);

        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public delegate void EngineerVisitDefects_GetForEngineerVisitRowChangeEventHandler(object sender, EngineerVisitDefects_GetForEngineerVisitRowChangeEvent e);

        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public delegate void EngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitIDRowChangeEventHandler(object sender, EngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitIDRowChangeEvent e);

        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public delegate void EngineerVisitTimeSheet_Get_For_EngineerVisitIDRowChangeEventHandler(object sender, EngineerVisitTimeSheet_Get_For_EngineerVisitIDRowChangeEvent e);

        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public delegate void EngineerVisitUnitsUsed_Get_For_EngineerVisitIDRowChangeEventHandler(object sender, EngineerVisitUnitsUsed_Get_For_EngineerVisitIDRowChangeEvent e);

        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public delegate void InvoiceAddress_Get_EngineerVisitIDRowChangeEventHandler(object sender, InvoiceAddress_Get_EngineerVisitIDRowChangeEvent e);

        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public delegate void Job_Get_For_An_EngineerVisit_IDRowChangeEventHandler(object sender, Job_Get_For_An_EngineerVisit_IDRowChangeEvent e);

        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public delegate void JobItems_Get_For_JobRowChangeEventHandler(object sender, JobItems_Get_For_JobRowChangeEvent e);

        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public delegate void Site_Get_ForEngineerVisitIDRowChangeEventHandler(object sender, Site_Get_ForEngineerVisitIDRowChangeEvent e);

        /// <summary>
    /// Represents the strongly named DataTable class.
    /// </summary>
        [Serializable()]
        [System.Xml.Serialization.XmlSchemaProvider("GetTypedTableSchema")]
        public partial class Customer_Get_ForSiteIDDataTable : TypedTableBase<Customer_Get_ForSiteIDRow>
        {
            private DataColumn columnCustomerID;
            private DataColumn columnName;
            private DataColumn columnCustomerTypeID;
            private DataColumn columnRegionID;
            private DataColumn columnNotes;
            private DataColumn columnAccountNumber;
            private DataColumn columnStatus;
            private DataColumn columnAcceptChargesChanges;
            private DataColumn columnDeleted;
            private DataColumn columnMainContractorDiscount;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public Customer_Get_ForSiteIDDataTable() : base()
            {
                TableName = "Customer_Get_ForSiteID";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal Customer_Get_ForSiteIDDataTable(DataTable table) : base()
            {
                TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    CaseSensitive = table.CaseSensitive;
                }

                if ((table.Locale.ToString() ?? "") != (table.DataSet.Locale.ToString() ?? ""))
                {
                    Locale = table.Locale;
                }

                if ((table.Namespace ?? "") != (table.DataSet.Namespace ?? ""))
                {
                    Namespace = table.Namespace;
                }

                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected Customer_Get_ForSiteIDDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn CustomerIDColumn
            {
                get
                {
                    return columnCustomerID;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn NameColumn
            {
                get
                {
                    return columnName;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn CustomerTypeIDColumn
            {
                get
                {
                    return columnCustomerTypeID;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn RegionIDColumn
            {
                get
                {
                    return columnRegionID;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn NotesColumn
            {
                get
                {
                    return columnNotes;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn AccountNumberColumn
            {
                get
                {
                    return columnAccountNumber;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn StatusColumn
            {
                get
                {
                    return columnStatus;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn AcceptChargesChangesColumn
            {
                get
                {
                    return columnAcceptChargesChanges;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn DeletedColumn
            {
                get
                {
                    return columnDeleted;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn MainContractorDiscountColumn
            {
                get
                {
                    return columnMainContractorDiscount;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return Rows.Count;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public Customer_Get_ForSiteIDRow this[int index]
            {
                get
                {
                    return (Customer_Get_ForSiteIDRow)Rows[index];
                }
            }

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event Customer_Get_ForSiteIDRowChangeEventHandler Customer_Get_ForSiteIDRowChanging;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event Customer_Get_ForSiteIDRowChangeEventHandler Customer_Get_ForSiteIDRowChanged;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event Customer_Get_ForSiteIDRowChangeEventHandler Customer_Get_ForSiteIDRowDeleting;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event Customer_Get_ForSiteIDRowChangeEventHandler Customer_Get_ForSiteIDRowDeleted;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void AddCustomer_Get_ForSiteIDRow(Customer_Get_ForSiteIDRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public Customer_Get_ForSiteIDRow AddCustomer_Get_ForSiteIDRow(string Name, int CustomerTypeID, int RegionID, string Notes, string AccountNumber, int Status, bool AcceptChargesChanges, bool Deleted, decimal MainContractorDiscount)
            {
                Customer_Get_ForSiteIDRow rowCustomer_Get_ForSiteIDRow = (Customer_Get_ForSiteIDRow)NewRow();
                var columnValuesArray = new object[] { null, Name, CustomerTypeID, RegionID, Notes, AccountNumber, Status, AcceptChargesChanges, Deleted, MainContractorDiscount };
                rowCustomer_Get_ForSiteIDRow.ItemArray = columnValuesArray;
                Rows.Add(rowCustomer_Get_ForSiteIDRow);
                return rowCustomer_Get_ForSiteIDRow;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public Customer_Get_ForSiteIDRow FindByCustomerID(int CustomerID)
            {
                return (Customer_Get_ForSiteIDRow)Rows.Find(new object[] { CustomerID });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public override DataTable Clone()
            {
                Customer_Get_ForSiteIDDataTable cln = (Customer_Get_ForSiteIDDataTable)base.Clone();
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new Customer_Get_ForSiteIDDataTable();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal void InitVars()
            {
                columnCustomerID = Columns["CustomerID"];
                columnName = Columns["Name"];
                columnCustomerTypeID = Columns["CustomerTypeID"];
                columnRegionID = Columns["RegionID"];
                columnNotes = Columns["Notes"];
                columnAccountNumber = Columns["AccountNumber"];
                columnStatus = Columns["Status"];
                columnAcceptChargesChanges = Columns["AcceptChargesChanges"];
                columnDeleted = Columns["Deleted"];
                columnMainContractorDiscount = Columns["MainContractorDiscount"];
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            private void InitClass()
            {
                columnCustomerID = new DataColumn("CustomerID", typeof(int), null, MappingType.Element);
                Columns.Add(columnCustomerID);
                columnName = new DataColumn("Name", typeof(string), null, MappingType.Element);
                Columns.Add(columnName);
                columnCustomerTypeID = new DataColumn("CustomerTypeID", typeof(int), null, MappingType.Element);
                Columns.Add(columnCustomerTypeID);
                columnRegionID = new DataColumn("RegionID", typeof(int), null, MappingType.Element);
                Columns.Add(columnRegionID);
                columnNotes = new DataColumn("Notes", typeof(string), null, MappingType.Element);
                Columns.Add(columnNotes);
                columnAccountNumber = new DataColumn("AccountNumber", typeof(string), null, MappingType.Element);
                Columns.Add(columnAccountNumber);
                columnStatus = new DataColumn("Status", typeof(int), null, MappingType.Element);
                Columns.Add(columnStatus);
                columnAcceptChargesChanges = new DataColumn("AcceptChargesChanges", typeof(bool), null, MappingType.Element);
                Columns.Add(columnAcceptChargesChanges);
                columnDeleted = new DataColumn("Deleted", typeof(bool), null, MappingType.Element);
                Columns.Add(columnDeleted);
                columnMainContractorDiscount = new DataColumn("MainContractorDiscount", typeof(decimal), null, MappingType.Element);
                Columns.Add(columnMainContractorDiscount);
                Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { columnCustomerID }, true));
                columnCustomerID.AutoIncrement = true;
                columnCustomerID.AllowDBNull = false;
                columnCustomerID.ReadOnly = true;
                columnCustomerID.Unique = true;
                columnName.AllowDBNull = false;
                columnName.MaxLength = 255;
                columnCustomerTypeID.AllowDBNull = false;
                columnRegionID.AllowDBNull = false;
                columnNotes.AllowDBNull = false;
                columnNotes.MaxLength = 4000;
                columnAccountNumber.AllowDBNull = false;
                columnAccountNumber.MaxLength = 50;
                columnStatus.AllowDBNull = false;
                columnAcceptChargesChanges.AllowDBNull = false;
                columnDeleted.AllowDBNull = false;
                columnMainContractorDiscount.AllowDBNull = false;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public Customer_Get_ForSiteIDRow NewCustomer_Get_ForSiteIDRow()
            {
                return (Customer_Get_ForSiteIDRow)NewRow();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new Customer_Get_ForSiteIDRow(builder);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(Customer_Get_ForSiteIDRow);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (Customer_Get_ForSiteIDRowChanged is object)
                {
                    Customer_Get_ForSiteIDRowChanged?.Invoke(this, new Customer_Get_ForSiteIDRowChangeEvent((Customer_Get_ForSiteIDRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (Customer_Get_ForSiteIDRowChanging is object)
                {
                    Customer_Get_ForSiteIDRowChanging?.Invoke(this, new Customer_Get_ForSiteIDRowChangeEvent((Customer_Get_ForSiteIDRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (Customer_Get_ForSiteIDRowDeleted is object)
                {
                    Customer_Get_ForSiteIDRowDeleted?.Invoke(this, new Customer_Get_ForSiteIDRowChangeEvent((Customer_Get_ForSiteIDRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (Customer_Get_ForSiteIDRowDeleting is object)
                {
                    Customer_Get_ForSiteIDRowDeleting?.Invoke(this, new Customer_Get_ForSiteIDRowChangeEvent((Customer_Get_ForSiteIDRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void RemoveCustomer_Get_ForSiteIDRow(Customer_Get_ForSiteIDRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
            {
                var type = new System.Xml.Schema.XmlSchemaComplexType();
                var sequence = new System.Xml.Schema.XmlSchemaSequence();
                var ds = new FSMDataSet();
                var any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                var any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                var attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                var attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Customer_Get_ForSiteIDDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                var dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    var s1 = new System.IO.MemoryStream();
                    var s2 = new System.IO.MemoryStream();
                    try
                    {
                        System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        var schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                        while (schemas.MoveNext())
                        {
                            schema = (System.Xml.Schema.XmlSchema)schemas.Current;
                            s2.SetLength(0);
                            schema.Write(s2);
                            if (s1.Length == s2.Length)
                            {
                                s1.Position = 0;
                                s2.Position = 0;
                                while (s1.Position != s1.Length && s1.ReadByte() == s2.ReadByte())
                                {
                                }

                                if (s1.Position == s1.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (s1 is object)
                        {
                            s1.Close();
                        }

                        if (s2 is object)
                        {
                            s2.Close();
                        }
                    }
                }

                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
    /// Represents the strongly named DataTable class.
    /// </summary>
        [Serializable()]
        [System.Xml.Serialization.XmlSchemaProvider("GetTypedTableSchema")]
        public partial class EngineerVisitAssetWorkSheet_GetForVisitDataTable : TypedTableBase<EngineerVisitAssetWorkSheet_GetForVisitRow>
        {
            private DataColumn columnEngineerVisitAssetWorkSheetID;
            private DataColumn columnEngineerVisitID;
            private DataColumn columnAssetID;
            private DataColumn columnFlueTerminationSatisfactoryID;
            private DataColumn columnFlueFlowTestID;
            private DataColumn columnSpillageTestID;
            private DataColumn columnVentilationProvisionSatisfactoryID;
            private DataColumn columnSafetyDeviceOperationID;
            private DataColumn columnDHWFlowRate;
            private DataColumn columnColdWaterTemp;
            private DataColumn columnDHWTemp;
            private DataColumn columnInletStaticPressure;
            private DataColumn columnInletWorkingPressure;
            private DataColumn columnMinBurnerPressure;
            private DataColumn columnMaxBurnerPressure;
            private DataColumn columnCO2;
            private DataColumn columnCO2CORatio;
            private DataColumn columnLandlordsApplianceID;
            private DataColumn columnApplianceServiceOrInspectedID;
            private DataColumn columnApplianceSafeID;
            private DataColumn columnVisualConditionOfFlueSatisfactoryID;
            private DataColumn columnDeleted;
            private DataColumn columnLocation;
            private DataColumn columnSerialNum;
            private DataColumn columntypemakemodel;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public EngineerVisitAssetWorkSheet_GetForVisitDataTable() : base()
            {
                TableName = "EngineerVisitAssetWorkSheet_GetForVisit";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal EngineerVisitAssetWorkSheet_GetForVisitDataTable(DataTable table) : base()
            {
                TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    CaseSensitive = table.CaseSensitive;
                }

                if ((table.Locale.ToString() ?? "") != (table.DataSet.Locale.ToString() ?? ""))
                {
                    Locale = table.Locale;
                }

                if ((table.Namespace ?? "") != (table.DataSet.Namespace ?? ""))
                {
                    Namespace = table.Namespace;
                }

                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected EngineerVisitAssetWorkSheet_GetForVisitDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn EngineerVisitAssetWorkSheetIDColumn
            {
                get
                {
                    return columnEngineerVisitAssetWorkSheetID;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn EngineerVisitIDColumn
            {
                get
                {
                    return columnEngineerVisitID;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn AssetIDColumn
            {
                get
                {
                    return columnAssetID;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn FlueTerminationSatisfactoryIDColumn
            {
                get
                {
                    return columnFlueTerminationSatisfactoryID;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn FlueFlowTestIDColumn
            {
                get
                {
                    return columnFlueFlowTestID;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn SpillageTestIDColumn
            {
                get
                {
                    return columnSpillageTestID;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn VentilationProvisionSatisfactoryIDColumn
            {
                get
                {
                    return columnVentilationProvisionSatisfactoryID;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn SafetyDeviceOperationIDColumn
            {
                get
                {
                    return columnSafetyDeviceOperationID;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn DHWFlowRateColumn
            {
                get
                {
                    return columnDHWFlowRate;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn ColdWaterTempColumn
            {
                get
                {
                    return columnColdWaterTemp;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn DHWTempColumn
            {
                get
                {
                    return columnDHWTemp;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn InletStaticPressureColumn
            {
                get
                {
                    return columnInletStaticPressure;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn InletWorkingPressureColumn
            {
                get
                {
                    return columnInletWorkingPressure;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn MinBurnerPressureColumn
            {
                get
                {
                    return columnMinBurnerPressure;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn MaxBurnerPressureColumn
            {
                get
                {
                    return columnMaxBurnerPressure;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn CO2Column
            {
                get
                {
                    return columnCO2;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn CO2CORatioColumn
            {
                get
                {
                    return columnCO2CORatio;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn LandlordsApplianceIDColumn
            {
                get
                {
                    return columnLandlordsApplianceID;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn ApplianceServiceOrInspectedIDColumn
            {
                get
                {
                    return columnApplianceServiceOrInspectedID;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn ApplianceSafeIDColumn
            {
                get
                {
                    return columnApplianceSafeID;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn VisualConditionOfFlueSatisfactoryIDColumn
            {
                get
                {
                    return columnVisualConditionOfFlueSatisfactoryID;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn DeletedColumn
            {
                get
                {
                    return columnDeleted;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn LocationColumn
            {
                get
                {
                    return columnLocation;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn SerialNumColumn
            {
                get
                {
                    return columnSerialNum;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn typemakemodelColumn
            {
                get
                {
                    return columntypemakemodel;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return Rows.Count;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public EngineerVisitAssetWorkSheet_GetForVisitRow this[int index]
            {
                get
                {
                    return (EngineerVisitAssetWorkSheet_GetForVisitRow)Rows[index];
                }
            }

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event EngineerVisitAssetWorkSheet_GetForVisitRowChangeEventHandler EngineerVisitAssetWorkSheet_GetForVisitRowChanging;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event EngineerVisitAssetWorkSheet_GetForVisitRowChangeEventHandler EngineerVisitAssetWorkSheet_GetForVisitRowChanged;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event EngineerVisitAssetWorkSheet_GetForVisitRowChangeEventHandler EngineerVisitAssetWorkSheet_GetForVisitRowDeleting;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event EngineerVisitAssetWorkSheet_GetForVisitRowChangeEventHandler EngineerVisitAssetWorkSheet_GetForVisitRowDeleted;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void AddEngineerVisitAssetWorkSheet_GetForVisitRow(EngineerVisitAssetWorkSheet_GetForVisitRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public EngineerVisitAssetWorkSheet_GetForVisitRow AddEngineerVisitAssetWorkSheet_GetForVisitRow(int EngineerVisitID, int AssetID, int FlueTerminationSatisfactoryID, int FlueFlowTestID, int SpillageTestID, int VentilationProvisionSatisfactoryID, int SafetyDeviceOperationID, decimal DHWFlowRate, decimal ColdWaterTemp, decimal DHWTemp, decimal InletStaticPressure, decimal InletWorkingPressure, decimal MinBurnerPressure, decimal MaxBurnerPressure, decimal CO2, decimal CO2CORatio, int LandlordsApplianceID, int ApplianceServiceOrInspectedID, int ApplianceSafeID, int VisualConditionOfFlueSatisfactoryID, bool Deleted, string Location, string SerialNum, string typemakemodel)























            {
                EngineerVisitAssetWorkSheet_GetForVisitRow rowEngineerVisitAssetWorkSheet_GetForVisitRow = (EngineerVisitAssetWorkSheet_GetForVisitRow)NewRow();
                var columnValuesArray = new object[] { null, EngineerVisitID, AssetID, FlueTerminationSatisfactoryID, FlueFlowTestID, SpillageTestID, VentilationProvisionSatisfactoryID, SafetyDeviceOperationID, DHWFlowRate, ColdWaterTemp, DHWTemp, InletStaticPressure, InletWorkingPressure, MinBurnerPressure, MaxBurnerPressure, CO2, CO2CORatio, LandlordsApplianceID, ApplianceServiceOrInspectedID, ApplianceSafeID, VisualConditionOfFlueSatisfactoryID, Deleted, Location, SerialNum, typemakemodel };
                rowEngineerVisitAssetWorkSheet_GetForVisitRow.ItemArray = columnValuesArray;
                Rows.Add(rowEngineerVisitAssetWorkSheet_GetForVisitRow);
                return rowEngineerVisitAssetWorkSheet_GetForVisitRow;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public EngineerVisitAssetWorkSheet_GetForVisitRow FindByEngineerVisitAssetWorkSheetID(int EngineerVisitAssetWorkSheetID)
            {
                return (EngineerVisitAssetWorkSheet_GetForVisitRow)Rows.Find(new object[] { EngineerVisitAssetWorkSheetID });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public override DataTable Clone()
            {
                EngineerVisitAssetWorkSheet_GetForVisitDataTable cln = (EngineerVisitAssetWorkSheet_GetForVisitDataTable)base.Clone();
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new EngineerVisitAssetWorkSheet_GetForVisitDataTable();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal void InitVars()
            {
                columnEngineerVisitAssetWorkSheetID = Columns["EngineerVisitAssetWorkSheetID"];
                columnEngineerVisitID = Columns["EngineerVisitID"];
                columnAssetID = Columns["AssetID"];
                columnFlueTerminationSatisfactoryID = Columns["FlueTerminationSatisfactoryID"];
                columnFlueFlowTestID = Columns["FlueFlowTestID"];
                columnSpillageTestID = Columns["SpillageTestID"];
                columnVentilationProvisionSatisfactoryID = Columns["VentilationProvisionSatisfactoryID"];
                columnSafetyDeviceOperationID = Columns["SafetyDeviceOperationID"];
                columnDHWFlowRate = Columns["DHWFlowRate"];
                columnColdWaterTemp = Columns["ColdWaterTemp"];
                columnDHWTemp = Columns["DHWTemp"];
                columnInletStaticPressure = Columns["InletStaticPressure"];
                columnInletWorkingPressure = Columns["InletWorkingPressure"];
                columnMinBurnerPressure = Columns["MinBurnerPressure"];
                columnMaxBurnerPressure = Columns["MaxBurnerPressure"];
                columnCO2 = Columns["CO2"];
                columnCO2CORatio = Columns["CO2CORatio"];
                columnLandlordsApplianceID = Columns["LandlordsApplianceID"];
                columnApplianceServiceOrInspectedID = Columns["ApplianceServiceOrInspectedID"];
                columnApplianceSafeID = Columns["ApplianceSafeID"];
                columnVisualConditionOfFlueSatisfactoryID = Columns["VisualConditionOfFlueSatisfactoryID"];
                columnDeleted = Columns["Deleted"];
                columnLocation = Columns["Location"];
                columnSerialNum = Columns["SerialNum"];
                columntypemakemodel = Columns["typemakemodel"];
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            private void InitClass()
            {
                columnEngineerVisitAssetWorkSheetID = new DataColumn("EngineerVisitAssetWorkSheetID", typeof(int), null, MappingType.Element);
                Columns.Add(columnEngineerVisitAssetWorkSheetID);
                columnEngineerVisitID = new DataColumn("EngineerVisitID", typeof(int), null, MappingType.Element);
                Columns.Add(columnEngineerVisitID);
                columnAssetID = new DataColumn("AssetID", typeof(int), null, MappingType.Element);
                Columns.Add(columnAssetID);
                columnFlueTerminationSatisfactoryID = new DataColumn("FlueTerminationSatisfactoryID", typeof(int), null, MappingType.Element);
                Columns.Add(columnFlueTerminationSatisfactoryID);
                columnFlueFlowTestID = new DataColumn("FlueFlowTestID", typeof(int), null, MappingType.Element);
                Columns.Add(columnFlueFlowTestID);
                columnSpillageTestID = new DataColumn("SpillageTestID", typeof(int), null, MappingType.Element);
                Columns.Add(columnSpillageTestID);
                columnVentilationProvisionSatisfactoryID = new DataColumn("VentilationProvisionSatisfactoryID", typeof(int), null, MappingType.Element);
                Columns.Add(columnVentilationProvisionSatisfactoryID);
                columnSafetyDeviceOperationID = new DataColumn("SafetyDeviceOperationID", typeof(int), null, MappingType.Element);
                Columns.Add(columnSafetyDeviceOperationID);
                columnDHWFlowRate = new DataColumn("DHWFlowRate", typeof(decimal), null, MappingType.Element);
                Columns.Add(columnDHWFlowRate);
                columnColdWaterTemp = new DataColumn("ColdWaterTemp", typeof(decimal), null, MappingType.Element);
                Columns.Add(columnColdWaterTemp);
                columnDHWTemp = new DataColumn("DHWTemp", typeof(decimal), null, MappingType.Element);
                Columns.Add(columnDHWTemp);
                columnInletStaticPressure = new DataColumn("InletStaticPressure", typeof(decimal), null, MappingType.Element);
                Columns.Add(columnInletStaticPressure);
                columnInletWorkingPressure = new DataColumn("InletWorkingPressure", typeof(decimal), null, MappingType.Element);
                Columns.Add(columnInletWorkingPressure);
                columnMinBurnerPressure = new DataColumn("MinBurnerPressure", typeof(decimal), null, MappingType.Element);
                Columns.Add(columnMinBurnerPressure);
                columnMaxBurnerPressure = new DataColumn("MaxBurnerPressure", typeof(decimal), null, MappingType.Element);
                Columns.Add(columnMaxBurnerPressure);
                columnCO2 = new DataColumn("CO2", typeof(decimal), null, MappingType.Element);
                Columns.Add(columnCO2);
                columnCO2CORatio = new DataColumn("CO2CORatio", typeof(decimal), null, MappingType.Element);
                Columns.Add(columnCO2CORatio);
                columnLandlordsApplianceID = new DataColumn("LandlordsApplianceID", typeof(int), null, MappingType.Element);
                Columns.Add(columnLandlordsApplianceID);
                columnApplianceServiceOrInspectedID = new DataColumn("ApplianceServiceOrInspectedID", typeof(int), null, MappingType.Element);
                Columns.Add(columnApplianceServiceOrInspectedID);
                columnApplianceSafeID = new DataColumn("ApplianceSafeID", typeof(int), null, MappingType.Element);
                Columns.Add(columnApplianceSafeID);
                columnVisualConditionOfFlueSatisfactoryID = new DataColumn("VisualConditionOfFlueSatisfactoryID", typeof(int), null, MappingType.Element);
                Columns.Add(columnVisualConditionOfFlueSatisfactoryID);
                columnDeleted = new DataColumn("Deleted", typeof(bool), null, MappingType.Element);
                Columns.Add(columnDeleted);
                columnLocation = new DataColumn("Location", typeof(string), null, MappingType.Element);
                Columns.Add(columnLocation);
                columnSerialNum = new DataColumn("SerialNum", typeof(string), null, MappingType.Element);
                Columns.Add(columnSerialNum);
                columntypemakemodel = new DataColumn("typemakemodel", typeof(string), null, MappingType.Element);
                Columns.Add(columntypemakemodel);
                Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { columnEngineerVisitAssetWorkSheetID }, true));
                columnEngineerVisitAssetWorkSheetID.AutoIncrement = true;
                columnEngineerVisitAssetWorkSheetID.AllowDBNull = false;
                columnEngineerVisitAssetWorkSheetID.ReadOnly = true;
                columnEngineerVisitAssetWorkSheetID.Unique = true;
                columnEngineerVisitID.AllowDBNull = false;
                columnAssetID.AllowDBNull = false;
                columnFlueTerminationSatisfactoryID.AllowDBNull = false;
                columnFlueFlowTestID.AllowDBNull = false;
                columnSpillageTestID.AllowDBNull = false;
                columnVentilationProvisionSatisfactoryID.AllowDBNull = false;
                columnSafetyDeviceOperationID.AllowDBNull = false;
                columnDHWFlowRate.AllowDBNull = false;
                columnColdWaterTemp.AllowDBNull = false;
                columnDHWTemp.AllowDBNull = false;
                columnInletStaticPressure.AllowDBNull = false;
                columnInletWorkingPressure.AllowDBNull = false;
                columnMinBurnerPressure.AllowDBNull = false;
                columnMaxBurnerPressure.AllowDBNull = false;
                columnCO2.AllowDBNull = false;
                columnCO2CORatio.AllowDBNull = false;
                columnLandlordsApplianceID.AllowDBNull = false;
                columnApplianceServiceOrInspectedID.AllowDBNull = false;
                columnApplianceSafeID.AllowDBNull = false;
                columnVisualConditionOfFlueSatisfactoryID.AllowDBNull = false;
                columnDeleted.AllowDBNull = false;
                columnLocation.ReadOnly = true;
                columnLocation.MaxLength = 255;
                columnSerialNum.ReadOnly = true;
                columnSerialNum.MaxLength = 50;
                columntypemakemodel.ReadOnly = true;
                columntypemakemodel.MaxLength = 771;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public EngineerVisitAssetWorkSheet_GetForVisitRow NewEngineerVisitAssetWorkSheet_GetForVisitRow()
            {
                return (EngineerVisitAssetWorkSheet_GetForVisitRow)NewRow();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new EngineerVisitAssetWorkSheet_GetForVisitRow(builder);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(EngineerVisitAssetWorkSheet_GetForVisitRow);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (EngineerVisitAssetWorkSheet_GetForVisitRowChanged is object)
                {
                    EngineerVisitAssetWorkSheet_GetForVisitRowChanged?.Invoke(this, new EngineerVisitAssetWorkSheet_GetForVisitRowChangeEvent((EngineerVisitAssetWorkSheet_GetForVisitRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (EngineerVisitAssetWorkSheet_GetForVisitRowChanging is object)
                {
                    EngineerVisitAssetWorkSheet_GetForVisitRowChanging?.Invoke(this, new EngineerVisitAssetWorkSheet_GetForVisitRowChangeEvent((EngineerVisitAssetWorkSheet_GetForVisitRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (EngineerVisitAssetWorkSheet_GetForVisitRowDeleted is object)
                {
                    EngineerVisitAssetWorkSheet_GetForVisitRowDeleted?.Invoke(this, new EngineerVisitAssetWorkSheet_GetForVisitRowChangeEvent((EngineerVisitAssetWorkSheet_GetForVisitRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (EngineerVisitAssetWorkSheet_GetForVisitRowDeleting is object)
                {
                    EngineerVisitAssetWorkSheet_GetForVisitRowDeleting?.Invoke(this, new EngineerVisitAssetWorkSheet_GetForVisitRowChangeEvent((EngineerVisitAssetWorkSheet_GetForVisitRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void RemoveEngineerVisitAssetWorkSheet_GetForVisitRow(EngineerVisitAssetWorkSheet_GetForVisitRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
            {
                var type = new System.Xml.Schema.XmlSchemaComplexType();
                var sequence = new System.Xml.Schema.XmlSchemaSequence();
                var ds = new FSMDataSet();
                var any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                var any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                var attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                var attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EngineerVisitAssetWorkSheet_GetForVisitDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                var dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    var s1 = new System.IO.MemoryStream();
                    var s2 = new System.IO.MemoryStream();
                    try
                    {
                        System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        var schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                        while (schemas.MoveNext())
                        {
                            schema = (System.Xml.Schema.XmlSchema)schemas.Current;
                            s2.SetLength(0);
                            schema.Write(s2);
                            if (s1.Length == s2.Length)
                            {
                                s1.Position = 0;
                                s2.Position = 0;
                                while (s1.Position != s1.Length && s1.ReadByte() == s2.ReadByte())
                                {
                                }

                                if (s1.Position == s1.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (s1 is object)
                        {
                            s1.Close();
                        }

                        if (s2 is object)
                        {
                            s2.Close();
                        }
                    }
                }

                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
    /// Represents the strongly named DataTable class.
    /// </summary>
        [Serializable()]
        [System.Xml.Serialization.XmlSchemaProvider("GetTypedTableSchema")]
        public partial class EngineerVisitDefects_GetForEngineerVisitDataTable : TypedTableBase<EngineerVisitDefects_GetForEngineerVisitRow>
        {
            private DataColumn columnEngineerVisitDefectID;
            private DataColumn columnCategoryID;
            private DataColumn columnReason;
            private DataColumn columnActionTaken;
            private DataColumn columnWarningNoticeIssued;
            private DataColumn columnDisconnected;
            private DataColumn columnDisconnected1;
            private DataColumn columnComments;
            private DataColumn columnAssetID;
            private DataColumn columnCategory;
            private DataColumn columnLocation;
            private DataColumn columnSerialNum;
            private DataColumn columntypemakemodel;
            private DataColumn columnEngineerVisitID;
            private DataColumn columnDeleted;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public EngineerVisitDefects_GetForEngineerVisitDataTable() : base()
            {
                TableName = "EngineerVisitDefects_GetForEngineerVisit";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal EngineerVisitDefects_GetForEngineerVisitDataTable(DataTable table) : base()
            {
                TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    CaseSensitive = table.CaseSensitive;
                }

                if ((table.Locale.ToString() ?? "") != (table.DataSet.Locale.ToString() ?? ""))
                {
                    Locale = table.Locale;
                }

                if ((table.Namespace ?? "") != (table.DataSet.Namespace ?? ""))
                {
                    Namespace = table.Namespace;
                }

                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected EngineerVisitDefects_GetForEngineerVisitDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn EngineerVisitDefectIDColumn
            {
                get
                {
                    return columnEngineerVisitDefectID;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn CategoryIDColumn
            {
                get
                {
                    return columnCategoryID;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn ReasonColumn
            {
                get
                {
                    return columnReason;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn ActionTakenColumn
            {
                get
                {
                    return columnActionTaken;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn WarningNoticeIssuedColumn
            {
                get
                {
                    return columnWarningNoticeIssued;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn DisconnectedColumn
            {
                get
                {
                    return columnDisconnected;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn Disconnected1Column
            {
                get
                {
                    return columnDisconnected1;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn CommentsColumn
            {
                get
                {
                    return columnComments;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn AssetIDColumn
            {
                get
                {
                    return columnAssetID;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn CategoryColumn
            {
                get
                {
                    return columnCategory;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn LocationColumn
            {
                get
                {
                    return columnLocation;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn SerialNumColumn
            {
                get
                {
                    return columnSerialNum;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn typemakemodelColumn
            {
                get
                {
                    return columntypemakemodel;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn EngineerVisitIDColumn
            {
                get
                {
                    return columnEngineerVisitID;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn DeletedColumn
            {
                get
                {
                    return columnDeleted;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return Rows.Count;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public EngineerVisitDefects_GetForEngineerVisitRow this[int index]
            {
                get
                {
                    return (EngineerVisitDefects_GetForEngineerVisitRow)Rows[index];
                }
            }

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event EngineerVisitDefects_GetForEngineerVisitRowChangeEventHandler EngineerVisitDefects_GetForEngineerVisitRowChanging;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event EngineerVisitDefects_GetForEngineerVisitRowChangeEventHandler EngineerVisitDefects_GetForEngineerVisitRowChanged;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event EngineerVisitDefects_GetForEngineerVisitRowChangeEventHandler EngineerVisitDefects_GetForEngineerVisitRowDeleting;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event EngineerVisitDefects_GetForEngineerVisitRowChangeEventHandler EngineerVisitDefects_GetForEngineerVisitRowDeleted;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void AddEngineerVisitDefects_GetForEngineerVisitRow(EngineerVisitDefects_GetForEngineerVisitRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public EngineerVisitDefects_GetForEngineerVisitRow AddEngineerVisitDefects_GetForEngineerVisitRow(int CategoryID, string Reason, string ActionTaken, string WarningNoticeIssued, string Disconnected, bool Disconnected1, string Comments, int AssetID, string Category, string Location, string SerialNum, string typemakemodel, int EngineerVisitID, bool Deleted)
            {
                EngineerVisitDefects_GetForEngineerVisitRow rowEngineerVisitDefects_GetForEngineerVisitRow = (EngineerVisitDefects_GetForEngineerVisitRow)NewRow();
                var columnValuesArray = new object[] { null, CategoryID, Reason, ActionTaken, WarningNoticeIssued, Disconnected, Disconnected1, Comments, AssetID, Category, Location, SerialNum, typemakemodel, EngineerVisitID, Deleted };
                rowEngineerVisitDefects_GetForEngineerVisitRow.ItemArray = columnValuesArray;
                Rows.Add(rowEngineerVisitDefects_GetForEngineerVisitRow);
                return rowEngineerVisitDefects_GetForEngineerVisitRow;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public EngineerVisitDefects_GetForEngineerVisitRow FindByEngineerVisitDefectID(int EngineerVisitDefectID)
            {
                return (EngineerVisitDefects_GetForEngineerVisitRow)Rows.Find(new object[] { EngineerVisitDefectID });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public override DataTable Clone()
            {
                EngineerVisitDefects_GetForEngineerVisitDataTable cln = (EngineerVisitDefects_GetForEngineerVisitDataTable)base.Clone();
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new EngineerVisitDefects_GetForEngineerVisitDataTable();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal void InitVars()
            {
                columnEngineerVisitDefectID = Columns["EngineerVisitDefectID"];
                columnCategoryID = Columns["CategoryID"];
                columnReason = Columns["Reason"];
                columnActionTaken = Columns["ActionTaken"];
                columnWarningNoticeIssued = Columns["WarningNoticeIssued"];
                columnDisconnected = Columns["Disconnected"];
                columnDisconnected1 = Columns["Disconnected1"];
                columnComments = Columns["Comments"];
                columnAssetID = Columns["AssetID"];
                columnCategory = Columns["Category"];
                columnLocation = Columns["Location"];
                columnSerialNum = Columns["SerialNum"];
                columntypemakemodel = Columns["typemakemodel"];
                columnEngineerVisitID = Columns["EngineerVisitID"];
                columnDeleted = Columns["Deleted"];
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            private void InitClass()
            {
                columnEngineerVisitDefectID = new DataColumn("EngineerVisitDefectID", typeof(int), null, MappingType.Element);
                Columns.Add(columnEngineerVisitDefectID);
                columnCategoryID = new DataColumn("CategoryID", typeof(int), null, MappingType.Element);
                Columns.Add(columnCategoryID);
                columnReason = new DataColumn("Reason", typeof(string), null, MappingType.Element);
                Columns.Add(columnReason);
                columnActionTaken = new DataColumn("ActionTaken", typeof(string), null, MappingType.Element);
                Columns.Add(columnActionTaken);
                columnWarningNoticeIssued = new DataColumn("WarningNoticeIssued", typeof(string), null, MappingType.Element);
                Columns.Add(columnWarningNoticeIssued);
                columnDisconnected = new DataColumn("Disconnected", typeof(string), null, MappingType.Element);
                Columns.Add(columnDisconnected);
                columnDisconnected1 = new DataColumn("Disconnected1", typeof(bool), null, MappingType.Element);
                Columns.Add(columnDisconnected1);
                columnComments = new DataColumn("Comments", typeof(string), null, MappingType.Element);
                Columns.Add(columnComments);
                columnAssetID = new DataColumn("AssetID", typeof(int), null, MappingType.Element);
                Columns.Add(columnAssetID);
                columnCategory = new DataColumn("Category", typeof(string), null, MappingType.Element);
                Columns.Add(columnCategory);
                columnLocation = new DataColumn("Location", typeof(string), null, MappingType.Element);
                Columns.Add(columnLocation);
                columnSerialNum = new DataColumn("SerialNum", typeof(string), null, MappingType.Element);
                Columns.Add(columnSerialNum);
                columntypemakemodel = new DataColumn("typemakemodel", typeof(string), null, MappingType.Element);
                Columns.Add(columntypemakemodel);
                columnEngineerVisitID = new DataColumn("EngineerVisitID", typeof(int), null, MappingType.Element);
                Columns.Add(columnEngineerVisitID);
                columnDeleted = new DataColumn("Deleted", typeof(bool), null, MappingType.Element);
                Columns.Add(columnDeleted);
                Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { columnEngineerVisitDefectID }, true));
                columnEngineerVisitDefectID.AutoIncrement = true;
                columnEngineerVisitDefectID.AllowDBNull = false;
                columnEngineerVisitDefectID.ReadOnly = true;
                columnEngineerVisitDefectID.Unique = true;
                columnCategoryID.AllowDBNull = false;
                columnReason.MaxLength = 4000;
                columnActionTaken.MaxLength = 4000;
                columnWarningNoticeIssued.ReadOnly = true;
                columnWarningNoticeIssued.MaxLength = 3;
                columnDisconnected.ReadOnly = true;
                columnDisconnected.MaxLength = 3;
                columnDisconnected1.AllowDBNull = false;
                columnComments.MaxLength = 4000;
                columnAssetID.ReadOnly = true;
                columnCategory.AllowDBNull = false;
                columnCategory.MaxLength = 255;
                columnLocation.ReadOnly = true;
                columnLocation.MaxLength = 255;
                columnSerialNum.ReadOnly = true;
                columnSerialNum.MaxLength = 50;
                columntypemakemodel.ReadOnly = true;
                columntypemakemodel.MaxLength = 771;
                columnEngineerVisitID.AllowDBNull = false;
                columnDeleted.AllowDBNull = false;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public EngineerVisitDefects_GetForEngineerVisitRow NewEngineerVisitDefects_GetForEngineerVisitRow()
            {
                return (EngineerVisitDefects_GetForEngineerVisitRow)NewRow();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new EngineerVisitDefects_GetForEngineerVisitRow(builder);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(EngineerVisitDefects_GetForEngineerVisitRow);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (EngineerVisitDefects_GetForEngineerVisitRowChanged is object)
                {
                    EngineerVisitDefects_GetForEngineerVisitRowChanged?.Invoke(this, new EngineerVisitDefects_GetForEngineerVisitRowChangeEvent((EngineerVisitDefects_GetForEngineerVisitRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (EngineerVisitDefects_GetForEngineerVisitRowChanging is object)
                {
                    EngineerVisitDefects_GetForEngineerVisitRowChanging?.Invoke(this, new EngineerVisitDefects_GetForEngineerVisitRowChangeEvent((EngineerVisitDefects_GetForEngineerVisitRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (EngineerVisitDefects_GetForEngineerVisitRowDeleted is object)
                {
                    EngineerVisitDefects_GetForEngineerVisitRowDeleted?.Invoke(this, new EngineerVisitDefects_GetForEngineerVisitRowChangeEvent((EngineerVisitDefects_GetForEngineerVisitRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (EngineerVisitDefects_GetForEngineerVisitRowDeleting is object)
                {
                    EngineerVisitDefects_GetForEngineerVisitRowDeleting?.Invoke(this, new EngineerVisitDefects_GetForEngineerVisitRowChangeEvent((EngineerVisitDefects_GetForEngineerVisitRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void RemoveEngineerVisitDefects_GetForEngineerVisitRow(EngineerVisitDefects_GetForEngineerVisitRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
            {
                var type = new System.Xml.Schema.XmlSchemaComplexType();
                var sequence = new System.Xml.Schema.XmlSchemaSequence();
                var ds = new FSMDataSet();
                var any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                var any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                var attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                var attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EngineerVisitDefects_GetForEngineerVisitDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                var dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    var s1 = new System.IO.MemoryStream();
                    var s2 = new System.IO.MemoryStream();
                    try
                    {
                        System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        var schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                        while (schemas.MoveNext())
                        {
                            schema = (System.Xml.Schema.XmlSchema)schemas.Current;
                            s2.SetLength(0);
                            schema.Write(s2);
                            if (s1.Length == s2.Length)
                            {
                                s1.Position = 0;
                                s2.Position = 0;
                                while (s1.Position != s1.Length && s1.ReadByte() == s2.ReadByte())
                                {
                                }

                                if (s1.Position == s1.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (s1 is object)
                        {
                            s1.Close();
                        }

                        if (s2 is object)
                        {
                            s2.Close();
                        }
                    }
                }

                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
    /// Represents the strongly named DataTable class.
    /// </summary>
        [Serializable()]
        [System.Xml.Serialization.XmlSchemaProvider("GetTypedTableSchema")]
        public partial class EngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitIDDataTable : TypedTableBase<EngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitIDRow>
        {
            private DataColumn columntick;
            private DataColumn columnEngineerVisitScheduleOfRateChargesID;
            private DataColumn columnJobItemID;
            private DataColumn columnCode;
            private DataColumn columncategory;
            private DataColumn columnSummary;
            private DataColumn columnNumUnitsUsed;
            private DataColumn columnPrice;
            private DataColumn columnTotal;
            private DataColumn columntick1;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public EngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitIDDataTable() : base()
            {
                TableName = "EngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitID";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal EngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitIDDataTable(DataTable table) : base()
            {
                TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    CaseSensitive = table.CaseSensitive;
                }

                if ((table.Locale.ToString() ?? "") != (table.DataSet.Locale.ToString() ?? ""))
                {
                    Locale = table.Locale;
                }

                if ((table.Namespace ?? "") != (table.DataSet.Namespace ?? ""))
                {
                    Namespace = table.Namespace;
                }

                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected EngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitIDDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn tickColumn
            {
                get
                {
                    return columntick;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn EngineerVisitScheduleOfRateChargesIDColumn
            {
                get
                {
                    return columnEngineerVisitScheduleOfRateChargesID;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn JobItemIDColumn
            {
                get
                {
                    return columnJobItemID;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn CodeColumn
            {
                get
                {
                    return columnCode;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn categoryColumn
            {
                get
                {
                    return columncategory;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn SummaryColumn
            {
                get
                {
                    return columnSummary;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn NumUnitsUsedColumn
            {
                get
                {
                    return columnNumUnitsUsed;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn PriceColumn
            {
                get
                {
                    return columnPrice;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn TotalColumn
            {
                get
                {
                    return columnTotal;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn tick1Column
            {
                get
                {
                    return columntick1;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return Rows.Count;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public EngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitIDRow this[int index]
            {
                get
                {
                    return (EngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitIDRow)Rows[index];
                }
            }

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event EngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitIDRowChangeEventHandler EngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitIDRowChanging;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event EngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitIDRowChangeEventHandler EngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitIDRowChanged;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event EngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitIDRowChangeEventHandler EngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitIDRowDeleting;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event EngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitIDRowChangeEventHandler EngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitIDRowDeleted;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void AddEngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitIDRow(EngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitIDRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public EngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitIDRow AddEngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitIDRow(bool tick, string Code, string category, string Summary, decimal NumUnitsUsed, decimal Price, decimal Total, bool tick1)
            {
                EngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitIDRow rowEngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitIDRow = (EngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitIDRow)NewRow();
                var columnValuesArray = new object[] { tick, null, null, Code, category, Summary, NumUnitsUsed, Price, Total, tick1 };
                rowEngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitIDRow.ItemArray = columnValuesArray;
                Rows.Add(rowEngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitIDRow);
                return rowEngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitIDRow;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public override DataTable Clone()
            {
                EngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitIDDataTable cln = (EngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitIDDataTable)base.Clone();
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new EngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitIDDataTable();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal void InitVars()
            {
                columntick = Columns["tick"];
                columnEngineerVisitScheduleOfRateChargesID = Columns["EngineerVisitScheduleOfRateChargesID"];
                columnJobItemID = Columns["JobItemID"];
                columnCode = Columns["Code"];
                columncategory = Columns["category"];
                columnSummary = Columns["Summary"];
                columnNumUnitsUsed = Columns["NumUnitsUsed"];
                columnPrice = Columns["Price"];
                columnTotal = Columns["Total"];
                columntick1 = Columns["tick1"];
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            private void InitClass()
            {
                columntick = new DataColumn("tick", typeof(bool), null, MappingType.Element);
                Columns.Add(columntick);
                columnEngineerVisitScheduleOfRateChargesID = new DataColumn("EngineerVisitScheduleOfRateChargesID", typeof(int), null, MappingType.Element);
                Columns.Add(columnEngineerVisitScheduleOfRateChargesID);
                columnJobItemID = new DataColumn("JobItemID", typeof(int), null, MappingType.Element);
                Columns.Add(columnJobItemID);
                columnCode = new DataColumn("Code", typeof(string), null, MappingType.Element);
                Columns.Add(columnCode);
                columncategory = new DataColumn("category", typeof(string), null, MappingType.Element);
                Columns.Add(columncategory);
                columnSummary = new DataColumn("Summary", typeof(string), null, MappingType.Element);
                Columns.Add(columnSummary);
                columnNumUnitsUsed = new DataColumn("NumUnitsUsed", typeof(decimal), null, MappingType.Element);
                Columns.Add(columnNumUnitsUsed);
                columnPrice = new DataColumn("Price", typeof(decimal), null, MappingType.Element);
                Columns.Add(columnPrice);
                columnTotal = new DataColumn("Total", typeof(decimal), null, MappingType.Element);
                Columns.Add(columnTotal);
                columntick1 = new DataColumn("tick1", typeof(bool), null, MappingType.Element);
                Columns.Add(columntick1);
                columntick.ReadOnly = true;
                columnEngineerVisitScheduleOfRateChargesID.AutoIncrement = true;
                columnEngineerVisitScheduleOfRateChargesID.ReadOnly = true;
                columnJobItemID.AutoIncrement = true;
                columnJobItemID.AllowDBNull = false;
                columnJobItemID.ReadOnly = true;
                columnCode.MaxLength = 50;
                columncategory.MaxLength = 255;
                columnSummary.AllowDBNull = false;
                columnSummary.MaxLength = 4000;
                columnPrice.ReadOnly = true;
                columnTotal.ReadOnly = true;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public EngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitIDRow NewEngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitIDRow()
            {
                return (EngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitIDRow)NewRow();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new EngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitIDRow(builder);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(EngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitIDRow);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (EngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitIDRowChanged is object)
                {
                    EngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitIDRowChanged?.Invoke(this, new EngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitIDRowChangeEvent((EngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitIDRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (EngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitIDRowChanging is object)
                {
                    EngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitIDRowChanging?.Invoke(this, new EngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitIDRowChangeEvent((EngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitIDRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (EngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitIDRowDeleted is object)
                {
                    EngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitIDRowDeleted?.Invoke(this, new EngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitIDRowChangeEvent((EngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitIDRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (EngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitIDRowDeleting is object)
                {
                    EngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitIDRowDeleting?.Invoke(this, new EngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitIDRowChangeEvent((EngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitIDRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void RemoveEngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitIDRow(EngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitIDRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
            {
                var type = new System.Xml.Schema.XmlSchemaComplexType();
                var sequence = new System.Xml.Schema.XmlSchemaSequence();
                var ds = new FSMDataSet();
                var any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                var any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                var attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                var attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitIDDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                var dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    var s1 = new System.IO.MemoryStream();
                    var s2 = new System.IO.MemoryStream();
                    try
                    {
                        System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        var schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                        while (schemas.MoveNext())
                        {
                            schema = (System.Xml.Schema.XmlSchema)schemas.Current;
                            s2.SetLength(0);
                            schema.Write(s2);
                            if (s1.Length == s2.Length)
                            {
                                s1.Position = 0;
                                s2.Position = 0;
                                while (s1.Position != s1.Length && s1.ReadByte() == s2.ReadByte())
                                {
                                }

                                if (s1.Position == s1.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (s1 is object)
                        {
                            s1.Close();
                        }

                        if (s2 is object)
                        {
                            s2.Close();
                        }
                    }
                }

                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
    /// Represents the strongly named DataTable class.
    /// </summary>
        [Serializable()]
        [System.Xml.Serialization.XmlSchemaProvider("GetTypedTableSchema")]
        public partial class EngineerVisitTimeSheet_Get_For_EngineerVisitIDDataTable : TypedTableBase<EngineerVisitTimeSheet_Get_For_EngineerVisitIDRow>
        {
            private DataColumn columnEngineerVisitTimeSheetID;
            private DataColumn columnEngineerVisitID;
            private DataColumn columnStartDateTime;
            private DataColumn columnEndDateTime;
            private DataColumn columnComments;
            private DataColumn columnTimeSheetType;
            private DataColumn columnTimesheetTypeID;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public EngineerVisitTimeSheet_Get_For_EngineerVisitIDDataTable() : base()
            {
                TableName = "EngineerVisitTimeSheet_Get_For_EngineerVisitID";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal EngineerVisitTimeSheet_Get_For_EngineerVisitIDDataTable(DataTable table) : base()
            {
                TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    CaseSensitive = table.CaseSensitive;
                }

                if ((table.Locale.ToString() ?? "") != (table.DataSet.Locale.ToString() ?? ""))
                {
                    Locale = table.Locale;
                }

                if ((table.Namespace ?? "") != (table.DataSet.Namespace ?? ""))
                {
                    Namespace = table.Namespace;
                }

                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected EngineerVisitTimeSheet_Get_For_EngineerVisitIDDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn EngineerVisitTimeSheetIDColumn
            {
                get
                {
                    return columnEngineerVisitTimeSheetID;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn EngineerVisitIDColumn
            {
                get
                {
                    return columnEngineerVisitID;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn StartDateTimeColumn
            {
                get
                {
                    return columnStartDateTime;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn EndDateTimeColumn
            {
                get
                {
                    return columnEndDateTime;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn CommentsColumn
            {
                get
                {
                    return columnComments;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn TimeSheetTypeColumn
            {
                get
                {
                    return columnTimeSheetType;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn TimesheetTypeIDColumn
            {
                get
                {
                    return columnTimesheetTypeID;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return Rows.Count;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public EngineerVisitTimeSheet_Get_For_EngineerVisitIDRow this[int index]
            {
                get
                {
                    return (EngineerVisitTimeSheet_Get_For_EngineerVisitIDRow)Rows[index];
                }
            }

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event EngineerVisitTimeSheet_Get_For_EngineerVisitIDRowChangeEventHandler EngineerVisitTimeSheet_Get_For_EngineerVisitIDRowChanging;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event EngineerVisitTimeSheet_Get_For_EngineerVisitIDRowChangeEventHandler EngineerVisitTimeSheet_Get_For_EngineerVisitIDRowChanged;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event EngineerVisitTimeSheet_Get_For_EngineerVisitIDRowChangeEventHandler EngineerVisitTimeSheet_Get_For_EngineerVisitIDRowDeleting;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event EngineerVisitTimeSheet_Get_For_EngineerVisitIDRowChangeEventHandler EngineerVisitTimeSheet_Get_For_EngineerVisitIDRowDeleted;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void AddEngineerVisitTimeSheet_Get_For_EngineerVisitIDRow(EngineerVisitTimeSheet_Get_For_EngineerVisitIDRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public EngineerVisitTimeSheet_Get_For_EngineerVisitIDRow AddEngineerVisitTimeSheet_Get_For_EngineerVisitIDRow(int EngineerVisitID, DateTime StartDateTime, DateTime EndDateTime, string Comments, string TimeSheetType, int TimesheetTypeID)
            {
                EngineerVisitTimeSheet_Get_For_EngineerVisitIDRow rowEngineerVisitTimeSheet_Get_For_EngineerVisitIDRow = (EngineerVisitTimeSheet_Get_For_EngineerVisitIDRow)NewRow();
                var columnValuesArray = new object[] { null, EngineerVisitID, StartDateTime, EndDateTime, Comments, TimeSheetType, TimesheetTypeID };
                rowEngineerVisitTimeSheet_Get_For_EngineerVisitIDRow.ItemArray = columnValuesArray;
                Rows.Add(rowEngineerVisitTimeSheet_Get_For_EngineerVisitIDRow);
                return rowEngineerVisitTimeSheet_Get_For_EngineerVisitIDRow;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public EngineerVisitTimeSheet_Get_For_EngineerVisitIDRow FindByEngineerVisitTimeSheetID(int EngineerVisitTimeSheetID)
            {
                return (EngineerVisitTimeSheet_Get_For_EngineerVisitIDRow)Rows.Find(new object[] { EngineerVisitTimeSheetID });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public override DataTable Clone()
            {
                EngineerVisitTimeSheet_Get_For_EngineerVisitIDDataTable cln = (EngineerVisitTimeSheet_Get_For_EngineerVisitIDDataTable)base.Clone();
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new EngineerVisitTimeSheet_Get_For_EngineerVisitIDDataTable();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal void InitVars()
            {
                columnEngineerVisitTimeSheetID = Columns["EngineerVisitTimeSheetID"];
                columnEngineerVisitID = Columns["EngineerVisitID"];
                columnStartDateTime = Columns["StartDateTime"];
                columnEndDateTime = Columns["EndDateTime"];
                columnComments = Columns["Comments"];
                columnTimeSheetType = Columns["TimeSheetType"];
                columnTimesheetTypeID = Columns["TimesheetTypeID"];
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            private void InitClass()
            {
                columnEngineerVisitTimeSheetID = new DataColumn("EngineerVisitTimeSheetID", typeof(int), null, MappingType.Element);
                Columns.Add(columnEngineerVisitTimeSheetID);
                columnEngineerVisitID = new DataColumn("EngineerVisitID", typeof(int), null, MappingType.Element);
                Columns.Add(columnEngineerVisitID);
                columnStartDateTime = new DataColumn("StartDateTime", typeof(DateTime), null, MappingType.Element);
                Columns.Add(columnStartDateTime);
                columnEndDateTime = new DataColumn("EndDateTime", typeof(DateTime), null, MappingType.Element);
                Columns.Add(columnEndDateTime);
                columnComments = new DataColumn("Comments", typeof(string), null, MappingType.Element);
                Columns.Add(columnComments);
                columnTimeSheetType = new DataColumn("TimeSheetType", typeof(string), null, MappingType.Element);
                Columns.Add(columnTimeSheetType);
                columnTimesheetTypeID = new DataColumn("TimesheetTypeID", typeof(int), null, MappingType.Element);
                Columns.Add(columnTimesheetTypeID);
                Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { columnEngineerVisitTimeSheetID }, true));
                columnEngineerVisitTimeSheetID.AutoIncrement = true;
                columnEngineerVisitTimeSheetID.AllowDBNull = false;
                columnEngineerVisitTimeSheetID.ReadOnly = true;
                columnEngineerVisitTimeSheetID.Unique = true;
                columnEngineerVisitID.AllowDBNull = false;
                columnStartDateTime.AllowDBNull = false;
                columnEndDateTime.AllowDBNull = false;
                columnComments.AllowDBNull = false;
                columnComments.MaxLength = 4000;
                columnTimeSheetType.AllowDBNull = false;
                columnTimeSheetType.MaxLength = 255;
                columnTimesheetTypeID.AllowDBNull = false;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public EngineerVisitTimeSheet_Get_For_EngineerVisitIDRow NewEngineerVisitTimeSheet_Get_For_EngineerVisitIDRow()
            {
                return (EngineerVisitTimeSheet_Get_For_EngineerVisitIDRow)NewRow();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new EngineerVisitTimeSheet_Get_For_EngineerVisitIDRow(builder);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(EngineerVisitTimeSheet_Get_For_EngineerVisitIDRow);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (EngineerVisitTimeSheet_Get_For_EngineerVisitIDRowChanged is object)
                {
                    EngineerVisitTimeSheet_Get_For_EngineerVisitIDRowChanged?.Invoke(this, new EngineerVisitTimeSheet_Get_For_EngineerVisitIDRowChangeEvent((EngineerVisitTimeSheet_Get_For_EngineerVisitIDRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (EngineerVisitTimeSheet_Get_For_EngineerVisitIDRowChanging is object)
                {
                    EngineerVisitTimeSheet_Get_For_EngineerVisitIDRowChanging?.Invoke(this, new EngineerVisitTimeSheet_Get_For_EngineerVisitIDRowChangeEvent((EngineerVisitTimeSheet_Get_For_EngineerVisitIDRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (EngineerVisitTimeSheet_Get_For_EngineerVisitIDRowDeleted is object)
                {
                    EngineerVisitTimeSheet_Get_For_EngineerVisitIDRowDeleted?.Invoke(this, new EngineerVisitTimeSheet_Get_For_EngineerVisitIDRowChangeEvent((EngineerVisitTimeSheet_Get_For_EngineerVisitIDRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (EngineerVisitTimeSheet_Get_For_EngineerVisitIDRowDeleting is object)
                {
                    EngineerVisitTimeSheet_Get_For_EngineerVisitIDRowDeleting?.Invoke(this, new EngineerVisitTimeSheet_Get_For_EngineerVisitIDRowChangeEvent((EngineerVisitTimeSheet_Get_For_EngineerVisitIDRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void RemoveEngineerVisitTimeSheet_Get_For_EngineerVisitIDRow(EngineerVisitTimeSheet_Get_For_EngineerVisitIDRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
            {
                var type = new System.Xml.Schema.XmlSchemaComplexType();
                var sequence = new System.Xml.Schema.XmlSchemaSequence();
                var ds = new FSMDataSet();
                var any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                var any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                var attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                var attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EngineerVisitTimeSheet_Get_For_EngineerVisitIDDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                var dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    var s1 = new System.IO.MemoryStream();
                    var s2 = new System.IO.MemoryStream();
                    try
                    {
                        System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        var schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                        while (schemas.MoveNext())
                        {
                            schema = (System.Xml.Schema.XmlSchema)schemas.Current;
                            s2.SetLength(0);
                            schema.Write(s2);
                            if (s1.Length == s2.Length)
                            {
                                s1.Position = 0;
                                s2.Position = 0;
                                while (s1.Position != s1.Length && s1.ReadByte() == s2.ReadByte())
                                {
                                }

                                if (s1.Position == s1.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (s1 is object)
                        {
                            s1.Close();
                        }

                        if (s2 is object)
                        {
                            s2.Close();
                        }
                    }
                }

                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
    /// Represents the strongly named DataTable class.
    /// </summary>
        [Serializable()]
        [System.Xml.Serialization.XmlSchemaProvider("GetTypedTableSchema")]
        public partial class EngineerVisitUnitsUsed_Get_For_EngineerVisitIDDataTable : TypedTableBase<EngineerVisitUnitsUsed_Get_For_EngineerVisitIDRow>
        {
            private DataColumn columnJobItemID;
            private DataColumn columnSummary;
            private DataColumn columnNumAllocated;
            private DataColumn columnNumUnitsUsed;
            private DataColumn columnPrice;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public EngineerVisitUnitsUsed_Get_For_EngineerVisitIDDataTable() : base()
            {
                TableName = "EngineerVisitUnitsUsed_Get_For_EngineerVisitID";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal EngineerVisitUnitsUsed_Get_For_EngineerVisitIDDataTable(DataTable table) : base()
            {
                TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    CaseSensitive = table.CaseSensitive;
                }

                if ((table.Locale.ToString() ?? "") != (table.DataSet.Locale.ToString() ?? ""))
                {
                    Locale = table.Locale;
                }

                if ((table.Namespace ?? "") != (table.DataSet.Namespace ?? ""))
                {
                    Namespace = table.Namespace;
                }

                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected EngineerVisitUnitsUsed_Get_For_EngineerVisitIDDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn JobItemIDColumn
            {
                get
                {
                    return columnJobItemID;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn SummaryColumn
            {
                get
                {
                    return columnSummary;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn NumAllocatedColumn
            {
                get
                {
                    return columnNumAllocated;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn NumUnitsUsedColumn
            {
                get
                {
                    return columnNumUnitsUsed;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn PriceColumn
            {
                get
                {
                    return columnPrice;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return Rows.Count;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public EngineerVisitUnitsUsed_Get_For_EngineerVisitIDRow this[int index]
            {
                get
                {
                    return (EngineerVisitUnitsUsed_Get_For_EngineerVisitIDRow)Rows[index];
                }
            }

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event EngineerVisitUnitsUsed_Get_For_EngineerVisitIDRowChangeEventHandler EngineerVisitUnitsUsed_Get_For_EngineerVisitIDRowChanging;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event EngineerVisitUnitsUsed_Get_For_EngineerVisitIDRowChangeEventHandler EngineerVisitUnitsUsed_Get_For_EngineerVisitIDRowChanged;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event EngineerVisitUnitsUsed_Get_For_EngineerVisitIDRowChangeEventHandler EngineerVisitUnitsUsed_Get_For_EngineerVisitIDRowDeleting;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event EngineerVisitUnitsUsed_Get_For_EngineerVisitIDRowChangeEventHandler EngineerVisitUnitsUsed_Get_For_EngineerVisitIDRowDeleted;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void AddEngineerVisitUnitsUsed_Get_For_EngineerVisitIDRow(EngineerVisitUnitsUsed_Get_For_EngineerVisitIDRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public EngineerVisitUnitsUsed_Get_For_EngineerVisitIDRow AddEngineerVisitUnitsUsed_Get_For_EngineerVisitIDRow(string Summary, decimal NumAllocated, decimal NumUnitsUsed, decimal Price)
            {
                EngineerVisitUnitsUsed_Get_For_EngineerVisitIDRow rowEngineerVisitUnitsUsed_Get_For_EngineerVisitIDRow = (EngineerVisitUnitsUsed_Get_For_EngineerVisitIDRow)NewRow();
                var columnValuesArray = new object[] { null, Summary, NumAllocated, NumUnitsUsed, Price };
                rowEngineerVisitUnitsUsed_Get_For_EngineerVisitIDRow.ItemArray = columnValuesArray;
                Rows.Add(rowEngineerVisitUnitsUsed_Get_For_EngineerVisitIDRow);
                return rowEngineerVisitUnitsUsed_Get_For_EngineerVisitIDRow;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public EngineerVisitUnitsUsed_Get_For_EngineerVisitIDRow FindByJobItemID(int JobItemID)
            {
                return (EngineerVisitUnitsUsed_Get_For_EngineerVisitIDRow)Rows.Find(new object[] { JobItemID });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public override DataTable Clone()
            {
                EngineerVisitUnitsUsed_Get_For_EngineerVisitIDDataTable cln = (EngineerVisitUnitsUsed_Get_For_EngineerVisitIDDataTable)base.Clone();
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new EngineerVisitUnitsUsed_Get_For_EngineerVisitIDDataTable();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal void InitVars()
            {
                columnJobItemID = Columns["JobItemID"];
                columnSummary = Columns["Summary"];
                columnNumAllocated = Columns["NumAllocated"];
                columnNumUnitsUsed = Columns["NumUnitsUsed"];
                columnPrice = Columns["Price"];
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            private void InitClass()
            {
                columnJobItemID = new DataColumn("JobItemID", typeof(int), null, MappingType.Element);
                Columns.Add(columnJobItemID);
                columnSummary = new DataColumn("Summary", typeof(string), null, MappingType.Element);
                Columns.Add(columnSummary);
                columnNumAllocated = new DataColumn("NumAllocated", typeof(decimal), null, MappingType.Element);
                Columns.Add(columnNumAllocated);
                columnNumUnitsUsed = new DataColumn("NumUnitsUsed", typeof(decimal), null, MappingType.Element);
                Columns.Add(columnNumUnitsUsed);
                columnPrice = new DataColumn("Price", typeof(decimal), null, MappingType.Element);
                Columns.Add(columnPrice);
                Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { columnJobItemID }, true));
                columnJobItemID.AutoIncrement = true;
                columnJobItemID.AllowDBNull = false;
                columnJobItemID.ReadOnly = true;
                columnJobItemID.Unique = true;
                columnSummary.AllowDBNull = false;
                columnSummary.MaxLength = 4000;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public EngineerVisitUnitsUsed_Get_For_EngineerVisitIDRow NewEngineerVisitUnitsUsed_Get_For_EngineerVisitIDRow()
            {
                return (EngineerVisitUnitsUsed_Get_For_EngineerVisitIDRow)NewRow();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new EngineerVisitUnitsUsed_Get_For_EngineerVisitIDRow(builder);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(EngineerVisitUnitsUsed_Get_For_EngineerVisitIDRow);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (EngineerVisitUnitsUsed_Get_For_EngineerVisitIDRowChanged is object)
                {
                    EngineerVisitUnitsUsed_Get_For_EngineerVisitIDRowChanged?.Invoke(this, new EngineerVisitUnitsUsed_Get_For_EngineerVisitIDRowChangeEvent((EngineerVisitUnitsUsed_Get_For_EngineerVisitIDRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (EngineerVisitUnitsUsed_Get_For_EngineerVisitIDRowChanging is object)
                {
                    EngineerVisitUnitsUsed_Get_For_EngineerVisitIDRowChanging?.Invoke(this, new EngineerVisitUnitsUsed_Get_For_EngineerVisitIDRowChangeEvent((EngineerVisitUnitsUsed_Get_For_EngineerVisitIDRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (EngineerVisitUnitsUsed_Get_For_EngineerVisitIDRowDeleted is object)
                {
                    EngineerVisitUnitsUsed_Get_For_EngineerVisitIDRowDeleted?.Invoke(this, new EngineerVisitUnitsUsed_Get_For_EngineerVisitIDRowChangeEvent((EngineerVisitUnitsUsed_Get_For_EngineerVisitIDRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (EngineerVisitUnitsUsed_Get_For_EngineerVisitIDRowDeleting is object)
                {
                    EngineerVisitUnitsUsed_Get_For_EngineerVisitIDRowDeleting?.Invoke(this, new EngineerVisitUnitsUsed_Get_For_EngineerVisitIDRowChangeEvent((EngineerVisitUnitsUsed_Get_For_EngineerVisitIDRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void RemoveEngineerVisitUnitsUsed_Get_For_EngineerVisitIDRow(EngineerVisitUnitsUsed_Get_For_EngineerVisitIDRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
            {
                var type = new System.Xml.Schema.XmlSchemaComplexType();
                var sequence = new System.Xml.Schema.XmlSchemaSequence();
                var ds = new FSMDataSet();
                var any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                var any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                var attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                var attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EngineerVisitUnitsUsed_Get_For_EngineerVisitIDDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                var dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    var s1 = new System.IO.MemoryStream();
                    var s2 = new System.IO.MemoryStream();
                    try
                    {
                        System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        var schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                        while (schemas.MoveNext())
                        {
                            schema = (System.Xml.Schema.XmlSchema)schemas.Current;
                            s2.SetLength(0);
                            schema.Write(s2);
                            if (s1.Length == s2.Length)
                            {
                                s1.Position = 0;
                                s2.Position = 0;
                                while (s1.Position != s1.Length && s1.ReadByte() == s2.ReadByte())
                                {
                                }

                                if (s1.Position == s1.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (s1 is object)
                        {
                            s1.Close();
                        }

                        if (s2 is object)
                        {
                            s2.Close();
                        }
                    }
                }

                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
    /// Represents the strongly named DataTable class.
    /// </summary>
        [Serializable()]
        [System.Xml.Serialization.XmlSchemaProvider("GetTypedTableSchema")]
        public partial class InvoiceAddress_Get_EngineerVisitIDDataTable : TypedTableBase<InvoiceAddress_Get_EngineerVisitIDRow>
        {
            private DataColumn columnAddressTypeID;
            private DataColumn columnAddressType;
            private DataColumn columnAddressID;
            private DataColumn columnAddress1;
            private DataColumn columnAddress2;
            private DataColumn columnAddress3;
            private DataColumn columnAddress4;
            private DataColumn columnAddress5;
            private DataColumn columnPostcode;
            private DataColumn columnTelephoneNum;
            private DataColumn columnFaxNum;
            private DataColumn columnEmailAddress;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public InvoiceAddress_Get_EngineerVisitIDDataTable() : base()
            {
                TableName = "InvoiceAddress_Get_EngineerVisitID";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal InvoiceAddress_Get_EngineerVisitIDDataTable(DataTable table) : base()
            {
                TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    CaseSensitive = table.CaseSensitive;
                }

                if ((table.Locale.ToString() ?? "") != (table.DataSet.Locale.ToString() ?? ""))
                {
                    Locale = table.Locale;
                }

                if ((table.Namespace ?? "") != (table.DataSet.Namespace ?? ""))
                {
                    Namespace = table.Namespace;
                }

                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected InvoiceAddress_Get_EngineerVisitIDDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn AddressTypeIDColumn
            {
                get
                {
                    return columnAddressTypeID;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn AddressTypeColumn
            {
                get
                {
                    return columnAddressType;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn AddressIDColumn
            {
                get
                {
                    return columnAddressID;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn Address1Column
            {
                get
                {
                    return columnAddress1;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn Address2Column
            {
                get
                {
                    return columnAddress2;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn Address3Column
            {
                get
                {
                    return columnAddress3;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn Address4Column
            {
                get
                {
                    return columnAddress4;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn Address5Column
            {
                get
                {
                    return columnAddress5;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn PostcodeColumn
            {
                get
                {
                    return columnPostcode;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn TelephoneNumColumn
            {
                get
                {
                    return columnTelephoneNum;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn FaxNumColumn
            {
                get
                {
                    return columnFaxNum;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn EmailAddressColumn
            {
                get
                {
                    return columnEmailAddress;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return Rows.Count;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public InvoiceAddress_Get_EngineerVisitIDRow this[int index]
            {
                get
                {
                    return (InvoiceAddress_Get_EngineerVisitIDRow)Rows[index];
                }
            }

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event InvoiceAddress_Get_EngineerVisitIDRowChangeEventHandler InvoiceAddress_Get_EngineerVisitIDRowChanging;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event InvoiceAddress_Get_EngineerVisitIDRowChangeEventHandler InvoiceAddress_Get_EngineerVisitIDRowChanged;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event InvoiceAddress_Get_EngineerVisitIDRowChangeEventHandler InvoiceAddress_Get_EngineerVisitIDRowDeleting;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event InvoiceAddress_Get_EngineerVisitIDRowChangeEventHandler InvoiceAddress_Get_EngineerVisitIDRowDeleted;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void AddInvoiceAddress_Get_EngineerVisitIDRow(InvoiceAddress_Get_EngineerVisitIDRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public InvoiceAddress_Get_EngineerVisitIDRow AddInvoiceAddress_Get_EngineerVisitIDRow(int AddressTypeID, string AddressType, string Address1, string Address2, string Address3, string Address4, string Address5, string Postcode, string TelephoneNum, string FaxNum, string EmailAddress)
            {
                InvoiceAddress_Get_EngineerVisitIDRow rowInvoiceAddress_Get_EngineerVisitIDRow = (InvoiceAddress_Get_EngineerVisitIDRow)NewRow();
                var columnValuesArray = new object[] { AddressTypeID, AddressType, null, Address1, Address2, Address3, Address4, Address5, Postcode, TelephoneNum, FaxNum, EmailAddress };
                rowInvoiceAddress_Get_EngineerVisitIDRow.ItemArray = columnValuesArray;
                Rows.Add(rowInvoiceAddress_Get_EngineerVisitIDRow);
                return rowInvoiceAddress_Get_EngineerVisitIDRow;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public override DataTable Clone()
            {
                InvoiceAddress_Get_EngineerVisitIDDataTable cln = (InvoiceAddress_Get_EngineerVisitIDDataTable)base.Clone();
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new InvoiceAddress_Get_EngineerVisitIDDataTable();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal void InitVars()
            {
                columnAddressTypeID = Columns["AddressTypeID"];
                columnAddressType = Columns["AddressType"];
                columnAddressID = Columns["AddressID"];
                columnAddress1 = Columns["Address1"];
                columnAddress2 = Columns["Address2"];
                columnAddress3 = Columns["Address3"];
                columnAddress4 = Columns["Address4"];
                columnAddress5 = Columns["Address5"];
                columnPostcode = Columns["Postcode"];
                columnTelephoneNum = Columns["TelephoneNum"];
                columnFaxNum = Columns["FaxNum"];
                columnEmailAddress = Columns["EmailAddress"];
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            private void InitClass()
            {
                columnAddressTypeID = new DataColumn("AddressTypeID", typeof(int), null, MappingType.Element);
                Columns.Add(columnAddressTypeID);
                columnAddressType = new DataColumn("AddressType", typeof(string), null, MappingType.Element);
                Columns.Add(columnAddressType);
                columnAddressID = new DataColumn("AddressID", typeof(int), null, MappingType.Element);
                Columns.Add(columnAddressID);
                columnAddress1 = new DataColumn("Address1", typeof(string), null, MappingType.Element);
                Columns.Add(columnAddress1);
                columnAddress2 = new DataColumn("Address2", typeof(string), null, MappingType.Element);
                Columns.Add(columnAddress2);
                columnAddress3 = new DataColumn("Address3", typeof(string), null, MappingType.Element);
                Columns.Add(columnAddress3);
                columnAddress4 = new DataColumn("Address4", typeof(string), null, MappingType.Element);
                Columns.Add(columnAddress4);
                columnAddress5 = new DataColumn("Address5", typeof(string), null, MappingType.Element);
                Columns.Add(columnAddress5);
                columnPostcode = new DataColumn("Postcode", typeof(string), null, MappingType.Element);
                Columns.Add(columnPostcode);
                columnTelephoneNum = new DataColumn("TelephoneNum", typeof(string), null, MappingType.Element);
                Columns.Add(columnTelephoneNum);
                columnFaxNum = new DataColumn("FaxNum", typeof(string), null, MappingType.Element);
                Columns.Add(columnFaxNum);
                columnEmailAddress = new DataColumn("EmailAddress", typeof(string), null, MappingType.Element);
                Columns.Add(columnEmailAddress);
                columnAddressTypeID.ReadOnly = true;
                columnAddressType.ReadOnly = true;
                columnAddressType.MaxLength = 11;
                columnAddressID.AutoIncrement = true;
                columnAddressID.AllowDBNull = false;
                columnAddressID.ReadOnly = true;
                columnAddress1.MaxLength = 255;
                columnAddress2.MaxLength = 255;
                columnAddress3.MaxLength = 255;
                columnAddress4.MaxLength = 255;
                columnAddress5.MaxLength = 255;
                columnPostcode.ReadOnly = true;
                columnPostcode.MaxLength = 255;
                columnTelephoneNum.ReadOnly = true;
                columnTelephoneNum.MaxLength = 255;
                columnFaxNum.ReadOnly = true;
                columnFaxNum.MaxLength = 255;
                columnEmailAddress.ReadOnly = true;
                columnEmailAddress.MaxLength = 255;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public InvoiceAddress_Get_EngineerVisitIDRow NewInvoiceAddress_Get_EngineerVisitIDRow()
            {
                return (InvoiceAddress_Get_EngineerVisitIDRow)NewRow();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new InvoiceAddress_Get_EngineerVisitIDRow(builder);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(InvoiceAddress_Get_EngineerVisitIDRow);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (InvoiceAddress_Get_EngineerVisitIDRowChanged is object)
                {
                    InvoiceAddress_Get_EngineerVisitIDRowChanged?.Invoke(this, new InvoiceAddress_Get_EngineerVisitIDRowChangeEvent((InvoiceAddress_Get_EngineerVisitIDRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (InvoiceAddress_Get_EngineerVisitIDRowChanging is object)
                {
                    InvoiceAddress_Get_EngineerVisitIDRowChanging?.Invoke(this, new InvoiceAddress_Get_EngineerVisitIDRowChangeEvent((InvoiceAddress_Get_EngineerVisitIDRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (InvoiceAddress_Get_EngineerVisitIDRowDeleted is object)
                {
                    InvoiceAddress_Get_EngineerVisitIDRowDeleted?.Invoke(this, new InvoiceAddress_Get_EngineerVisitIDRowChangeEvent((InvoiceAddress_Get_EngineerVisitIDRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (InvoiceAddress_Get_EngineerVisitIDRowDeleting is object)
                {
                    InvoiceAddress_Get_EngineerVisitIDRowDeleting?.Invoke(this, new InvoiceAddress_Get_EngineerVisitIDRowChangeEvent((InvoiceAddress_Get_EngineerVisitIDRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void RemoveInvoiceAddress_Get_EngineerVisitIDRow(InvoiceAddress_Get_EngineerVisitIDRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
            {
                var type = new System.Xml.Schema.XmlSchemaComplexType();
                var sequence = new System.Xml.Schema.XmlSchemaSequence();
                var ds = new FSMDataSet();
                var any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                var any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                var attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                var attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "InvoiceAddress_Get_EngineerVisitIDDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                var dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    var s1 = new System.IO.MemoryStream();
                    var s2 = new System.IO.MemoryStream();
                    try
                    {
                        System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        var schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                        while (schemas.MoveNext())
                        {
                            schema = (System.Xml.Schema.XmlSchema)schemas.Current;
                            s2.SetLength(0);
                            schema.Write(s2);
                            if (s1.Length == s2.Length)
                            {
                                s1.Position = 0;
                                s2.Position = 0;
                                while (s1.Position != s1.Length && s1.ReadByte() == s2.ReadByte())
                                {
                                }

                                if (s1.Position == s1.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (s1 is object)
                        {
                            s1.Close();
                        }

                        if (s2 is object)
                        {
                            s2.Close();
                        }
                    }
                }

                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
    /// Represents the strongly named DataTable class.
    /// </summary>
        [Serializable()]
        [System.Xml.Serialization.XmlSchemaProvider("GetTypedTableSchema")]
        public partial class Job_Get_For_An_EngineerVisit_IDDataTable : TypedTableBase<Job_Get_For_An_EngineerVisit_IDRow>
        {
            private DataColumn columnJobID;
            private DataColumn columnSiteID;
            private DataColumn columnJobDefinitionEnumID;
            private DataColumn columnJobTypeID;
            private DataColumn columnStatusEnumID;
            private DataColumn columnDateCreated;
            private DataColumn columnCreatedByUserID;
            private DataColumn columnJobNumber;
            private DataColumn columnPONumber;
            private DataColumn columnQuoteID;
            private DataColumn columnContractID;
            private DataColumn columnToBePartPaid;
            private DataColumn columnRetention;
            private DataColumn columnDeleted;
            private DataColumn columnCollectPayment;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public Job_Get_For_An_EngineerVisit_IDDataTable() : base()
            {
                TableName = "Job_Get_For_An_EngineerVisit_ID";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal Job_Get_For_An_EngineerVisit_IDDataTable(DataTable table) : base()
            {
                TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    CaseSensitive = table.CaseSensitive;
                }

                if ((table.Locale.ToString() ?? "") != (table.DataSet.Locale.ToString() ?? ""))
                {
                    Locale = table.Locale;
                }

                if ((table.Namespace ?? "") != (table.DataSet.Namespace ?? ""))
                {
                    Namespace = table.Namespace;
                }

                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected Job_Get_For_An_EngineerVisit_IDDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn JobIDColumn
            {
                get
                {
                    return columnJobID;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn SiteIDColumn
            {
                get
                {
                    return columnSiteID;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn JobDefinitionEnumIDColumn
            {
                get
                {
                    return columnJobDefinitionEnumID;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn JobTypeIDColumn
            {
                get
                {
                    return columnJobTypeID;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn StatusEnumIDColumn
            {
                get
                {
                    return columnStatusEnumID;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn DateCreatedColumn
            {
                get
                {
                    return columnDateCreated;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn CreatedByUserIDColumn
            {
                get
                {
                    return columnCreatedByUserID;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn JobNumberColumn
            {
                get
                {
                    return columnJobNumber;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn PONumberColumn
            {
                get
                {
                    return columnPONumber;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn QuoteIDColumn
            {
                get
                {
                    return columnQuoteID;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn ContractIDColumn
            {
                get
                {
                    return columnContractID;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn ToBePartPaidColumn
            {
                get
                {
                    return columnToBePartPaid;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn RetentionColumn
            {
                get
                {
                    return columnRetention;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn DeletedColumn
            {
                get
                {
                    return columnDeleted;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn CollectPaymentColumn
            {
                get
                {
                    return columnCollectPayment;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return Rows.Count;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public Job_Get_For_An_EngineerVisit_IDRow this[int index]
            {
                get
                {
                    return (Job_Get_For_An_EngineerVisit_IDRow)Rows[index];
                }
            }

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event Job_Get_For_An_EngineerVisit_IDRowChangeEventHandler Job_Get_For_An_EngineerVisit_IDRowChanging;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event Job_Get_For_An_EngineerVisit_IDRowChangeEventHandler Job_Get_For_An_EngineerVisit_IDRowChanged;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event Job_Get_For_An_EngineerVisit_IDRowChangeEventHandler Job_Get_For_An_EngineerVisit_IDRowDeleting;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event Job_Get_For_An_EngineerVisit_IDRowChangeEventHandler Job_Get_For_An_EngineerVisit_IDRowDeleted;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void AddJob_Get_For_An_EngineerVisit_IDRow(Job_Get_For_An_EngineerVisit_IDRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public Job_Get_For_An_EngineerVisit_IDRow AddJob_Get_For_An_EngineerVisit_IDRow(int SiteID, int JobDefinitionEnumID, int JobTypeID, int StatusEnumID, DateTime DateCreated, int CreatedByUserID, string JobNumber, string PONumber, int QuoteID, int ContractID, bool ToBePartPaid, decimal Retention, bool Deleted, bool CollectPayment)
            {
                Job_Get_For_An_EngineerVisit_IDRow rowJob_Get_For_An_EngineerVisit_IDRow = (Job_Get_For_An_EngineerVisit_IDRow)NewRow();
                var columnValuesArray = new object[] { null, SiteID, JobDefinitionEnumID, JobTypeID, StatusEnumID, DateCreated, CreatedByUserID, JobNumber, PONumber, QuoteID, ContractID, ToBePartPaid, Retention, Deleted, CollectPayment };
                rowJob_Get_For_An_EngineerVisit_IDRow.ItemArray = columnValuesArray;
                Rows.Add(rowJob_Get_For_An_EngineerVisit_IDRow);
                return rowJob_Get_For_An_EngineerVisit_IDRow;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public Job_Get_For_An_EngineerVisit_IDRow FindByJobID(int JobID)
            {
                return (Job_Get_For_An_EngineerVisit_IDRow)Rows.Find(new object[] { JobID });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public override DataTable Clone()
            {
                Job_Get_For_An_EngineerVisit_IDDataTable cln = (Job_Get_For_An_EngineerVisit_IDDataTable)base.Clone();
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new Job_Get_For_An_EngineerVisit_IDDataTable();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal void InitVars()
            {
                columnJobID = Columns["JobID"];
                columnSiteID = Columns["SiteID"];
                columnJobDefinitionEnumID = Columns["JobDefinitionEnumID"];
                columnJobTypeID = Columns["JobTypeID"];
                columnStatusEnumID = Columns["StatusEnumID"];
                columnDateCreated = Columns["DateCreated"];
                columnCreatedByUserID = Columns["CreatedByUserID"];
                columnJobNumber = Columns["JobNumber"];
                columnPONumber = Columns["PONumber"];
                columnQuoteID = Columns["QuoteID"];
                columnContractID = Columns["ContractID"];
                columnToBePartPaid = Columns["ToBePartPaid"];
                columnRetention = Columns["Retention"];
                columnDeleted = Columns["Deleted"];
                columnCollectPayment = Columns["CollectPayment"];
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            private void InitClass()
            {
                columnJobID = new DataColumn("JobID", typeof(int), null, MappingType.Element);
                Columns.Add(columnJobID);
                columnSiteID = new DataColumn("SiteID", typeof(int), null, MappingType.Element);
                Columns.Add(columnSiteID);
                columnJobDefinitionEnumID = new DataColumn("JobDefinitionEnumID", typeof(int), null, MappingType.Element);
                Columns.Add(columnJobDefinitionEnumID);
                columnJobTypeID = new DataColumn("JobTypeID", typeof(int), null, MappingType.Element);
                Columns.Add(columnJobTypeID);
                columnStatusEnumID = new DataColumn("StatusEnumID", typeof(int), null, MappingType.Element);
                Columns.Add(columnStatusEnumID);
                columnDateCreated = new DataColumn("DateCreated", typeof(DateTime), null, MappingType.Element);
                Columns.Add(columnDateCreated);
                columnCreatedByUserID = new DataColumn("CreatedByUserID", typeof(int), null, MappingType.Element);
                Columns.Add(columnCreatedByUserID);
                columnJobNumber = new DataColumn("JobNumber", typeof(string), null, MappingType.Element);
                Columns.Add(columnJobNumber);
                columnPONumber = new DataColumn("PONumber", typeof(string), null, MappingType.Element);
                Columns.Add(columnPONumber);
                columnQuoteID = new DataColumn("QuoteID", typeof(int), null, MappingType.Element);
                Columns.Add(columnQuoteID);
                columnContractID = new DataColumn("ContractID", typeof(int), null, MappingType.Element);
                Columns.Add(columnContractID);
                columnToBePartPaid = new DataColumn("ToBePartPaid", typeof(bool), null, MappingType.Element);
                Columns.Add(columnToBePartPaid);
                columnRetention = new DataColumn("Retention", typeof(decimal), null, MappingType.Element);
                Columns.Add(columnRetention);
                columnDeleted = new DataColumn("Deleted", typeof(bool), null, MappingType.Element);
                Columns.Add(columnDeleted);
                columnCollectPayment = new DataColumn("CollectPayment", typeof(bool), null, MappingType.Element);
                Columns.Add(columnCollectPayment);
                Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { columnJobID }, true));
                columnJobID.AutoIncrement = true;
                columnJobID.AllowDBNull = false;
                columnJobID.ReadOnly = true;
                columnJobID.Unique = true;
                columnSiteID.AllowDBNull = false;
                columnJobDefinitionEnumID.AllowDBNull = false;
                columnJobTypeID.AllowDBNull = false;
                columnStatusEnumID.AllowDBNull = false;
                columnDateCreated.AllowDBNull = false;
                columnCreatedByUserID.AllowDBNull = false;
                columnJobNumber.AllowDBNull = false;
                columnJobNumber.MaxLength = 20;
                columnPONumber.MaxLength = 20;
                columnQuoteID.AllowDBNull = false;
                columnContractID.AllowDBNull = false;
                columnToBePartPaid.AllowDBNull = false;
                columnRetention.AllowDBNull = false;
                columnDeleted.AllowDBNull = false;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public Job_Get_For_An_EngineerVisit_IDRow NewJob_Get_For_An_EngineerVisit_IDRow()
            {
                return (Job_Get_For_An_EngineerVisit_IDRow)NewRow();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new Job_Get_For_An_EngineerVisit_IDRow(builder);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(Job_Get_For_An_EngineerVisit_IDRow);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (Job_Get_For_An_EngineerVisit_IDRowChanged is object)
                {
                    Job_Get_For_An_EngineerVisit_IDRowChanged?.Invoke(this, new Job_Get_For_An_EngineerVisit_IDRowChangeEvent((Job_Get_For_An_EngineerVisit_IDRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (Job_Get_For_An_EngineerVisit_IDRowChanging is object)
                {
                    Job_Get_For_An_EngineerVisit_IDRowChanging?.Invoke(this, new Job_Get_For_An_EngineerVisit_IDRowChangeEvent((Job_Get_For_An_EngineerVisit_IDRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (Job_Get_For_An_EngineerVisit_IDRowDeleted is object)
                {
                    Job_Get_For_An_EngineerVisit_IDRowDeleted?.Invoke(this, new Job_Get_For_An_EngineerVisit_IDRowChangeEvent((Job_Get_For_An_EngineerVisit_IDRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (Job_Get_For_An_EngineerVisit_IDRowDeleting is object)
                {
                    Job_Get_For_An_EngineerVisit_IDRowDeleting?.Invoke(this, new Job_Get_For_An_EngineerVisit_IDRowChangeEvent((Job_Get_For_An_EngineerVisit_IDRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void RemoveJob_Get_For_An_EngineerVisit_IDRow(Job_Get_For_An_EngineerVisit_IDRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
            {
                var type = new System.Xml.Schema.XmlSchemaComplexType();
                var sequence = new System.Xml.Schema.XmlSchemaSequence();
                var ds = new FSMDataSet();
                var any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                var any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                var attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                var attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Job_Get_For_An_EngineerVisit_IDDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                var dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    var s1 = new System.IO.MemoryStream();
                    var s2 = new System.IO.MemoryStream();
                    try
                    {
                        System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        var schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                        while (schemas.MoveNext())
                        {
                            schema = (System.Xml.Schema.XmlSchema)schemas.Current;
                            s2.SetLength(0);
                            schema.Write(s2);
                            if (s1.Length == s2.Length)
                            {
                                s1.Position = 0;
                                s2.Position = 0;
                                while (s1.Position != s1.Length && s1.ReadByte() == s2.ReadByte())
                                {
                                }

                                if (s1.Position == s1.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (s1 is object)
                        {
                            s1.Close();
                        }

                        if (s2 is object)
                        {
                            s2.Close();
                        }
                    }
                }

                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
    /// Represents the strongly named DataTable class.
    /// </summary>
        [Serializable()]
        [System.Xml.Serialization.XmlSchemaProvider("GetTypedTableSchema")]
        public partial class JobItems_Get_For_JobDataTable : TypedTableBase<JobItems_Get_For_JobRow>
        {
            private DataColumn columnSummary;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public JobItems_Get_For_JobDataTable() : base()
            {
                TableName = "JobItems_Get_For_Job";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal JobItems_Get_For_JobDataTable(DataTable table) : base()
            {
                TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    CaseSensitive = table.CaseSensitive;
                }

                if ((table.Locale.ToString() ?? "") != (table.DataSet.Locale.ToString() ?? ""))
                {
                    Locale = table.Locale;
                }

                if ((table.Namespace ?? "") != (table.DataSet.Namespace ?? ""))
                {
                    Namespace = table.Namespace;
                }

                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected JobItems_Get_For_JobDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn SummaryColumn
            {
                get
                {
                    return columnSummary;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return Rows.Count;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public JobItems_Get_For_JobRow this[int index]
            {
                get
                {
                    return (JobItems_Get_For_JobRow)Rows[index];
                }
            }

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event JobItems_Get_For_JobRowChangeEventHandler JobItems_Get_For_JobRowChanging;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event JobItems_Get_For_JobRowChangeEventHandler JobItems_Get_For_JobRowChanged;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event JobItems_Get_For_JobRowChangeEventHandler JobItems_Get_For_JobRowDeleting;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event JobItems_Get_For_JobRowChangeEventHandler JobItems_Get_For_JobRowDeleted;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void AddJobItems_Get_For_JobRow(JobItems_Get_For_JobRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public JobItems_Get_For_JobRow AddJobItems_Get_For_JobRow(string Summary)
            {
                JobItems_Get_For_JobRow rowJobItems_Get_For_JobRow = (JobItems_Get_For_JobRow)NewRow();
                var columnValuesArray = new object[] { Summary };
                rowJobItems_Get_For_JobRow.ItemArray = columnValuesArray;
                Rows.Add(rowJobItems_Get_For_JobRow);
                return rowJobItems_Get_For_JobRow;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public override DataTable Clone()
            {
                JobItems_Get_For_JobDataTable cln = (JobItems_Get_For_JobDataTable)base.Clone();
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new JobItems_Get_For_JobDataTable();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal void InitVars()
            {
                columnSummary = Columns["Summary"];
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            private void InitClass()
            {
                columnSummary = new DataColumn("Summary", typeof(string), null, MappingType.Element);
                Columns.Add(columnSummary);
                columnSummary.AllowDBNull = false;
                columnSummary.MaxLength = 4000;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public JobItems_Get_For_JobRow NewJobItems_Get_For_JobRow()
            {
                return (JobItems_Get_For_JobRow)NewRow();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new JobItems_Get_For_JobRow(builder);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(JobItems_Get_For_JobRow);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (JobItems_Get_For_JobRowChanged is object)
                {
                    JobItems_Get_For_JobRowChanged?.Invoke(this, new JobItems_Get_For_JobRowChangeEvent((JobItems_Get_For_JobRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (JobItems_Get_For_JobRowChanging is object)
                {
                    JobItems_Get_For_JobRowChanging?.Invoke(this, new JobItems_Get_For_JobRowChangeEvent((JobItems_Get_For_JobRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (JobItems_Get_For_JobRowDeleted is object)
                {
                    JobItems_Get_For_JobRowDeleted?.Invoke(this, new JobItems_Get_For_JobRowChangeEvent((JobItems_Get_For_JobRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (JobItems_Get_For_JobRowDeleting is object)
                {
                    JobItems_Get_For_JobRowDeleting?.Invoke(this, new JobItems_Get_For_JobRowChangeEvent((JobItems_Get_For_JobRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void RemoveJobItems_Get_For_JobRow(JobItems_Get_For_JobRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
            {
                var type = new System.Xml.Schema.XmlSchemaComplexType();
                var sequence = new System.Xml.Schema.XmlSchemaSequence();
                var ds = new FSMDataSet();
                var any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                var any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                var attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                var attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "JobItems_Get_For_JobDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                var dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    var s1 = new System.IO.MemoryStream();
                    var s2 = new System.IO.MemoryStream();
                    try
                    {
                        System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        var schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                        while (schemas.MoveNext())
                        {
                            schema = (System.Xml.Schema.XmlSchema)schemas.Current;
                            s2.SetLength(0);
                            schema.Write(s2);
                            if (s1.Length == s2.Length)
                            {
                                s1.Position = 0;
                                s2.Position = 0;
                                while (s1.Position != s1.Length && s1.ReadByte() == s2.ReadByte())
                                {
                                }

                                if (s1.Position == s1.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (s1 is object)
                        {
                            s1.Close();
                        }

                        if (s2 is object)
                        {
                            s2.Close();
                        }
                    }
                }

                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
    /// Represents the strongly named DataTable class.
    /// </summary>
        [Serializable()]
        [System.Xml.Serialization.XmlSchemaProvider("GetTypedTableSchema")]
        public partial class Site_Get_ForEngineerVisitIDDataTable : TypedTableBase<Site_Get_ForEngineerVisitIDRow>
        {
            private DataColumn columnSiteID;
            private DataColumn columnName;
            private DataColumn columnCustomerID;
            private DataColumn columnRegionID;
            private DataColumn columnHeadOffice;
            private DataColumn columnHeadOfficeResult;
            private DataColumn columnNotes;
            private DataColumn columnAddress1;
            private DataColumn columnAddress2;
            private DataColumn columnAddress3;
            private DataColumn columnAddress4;
            private DataColumn columnAddress5;
            private DataColumn columnPostcode;
            private DataColumn columnTelephoneNum;
            private DataColumn columnFaxNum;
            private DataColumn columnEmailAddress;
            private DataColumn columnEngineerID;
            private DataColumn columnPoNumReqd;
            private DataColumn columnAcceptChargesChanges;
            private DataColumn columnDeleted;
            private DataColumn columnSourceOfCustomer;
            private DataColumn columnPolicyNumber;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public Site_Get_ForEngineerVisitIDDataTable() : base()
            {
                TableName = "Site_Get_ForEngineerVisitID";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal Site_Get_ForEngineerVisitIDDataTable(DataTable table) : base()
            {
                TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    CaseSensitive = table.CaseSensitive;
                }

                if ((table.Locale.ToString() ?? "") != (table.DataSet.Locale.ToString() ?? ""))
                {
                    Locale = table.Locale;
                }

                if ((table.Namespace ?? "") != (table.DataSet.Namespace ?? ""))
                {
                    Namespace = table.Namespace;
                }

                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected Site_Get_ForEngineerVisitIDDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn SiteIDColumn
            {
                get
                {
                    return columnSiteID;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn NameColumn
            {
                get
                {
                    return columnName;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn CustomerIDColumn
            {
                get
                {
                    return columnCustomerID;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn RegionIDColumn
            {
                get
                {
                    return columnRegionID;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn HeadOfficeColumn
            {
                get
                {
                    return columnHeadOffice;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn HeadOfficeResultColumn
            {
                get
                {
                    return columnHeadOfficeResult;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn NotesColumn
            {
                get
                {
                    return columnNotes;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn Address1Column
            {
                get
                {
                    return columnAddress1;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn Address2Column
            {
                get
                {
                    return columnAddress2;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn Address3Column
            {
                get
                {
                    return columnAddress3;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn Address4Column
            {
                get
                {
                    return columnAddress4;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn Address5Column
            {
                get
                {
                    return columnAddress5;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn PostcodeColumn
            {
                get
                {
                    return columnPostcode;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn TelephoneNumColumn
            {
                get
                {
                    return columnTelephoneNum;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn FaxNumColumn
            {
                get
                {
                    return columnFaxNum;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn EmailAddressColumn
            {
                get
                {
                    return columnEmailAddress;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn EngineerIDColumn
            {
                get
                {
                    return columnEngineerID;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn PoNumReqdColumn
            {
                get
                {
                    return columnPoNumReqd;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn AcceptChargesChangesColumn
            {
                get
                {
                    return columnAcceptChargesChanges;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn DeletedColumn
            {
                get
                {
                    return columnDeleted;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn SourceOfCustomerColumn
            {
                get
                {
                    return columnSourceOfCustomer;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn PolicyNumberColumn
            {
                get
                {
                    return columnPolicyNumber;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return Rows.Count;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public Site_Get_ForEngineerVisitIDRow this[int index]
            {
                get
                {
                    return (Site_Get_ForEngineerVisitIDRow)Rows[index];
                }
            }

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event Site_Get_ForEngineerVisitIDRowChangeEventHandler Site_Get_ForEngineerVisitIDRowChanging;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event Site_Get_ForEngineerVisitIDRowChangeEventHandler Site_Get_ForEngineerVisitIDRowChanged;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event Site_Get_ForEngineerVisitIDRowChangeEventHandler Site_Get_ForEngineerVisitIDRowDeleting;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event Site_Get_ForEngineerVisitIDRowChangeEventHandler Site_Get_ForEngineerVisitIDRowDeleted;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void AddSite_Get_ForEngineerVisitIDRow(Site_Get_ForEngineerVisitIDRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public Site_Get_ForEngineerVisitIDRow AddSite_Get_ForEngineerVisitIDRow(string Name, int CustomerID, int RegionID, bool HeadOffice, string HeadOfficeResult, string Notes, string Address1, string Address2, string Address3, string Address4, string Address5, string Postcode, string TelephoneNum, string FaxNum, string EmailAddress, int EngineerID, bool PoNumReqd, bool AcceptChargesChanges, bool Deleted, string SourceOfCustomer, string PolicyNumber)




















            {
                Site_Get_ForEngineerVisitIDRow rowSite_Get_ForEngineerVisitIDRow = (Site_Get_ForEngineerVisitIDRow)NewRow();
                var columnValuesArray = new object[] { null, Name, CustomerID, RegionID, HeadOffice, HeadOfficeResult, Notes, Address1, Address2, Address3, Address4, Address5, Postcode, TelephoneNum, FaxNum, EmailAddress, EngineerID, PoNumReqd, AcceptChargesChanges, Deleted, SourceOfCustomer, PolicyNumber };
                rowSite_Get_ForEngineerVisitIDRow.ItemArray = columnValuesArray;
                Rows.Add(rowSite_Get_ForEngineerVisitIDRow);
                return rowSite_Get_ForEngineerVisitIDRow;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public Site_Get_ForEngineerVisitIDRow FindBySiteID(int SiteID)
            {
                return (Site_Get_ForEngineerVisitIDRow)Rows.Find(new object[] { SiteID });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public override DataTable Clone()
            {
                Site_Get_ForEngineerVisitIDDataTable cln = (Site_Get_ForEngineerVisitIDDataTable)base.Clone();
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new Site_Get_ForEngineerVisitIDDataTable();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal void InitVars()
            {
                columnSiteID = Columns["SiteID"];
                columnName = Columns["Name"];
                columnCustomerID = Columns["CustomerID"];
                columnRegionID = Columns["RegionID"];
                columnHeadOffice = Columns["HeadOffice"];
                columnHeadOfficeResult = Columns["HeadOfficeResult"];
                columnNotes = Columns["Notes"];
                columnAddress1 = Columns["Address1"];
                columnAddress2 = Columns["Address2"];
                columnAddress3 = Columns["Address3"];
                columnAddress4 = Columns["Address4"];
                columnAddress5 = Columns["Address5"];
                columnPostcode = Columns["Postcode"];
                columnTelephoneNum = Columns["TelephoneNum"];
                columnFaxNum = Columns["FaxNum"];
                columnEmailAddress = Columns["EmailAddress"];
                columnEngineerID = Columns["EngineerID"];
                columnPoNumReqd = Columns["PoNumReqd"];
                columnAcceptChargesChanges = Columns["AcceptChargesChanges"];
                columnDeleted = Columns["Deleted"];
                columnSourceOfCustomer = Columns["SourceOfCustomer"];
                columnPolicyNumber = Columns["PolicyNumber"];
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            private void InitClass()
            {
                columnSiteID = new DataColumn("SiteID", typeof(int), null, MappingType.Element);
                Columns.Add(columnSiteID);
                columnName = new DataColumn("Name", typeof(string), null, MappingType.Element);
                Columns.Add(columnName);
                columnCustomerID = new DataColumn("CustomerID", typeof(int), null, MappingType.Element);
                Columns.Add(columnCustomerID);
                columnRegionID = new DataColumn("RegionID", typeof(int), null, MappingType.Element);
                Columns.Add(columnRegionID);
                columnHeadOffice = new DataColumn("HeadOffice", typeof(bool), null, MappingType.Element);
                Columns.Add(columnHeadOffice);
                columnHeadOfficeResult = new DataColumn("HeadOfficeResult", typeof(string), null, MappingType.Element);
                Columns.Add(columnHeadOfficeResult);
                columnNotes = new DataColumn("Notes", typeof(string), null, MappingType.Element);
                Columns.Add(columnNotes);
                columnAddress1 = new DataColumn("Address1", typeof(string), null, MappingType.Element);
                Columns.Add(columnAddress1);
                columnAddress2 = new DataColumn("Address2", typeof(string), null, MappingType.Element);
                Columns.Add(columnAddress2);
                columnAddress3 = new DataColumn("Address3", typeof(string), null, MappingType.Element);
                Columns.Add(columnAddress3);
                columnAddress4 = new DataColumn("Address4", typeof(string), null, MappingType.Element);
                Columns.Add(columnAddress4);
                columnAddress5 = new DataColumn("Address5", typeof(string), null, MappingType.Element);
                Columns.Add(columnAddress5);
                columnPostcode = new DataColumn("Postcode", typeof(string), null, MappingType.Element);
                Columns.Add(columnPostcode);
                columnTelephoneNum = new DataColumn("TelephoneNum", typeof(string), null, MappingType.Element);
                Columns.Add(columnTelephoneNum);
                columnFaxNum = new DataColumn("FaxNum", typeof(string), null, MappingType.Element);
                Columns.Add(columnFaxNum);
                columnEmailAddress = new DataColumn("EmailAddress", typeof(string), null, MappingType.Element);
                Columns.Add(columnEmailAddress);
                columnEngineerID = new DataColumn("EngineerID", typeof(int), null, MappingType.Element);
                Columns.Add(columnEngineerID);
                columnPoNumReqd = new DataColumn("PoNumReqd", typeof(bool), null, MappingType.Element);
                Columns.Add(columnPoNumReqd);
                columnAcceptChargesChanges = new DataColumn("AcceptChargesChanges", typeof(bool), null, MappingType.Element);
                Columns.Add(columnAcceptChargesChanges);
                columnDeleted = new DataColumn("Deleted", typeof(bool), null, MappingType.Element);
                Columns.Add(columnDeleted);
                columnSourceOfCustomer = new DataColumn("SourceOfCustomer", typeof(string), null, MappingType.Element);
                Columns.Add(columnSourceOfCustomer);
                columnPolicyNumber = new DataColumn("PolicyNumber", typeof(string), null, MappingType.Element);
                Columns.Add(columnPolicyNumber);
                Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { columnSiteID }, true));
                columnSiteID.AutoIncrement = true;
                columnSiteID.AllowDBNull = false;
                columnSiteID.ReadOnly = true;
                columnSiteID.Unique = true;
                columnName.MaxLength = 255;
                columnCustomerID.AllowDBNull = false;
                columnRegionID.AllowDBNull = false;
                columnHeadOffice.AllowDBNull = false;
                columnHeadOfficeResult.ReadOnly = true;
                columnHeadOfficeResult.MaxLength = 3;
                columnNotes.MaxLength = 4000;
                columnAddress1.MaxLength = 255;
                columnAddress2.MaxLength = 255;
                columnAddress3.MaxLength = 255;
                columnAddress4.MaxLength = 255;
                columnAddress5.MaxLength = 255;
                columnPostcode.MaxLength = 10;
                columnTelephoneNum.MaxLength = 50;
                columnFaxNum.MaxLength = 50;
                columnEmailAddress.MaxLength = 100;
                columnPoNumReqd.AllowDBNull = false;
                columnDeleted.AllowDBNull = false;
                columnSourceOfCustomer.MaxLength = 255;
                columnPolicyNumber.MaxLength = 255;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public Site_Get_ForEngineerVisitIDRow NewSite_Get_ForEngineerVisitIDRow()
            {
                return (Site_Get_ForEngineerVisitIDRow)NewRow();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new Site_Get_ForEngineerVisitIDRow(builder);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(Site_Get_ForEngineerVisitIDRow);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (Site_Get_ForEngineerVisitIDRowChanged is object)
                {
                    Site_Get_ForEngineerVisitIDRowChanged?.Invoke(this, new Site_Get_ForEngineerVisitIDRowChangeEvent((Site_Get_ForEngineerVisitIDRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (Site_Get_ForEngineerVisitIDRowChanging is object)
                {
                    Site_Get_ForEngineerVisitIDRowChanging?.Invoke(this, new Site_Get_ForEngineerVisitIDRowChangeEvent((Site_Get_ForEngineerVisitIDRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (Site_Get_ForEngineerVisitIDRowDeleted is object)
                {
                    Site_Get_ForEngineerVisitIDRowDeleted?.Invoke(this, new Site_Get_ForEngineerVisitIDRowChangeEvent((Site_Get_ForEngineerVisitIDRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (Site_Get_ForEngineerVisitIDRowDeleting is object)
                {
                    Site_Get_ForEngineerVisitIDRowDeleting?.Invoke(this, new Site_Get_ForEngineerVisitIDRowChangeEvent((Site_Get_ForEngineerVisitIDRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void RemoveSite_Get_ForEngineerVisitIDRow(Site_Get_ForEngineerVisitIDRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
            {
                var type = new System.Xml.Schema.XmlSchemaComplexType();
                var sequence = new System.Xml.Schema.XmlSchemaSequence();
                var ds = new FSMDataSet();
                var any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                var any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                var attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                var attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Site_Get_ForEngineerVisitIDDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                var dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    var s1 = new System.IO.MemoryStream();
                    var s2 = new System.IO.MemoryStream();
                    try
                    {
                        System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        var schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                        while (schemas.MoveNext())
                        {
                            schema = (System.Xml.Schema.XmlSchema)schemas.Current;
                            s2.SetLength(0);
                            schema.Write(s2);
                            if (s1.Length == s2.Length)
                            {
                                s1.Position = 0;
                                s2.Position = 0;
                                while (s1.Position != s1.Length && s1.ReadByte() == s2.ReadByte())
                                {
                                }

                                if (s1.Position == s1.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (s1 is object)
                        {
                            s1.Close();
                        }

                        if (s2 is object)
                        {
                            s2.Close();
                        }
                    }
                }

                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
    /// Represents strongly named DataRow class.
    /// </summary>
        public partial class Customer_Get_ForSiteIDRow : DataRow
        {
            private Customer_Get_ForSiteIDDataTable tableCustomer_Get_ForSiteID;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal Customer_Get_ForSiteIDRow(DataRowBuilder rb) : base(rb)
            {
                tableCustomer_Get_ForSiteID = (Customer_Get_ForSiteIDDataTable)Table;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public int CustomerID
            {
                get
                {
                    return Conversions.ToInteger(this[tableCustomer_Get_ForSiteID.CustomerIDColumn]);
                }

                set
                {
                    this[tableCustomer_Get_ForSiteID.CustomerIDColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string Name
            {
                get
                {
                    return Conversions.ToString(this[tableCustomer_Get_ForSiteID.NameColumn]);
                }

                set
                {
                    this[tableCustomer_Get_ForSiteID.NameColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public int CustomerTypeID
            {
                get
                {
                    return Conversions.ToInteger(this[tableCustomer_Get_ForSiteID.CustomerTypeIDColumn]);
                }

                set
                {
                    this[tableCustomer_Get_ForSiteID.CustomerTypeIDColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public int RegionID
            {
                get
                {
                    return Conversions.ToInteger(this[tableCustomer_Get_ForSiteID.RegionIDColumn]);
                }

                set
                {
                    this[tableCustomer_Get_ForSiteID.RegionIDColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string Notes
            {
                get
                {
                    return Conversions.ToString(this[tableCustomer_Get_ForSiteID.NotesColumn]);
                }

                set
                {
                    this[tableCustomer_Get_ForSiteID.NotesColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string AccountNumber
            {
                get
                {
                    return Conversions.ToString(this[tableCustomer_Get_ForSiteID.AccountNumberColumn]);
                }

                set
                {
                    this[tableCustomer_Get_ForSiteID.AccountNumberColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public int Status
            {
                get
                {
                    return Conversions.ToInteger(this[tableCustomer_Get_ForSiteID.StatusColumn]);
                }

                set
                {
                    this[tableCustomer_Get_ForSiteID.StatusColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool AcceptChargesChanges
            {
                get
                {
                    return Conversions.ToBoolean(this[tableCustomer_Get_ForSiteID.AcceptChargesChangesColumn]);
                }

                set
                {
                    this[tableCustomer_Get_ForSiteID.AcceptChargesChangesColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool Deleted
            {
                get
                {
                    return Conversions.ToBoolean(this[tableCustomer_Get_ForSiteID.DeletedColumn]);
                }

                set
                {
                    this[tableCustomer_Get_ForSiteID.DeletedColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public decimal MainContractorDiscount
            {
                get
                {
                    return Conversions.ToDecimal(this[tableCustomer_Get_ForSiteID.MainContractorDiscountColumn]);
                }

                set
                {
                    this[tableCustomer_Get_ForSiteID.MainContractorDiscountColumn] = value;
                }
            }
        }

        /// <summary>
    /// Represents strongly named DataRow class.
    /// </summary>
        public partial class EngineerVisitAssetWorkSheet_GetForVisitRow : DataRow
        {
            private EngineerVisitAssetWorkSheet_GetForVisitDataTable tableEngineerVisitAssetWorkSheet_GetForVisit;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal EngineerVisitAssetWorkSheet_GetForVisitRow(DataRowBuilder rb) : base(rb)
            {
                tableEngineerVisitAssetWorkSheet_GetForVisit = (EngineerVisitAssetWorkSheet_GetForVisitDataTable)Table;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public int EngineerVisitAssetWorkSheetID
            {
                get
                {
                    return Conversions.ToInteger(this[tableEngineerVisitAssetWorkSheet_GetForVisit.EngineerVisitAssetWorkSheetIDColumn]);
                }

                set
                {
                    this[tableEngineerVisitAssetWorkSheet_GetForVisit.EngineerVisitAssetWorkSheetIDColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public int EngineerVisitID
            {
                get
                {
                    return Conversions.ToInteger(this[tableEngineerVisitAssetWorkSheet_GetForVisit.EngineerVisitIDColumn]);
                }

                set
                {
                    this[tableEngineerVisitAssetWorkSheet_GetForVisit.EngineerVisitIDColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public int AssetID
            {
                get
                {
                    return Conversions.ToInteger(this[tableEngineerVisitAssetWorkSheet_GetForVisit.AssetIDColumn]);
                }

                set
                {
                    this[tableEngineerVisitAssetWorkSheet_GetForVisit.AssetIDColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public int FlueTerminationSatisfactoryID
            {
                get
                {
                    return Conversions.ToInteger(this[tableEngineerVisitAssetWorkSheet_GetForVisit.FlueTerminationSatisfactoryIDColumn]);
                }

                set
                {
                    this[tableEngineerVisitAssetWorkSheet_GetForVisit.FlueTerminationSatisfactoryIDColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public int FlueFlowTestID
            {
                get
                {
                    return Conversions.ToInteger(this[tableEngineerVisitAssetWorkSheet_GetForVisit.FlueFlowTestIDColumn]);
                }

                set
                {
                    this[tableEngineerVisitAssetWorkSheet_GetForVisit.FlueFlowTestIDColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public int SpillageTestID
            {
                get
                {
                    return Conversions.ToInteger(this[tableEngineerVisitAssetWorkSheet_GetForVisit.SpillageTestIDColumn]);
                }

                set
                {
                    this[tableEngineerVisitAssetWorkSheet_GetForVisit.SpillageTestIDColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public int VentilationProvisionSatisfactoryID
            {
                get
                {
                    return Conversions.ToInteger(this[tableEngineerVisitAssetWorkSheet_GetForVisit.VentilationProvisionSatisfactoryIDColumn]);
                }

                set
                {
                    this[tableEngineerVisitAssetWorkSheet_GetForVisit.VentilationProvisionSatisfactoryIDColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public int SafetyDeviceOperationID
            {
                get
                {
                    return Conversions.ToInteger(this[tableEngineerVisitAssetWorkSheet_GetForVisit.SafetyDeviceOperationIDColumn]);
                }

                set
                {
                    this[tableEngineerVisitAssetWorkSheet_GetForVisit.SafetyDeviceOperationIDColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public decimal DHWFlowRate
            {
                get
                {
                    return Conversions.ToDecimal(this[tableEngineerVisitAssetWorkSheet_GetForVisit.DHWFlowRateColumn]);
                }

                set
                {
                    this[tableEngineerVisitAssetWorkSheet_GetForVisit.DHWFlowRateColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public decimal ColdWaterTemp
            {
                get
                {
                    return Conversions.ToDecimal(this[tableEngineerVisitAssetWorkSheet_GetForVisit.ColdWaterTempColumn]);
                }

                set
                {
                    this[tableEngineerVisitAssetWorkSheet_GetForVisit.ColdWaterTempColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public decimal DHWTemp
            {
                get
                {
                    return Conversions.ToDecimal(this[tableEngineerVisitAssetWorkSheet_GetForVisit.DHWTempColumn]);
                }

                set
                {
                    this[tableEngineerVisitAssetWorkSheet_GetForVisit.DHWTempColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public decimal InletStaticPressure
            {
                get
                {
                    return Conversions.ToDecimal(this[tableEngineerVisitAssetWorkSheet_GetForVisit.InletStaticPressureColumn]);
                }

                set
                {
                    this[tableEngineerVisitAssetWorkSheet_GetForVisit.InletStaticPressureColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public decimal InletWorkingPressure
            {
                get
                {
                    return Conversions.ToDecimal(this[tableEngineerVisitAssetWorkSheet_GetForVisit.InletWorkingPressureColumn]);
                }

                set
                {
                    this[tableEngineerVisitAssetWorkSheet_GetForVisit.InletWorkingPressureColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public decimal MinBurnerPressure
            {
                get
                {
                    return Conversions.ToDecimal(this[tableEngineerVisitAssetWorkSheet_GetForVisit.MinBurnerPressureColumn]);
                }

                set
                {
                    this[tableEngineerVisitAssetWorkSheet_GetForVisit.MinBurnerPressureColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public decimal MaxBurnerPressure
            {
                get
                {
                    return Conversions.ToDecimal(this[tableEngineerVisitAssetWorkSheet_GetForVisit.MaxBurnerPressureColumn]);
                }

                set
                {
                    this[tableEngineerVisitAssetWorkSheet_GetForVisit.MaxBurnerPressureColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public decimal CO2
            {
                get
                {
                    return Conversions.ToDecimal(this[tableEngineerVisitAssetWorkSheet_GetForVisit.CO2Column]);
                }

                set
                {
                    this[tableEngineerVisitAssetWorkSheet_GetForVisit.CO2Column] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public decimal CO2CORatio
            {
                get
                {
                    return Conversions.ToDecimal(this[tableEngineerVisitAssetWorkSheet_GetForVisit.CO2CORatioColumn]);
                }

                set
                {
                    this[tableEngineerVisitAssetWorkSheet_GetForVisit.CO2CORatioColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public int LandlordsApplianceID
            {
                get
                {
                    return Conversions.ToInteger(this[tableEngineerVisitAssetWorkSheet_GetForVisit.LandlordsApplianceIDColumn]);
                }

                set
                {
                    this[tableEngineerVisitAssetWorkSheet_GetForVisit.LandlordsApplianceIDColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public int ApplianceServiceOrInspectedID
            {
                get
                {
                    return Conversions.ToInteger(this[tableEngineerVisitAssetWorkSheet_GetForVisit.ApplianceServiceOrInspectedIDColumn]);
                }

                set
                {
                    this[tableEngineerVisitAssetWorkSheet_GetForVisit.ApplianceServiceOrInspectedIDColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public int ApplianceSafeID
            {
                get
                {
                    return Conversions.ToInteger(this[tableEngineerVisitAssetWorkSheet_GetForVisit.ApplianceSafeIDColumn]);
                }

                set
                {
                    this[tableEngineerVisitAssetWorkSheet_GetForVisit.ApplianceSafeIDColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public int VisualConditionOfFlueSatisfactoryID
            {
                get
                {
                    return Conversions.ToInteger(this[tableEngineerVisitAssetWorkSheet_GetForVisit.VisualConditionOfFlueSatisfactoryIDColumn]);
                }

                set
                {
                    this[tableEngineerVisitAssetWorkSheet_GetForVisit.VisualConditionOfFlueSatisfactoryIDColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool Deleted
            {
                get
                {
                    return Conversions.ToBoolean(this[tableEngineerVisitAssetWorkSheet_GetForVisit.DeletedColumn]);
                }

                set
                {
                    this[tableEngineerVisitAssetWorkSheet_GetForVisit.DeletedColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string Location
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableEngineerVisitAssetWorkSheet_GetForVisit.LocationColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'Location' in table 'EngineerVisitAssetWorkSheet_GetForVisit" + "' is DBNull.", e);
                    }
                }

                set
                {
                    this[tableEngineerVisitAssetWorkSheet_GetForVisit.LocationColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string SerialNum
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableEngineerVisitAssetWorkSheet_GetForVisit.SerialNumColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'SerialNum' in table 'EngineerVisitAssetWorkSheet_GetForVisi" + "t' is DBNull.", e);
                    }
                }

                set
                {
                    this[tableEngineerVisitAssetWorkSheet_GetForVisit.SerialNumColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string typemakemodel
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableEngineerVisitAssetWorkSheet_GetForVisit.typemakemodelColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'typemakemodel' in table 'EngineerVisitAssetWorkSheet_GetFor" + "Visit' is DBNull.", e);
                    }
                }

                set
                {
                    this[tableEngineerVisitAssetWorkSheet_GetForVisit.typemakemodelColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsLocationNull()
            {
                return IsNull(tableEngineerVisitAssetWorkSheet_GetForVisit.LocationColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetLocationNull()
            {
                this[tableEngineerVisitAssetWorkSheet_GetForVisit.LocationColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsSerialNumNull()
            {
                return IsNull(tableEngineerVisitAssetWorkSheet_GetForVisit.SerialNumColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetSerialNumNull()
            {
                this[tableEngineerVisitAssetWorkSheet_GetForVisit.SerialNumColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IstypemakemodelNull()
            {
                return IsNull(tableEngineerVisitAssetWorkSheet_GetForVisit.typemakemodelColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SettypemakemodelNull()
            {
                this[tableEngineerVisitAssetWorkSheet_GetForVisit.typemakemodelColumn] = Convert.DBNull;
            }
        }

        /// <summary>
    /// Represents strongly named DataRow class.
    /// </summary>
        public partial class EngineerVisitDefects_GetForEngineerVisitRow : DataRow
        {
            private EngineerVisitDefects_GetForEngineerVisitDataTable tableEngineerVisitDefects_GetForEngineerVisit;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal EngineerVisitDefects_GetForEngineerVisitRow(DataRowBuilder rb) : base(rb)
            {
                tableEngineerVisitDefects_GetForEngineerVisit = (EngineerVisitDefects_GetForEngineerVisitDataTable)Table;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public int EngineerVisitDefectID
            {
                get
                {
                    return Conversions.ToInteger(this[tableEngineerVisitDefects_GetForEngineerVisit.EngineerVisitDefectIDColumn]);
                }

                set
                {
                    this[tableEngineerVisitDefects_GetForEngineerVisit.EngineerVisitDefectIDColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public int CategoryID
            {
                get
                {
                    return Conversions.ToInteger(this[tableEngineerVisitDefects_GetForEngineerVisit.CategoryIDColumn]);
                }

                set
                {
                    this[tableEngineerVisitDefects_GetForEngineerVisit.CategoryIDColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string Reason
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableEngineerVisitDefects_GetForEngineerVisit.ReasonColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'Reason' in table 'EngineerVisitDefects_GetForEngineerVisit'" + " is DBNull.", e);
                    }
                }

                set
                {
                    this[tableEngineerVisitDefects_GetForEngineerVisit.ReasonColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string ActionTaken
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableEngineerVisitDefects_GetForEngineerVisit.ActionTakenColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'ActionTaken' in table 'EngineerVisitDefects_GetForEngineerV" + "isit' is DBNull.", e);
                    }
                }

                set
                {
                    this[tableEngineerVisitDefects_GetForEngineerVisit.ActionTakenColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string WarningNoticeIssued
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableEngineerVisitDefects_GetForEngineerVisit.WarningNoticeIssuedColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'WarningNoticeIssued' in table 'EngineerVisitDefects_GetForE" + "ngineerVisit' is DBNull.", e);
                    }
                }

                set
                {
                    this[tableEngineerVisitDefects_GetForEngineerVisit.WarningNoticeIssuedColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string Disconnected
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableEngineerVisitDefects_GetForEngineerVisit.DisconnectedColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'Disconnected' in table 'EngineerVisitDefects_GetForEngineer" + "Visit' is DBNull.", e);
                    }
                }

                set
                {
                    this[tableEngineerVisitDefects_GetForEngineerVisit.DisconnectedColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool Disconnected1
            {
                get
                {
                    return Conversions.ToBoolean(this[tableEngineerVisitDefects_GetForEngineerVisit.Disconnected1Column]);
                }

                set
                {
                    this[tableEngineerVisitDefects_GetForEngineerVisit.Disconnected1Column] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string Comments
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableEngineerVisitDefects_GetForEngineerVisit.CommentsColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'Comments' in table 'EngineerVisitDefects_GetForEngineerVisi" + "t' is DBNull.", e);
                    }
                }

                set
                {
                    this[tableEngineerVisitDefects_GetForEngineerVisit.CommentsColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public int AssetID
            {
                get
                {
                    try
                    {
                        return Conversions.ToInteger(this[tableEngineerVisitDefects_GetForEngineerVisit.AssetIDColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'AssetID' in table 'EngineerVisitDefects_GetForEngineerVisit" + "' is DBNull.", e);
                    }
                }

                set
                {
                    this[tableEngineerVisitDefects_GetForEngineerVisit.AssetIDColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string Category
            {
                get
                {
                    return Conversions.ToString(this[tableEngineerVisitDefects_GetForEngineerVisit.CategoryColumn]);
                }

                set
                {
                    this[tableEngineerVisitDefects_GetForEngineerVisit.CategoryColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string Location
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableEngineerVisitDefects_GetForEngineerVisit.LocationColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'Location' in table 'EngineerVisitDefects_GetForEngineerVisi" + "t' is DBNull.", e);
                    }
                }

                set
                {
                    this[tableEngineerVisitDefects_GetForEngineerVisit.LocationColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string SerialNum
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableEngineerVisitDefects_GetForEngineerVisit.SerialNumColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'SerialNum' in table 'EngineerVisitDefects_GetForEngineerVis" + "it' is DBNull.", e);
                    }
                }

                set
                {
                    this[tableEngineerVisitDefects_GetForEngineerVisit.SerialNumColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string typemakemodel
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableEngineerVisitDefects_GetForEngineerVisit.typemakemodelColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'typemakemodel' in table 'EngineerVisitDefects_GetForEnginee" + "rVisit' is DBNull.", e);
                    }
                }

                set
                {
                    this[tableEngineerVisitDefects_GetForEngineerVisit.typemakemodelColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public int EngineerVisitID
            {
                get
                {
                    return Conversions.ToInteger(this[tableEngineerVisitDefects_GetForEngineerVisit.EngineerVisitIDColumn]);
                }

                set
                {
                    this[tableEngineerVisitDefects_GetForEngineerVisit.EngineerVisitIDColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool Deleted
            {
                get
                {
                    return Conversions.ToBoolean(this[tableEngineerVisitDefects_GetForEngineerVisit.DeletedColumn]);
                }

                set
                {
                    this[tableEngineerVisitDefects_GetForEngineerVisit.DeletedColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsReasonNull()
            {
                return IsNull(tableEngineerVisitDefects_GetForEngineerVisit.ReasonColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetReasonNull()
            {
                this[tableEngineerVisitDefects_GetForEngineerVisit.ReasonColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsActionTakenNull()
            {
                return IsNull(tableEngineerVisitDefects_GetForEngineerVisit.ActionTakenColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetActionTakenNull()
            {
                this[tableEngineerVisitDefects_GetForEngineerVisit.ActionTakenColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsWarningNoticeIssuedNull()
            {
                return IsNull(tableEngineerVisitDefects_GetForEngineerVisit.WarningNoticeIssuedColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetWarningNoticeIssuedNull()
            {
                this[tableEngineerVisitDefects_GetForEngineerVisit.WarningNoticeIssuedColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsDisconnectedNull()
            {
                return IsNull(tableEngineerVisitDefects_GetForEngineerVisit.DisconnectedColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetDisconnectedNull()
            {
                this[tableEngineerVisitDefects_GetForEngineerVisit.DisconnectedColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsCommentsNull()
            {
                return IsNull(tableEngineerVisitDefects_GetForEngineerVisit.CommentsColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetCommentsNull()
            {
                this[tableEngineerVisitDefects_GetForEngineerVisit.CommentsColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsAssetIDNull()
            {
                return IsNull(tableEngineerVisitDefects_GetForEngineerVisit.AssetIDColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetAssetIDNull()
            {
                this[tableEngineerVisitDefects_GetForEngineerVisit.AssetIDColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsLocationNull()
            {
                return IsNull(tableEngineerVisitDefects_GetForEngineerVisit.LocationColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetLocationNull()
            {
                this[tableEngineerVisitDefects_GetForEngineerVisit.LocationColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsSerialNumNull()
            {
                return IsNull(tableEngineerVisitDefects_GetForEngineerVisit.SerialNumColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetSerialNumNull()
            {
                this[tableEngineerVisitDefects_GetForEngineerVisit.SerialNumColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IstypemakemodelNull()
            {
                return IsNull(tableEngineerVisitDefects_GetForEngineerVisit.typemakemodelColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SettypemakemodelNull()
            {
                this[tableEngineerVisitDefects_GetForEngineerVisit.typemakemodelColumn] = Convert.DBNull;
            }
        }

        /// <summary>
    /// Represents strongly named DataRow class.
    /// </summary>
        public partial class EngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitIDRow : DataRow
        {
            private EngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitIDDataTable tableEngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitID;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal EngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitIDRow(DataRowBuilder rb) : base(rb)
            {
                tableEngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitID = (EngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitIDDataTable)Table;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool tick
            {
                get
                {
                    try
                    {
                        return Conversions.ToBoolean(this[tableEngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitID.tickColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'tick' in table 'EngineerVisitScheduleOfRatesCharge_Get_For_" + "EngineerVisitID' is DBNull.", e);
                    }
                }

                set
                {
                    this[tableEngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitID.tickColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public int EngineerVisitScheduleOfRateChargesID
            {
                get
                {
                    try
                    {
                        return Conversions.ToInteger(this[tableEngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitID.EngineerVisitScheduleOfRateChargesIDColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'EngineerVisitScheduleOfRateChargesID' in table 'EngineerVis" + "itScheduleOfRatesCharge_Get_For_EngineerVisitID' is DBNull.", e);
                    }
                }

                set
                {
                    this[tableEngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitID.EngineerVisitScheduleOfRateChargesIDColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public int JobItemID
            {
                get
                {
                    return Conversions.ToInteger(this[tableEngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitID.JobItemIDColumn]);
                }

                set
                {
                    this[tableEngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitID.JobItemIDColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string Code
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableEngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitID.CodeColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'Code' in table 'EngineerVisitScheduleOfRatesCharge_Get_For_" + "EngineerVisitID' is DBNull.", e);
                    }
                }

                set
                {
                    this[tableEngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitID.CodeColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string category
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableEngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitID.categoryColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'category' in table 'EngineerVisitScheduleOfRatesCharge_Get_" + "For_EngineerVisitID' is DBNull.", e);
                    }
                }

                set
                {
                    this[tableEngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitID.categoryColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string Summary
            {
                get
                {
                    return Conversions.ToString(this[tableEngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitID.SummaryColumn]);
                }

                set
                {
                    this[tableEngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitID.SummaryColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public decimal NumUnitsUsed
            {
                get
                {
                    try
                    {
                        return Conversions.ToDecimal(this[tableEngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitID.NumUnitsUsedColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'NumUnitsUsed' in table 'EngineerVisitScheduleOfRatesCharge_" + "Get_For_EngineerVisitID' is DBNull.", e);
                    }
                }

                set
                {
                    this[tableEngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitID.NumUnitsUsedColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public decimal Price
            {
                get
                {
                    try
                    {
                        return Conversions.ToDecimal(this[tableEngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitID.PriceColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'Price' in table 'EngineerVisitScheduleOfRatesCharge_Get_For" + "_EngineerVisitID' is DBNull.", e);
                    }
                }

                set
                {
                    this[tableEngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitID.PriceColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public decimal Total
            {
                get
                {
                    try
                    {
                        return Conversions.ToDecimal(this[tableEngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitID.TotalColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'Total' in table 'EngineerVisitScheduleOfRatesCharge_Get_For" + "_EngineerVisitID' is DBNull.", e);
                    }
                }

                set
                {
                    this[tableEngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitID.TotalColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool tick1
            {
                get
                {
                    try
                    {
                        return Conversions.ToBoolean(this[tableEngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitID.tick1Column]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'tick1' in table 'EngineerVisitScheduleOfRatesCharge_Get_For" + "_EngineerVisitID' is DBNull.", e);
                    }
                }

                set
                {
                    this[tableEngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitID.tick1Column] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IstickNull()
            {
                return IsNull(tableEngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitID.tickColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SettickNull()
            {
                this[tableEngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitID.tickColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsEngineerVisitScheduleOfRateChargesIDNull()
            {
                return IsNull(tableEngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitID.EngineerVisitScheduleOfRateChargesIDColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetEngineerVisitScheduleOfRateChargesIDNull()
            {
                this[tableEngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitID.EngineerVisitScheduleOfRateChargesIDColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsCodeNull()
            {
                return IsNull(tableEngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitID.CodeColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetCodeNull()
            {
                this[tableEngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitID.CodeColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IscategoryNull()
            {
                return IsNull(tableEngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitID.categoryColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetcategoryNull()
            {
                this[tableEngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitID.categoryColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsNumUnitsUsedNull()
            {
                return IsNull(tableEngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitID.NumUnitsUsedColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetNumUnitsUsedNull()
            {
                this[tableEngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitID.NumUnitsUsedColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsPriceNull()
            {
                return IsNull(tableEngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitID.PriceColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetPriceNull()
            {
                this[tableEngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitID.PriceColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsTotalNull()
            {
                return IsNull(tableEngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitID.TotalColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetTotalNull()
            {
                this[tableEngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitID.TotalColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool Istick1Null()
            {
                return IsNull(tableEngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitID.tick1Column);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void Settick1Null()
            {
                this[tableEngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitID.tick1Column] = Convert.DBNull;
            }
        }

        /// <summary>
    /// Represents strongly named DataRow class.
    /// </summary>
        public partial class EngineerVisitTimeSheet_Get_For_EngineerVisitIDRow : DataRow
        {
            private EngineerVisitTimeSheet_Get_For_EngineerVisitIDDataTable tableEngineerVisitTimeSheet_Get_For_EngineerVisitID;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal EngineerVisitTimeSheet_Get_For_EngineerVisitIDRow(DataRowBuilder rb) : base(rb)
            {
                tableEngineerVisitTimeSheet_Get_For_EngineerVisitID = (EngineerVisitTimeSheet_Get_For_EngineerVisitIDDataTable)Table;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public int EngineerVisitTimeSheetID
            {
                get
                {
                    return Conversions.ToInteger(this[tableEngineerVisitTimeSheet_Get_For_EngineerVisitID.EngineerVisitTimeSheetIDColumn]);
                }

                set
                {
                    this[tableEngineerVisitTimeSheet_Get_For_EngineerVisitID.EngineerVisitTimeSheetIDColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public int EngineerVisitID
            {
                get
                {
                    return Conversions.ToInteger(this[tableEngineerVisitTimeSheet_Get_For_EngineerVisitID.EngineerVisitIDColumn]);
                }

                set
                {
                    this[tableEngineerVisitTimeSheet_Get_For_EngineerVisitID.EngineerVisitIDColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DateTime StartDateTime
            {
                get
                {
                    return Conversions.ToDate(this[tableEngineerVisitTimeSheet_Get_For_EngineerVisitID.StartDateTimeColumn]);
                }

                set
                {
                    this[tableEngineerVisitTimeSheet_Get_For_EngineerVisitID.StartDateTimeColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DateTime EndDateTime
            {
                get
                {
                    return Conversions.ToDate(this[tableEngineerVisitTimeSheet_Get_For_EngineerVisitID.EndDateTimeColumn]);
                }

                set
                {
                    this[tableEngineerVisitTimeSheet_Get_For_EngineerVisitID.EndDateTimeColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string Comments
            {
                get
                {
                    return Conversions.ToString(this[tableEngineerVisitTimeSheet_Get_For_EngineerVisitID.CommentsColumn]);
                }

                set
                {
                    this[tableEngineerVisitTimeSheet_Get_For_EngineerVisitID.CommentsColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string TimeSheetType
            {
                get
                {
                    return Conversions.ToString(this[tableEngineerVisitTimeSheet_Get_For_EngineerVisitID.TimeSheetTypeColumn]);
                }

                set
                {
                    this[tableEngineerVisitTimeSheet_Get_For_EngineerVisitID.TimeSheetTypeColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public int TimesheetTypeID
            {
                get
                {
                    return Conversions.ToInteger(this[tableEngineerVisitTimeSheet_Get_For_EngineerVisitID.TimesheetTypeIDColumn]);
                }

                set
                {
                    this[tableEngineerVisitTimeSheet_Get_For_EngineerVisitID.TimesheetTypeIDColumn] = value;
                }
            }
        }

        /// <summary>
    /// Represents strongly named DataRow class.
    /// </summary>
        public partial class EngineerVisitUnitsUsed_Get_For_EngineerVisitIDRow : DataRow
        {
            private EngineerVisitUnitsUsed_Get_For_EngineerVisitIDDataTable tableEngineerVisitUnitsUsed_Get_For_EngineerVisitID;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal EngineerVisitUnitsUsed_Get_For_EngineerVisitIDRow(DataRowBuilder rb) : base(rb)
            {
                tableEngineerVisitUnitsUsed_Get_For_EngineerVisitID = (EngineerVisitUnitsUsed_Get_For_EngineerVisitIDDataTable)Table;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public int JobItemID
            {
                get
                {
                    return Conversions.ToInteger(this[tableEngineerVisitUnitsUsed_Get_For_EngineerVisitID.JobItemIDColumn]);
                }

                set
                {
                    this[tableEngineerVisitUnitsUsed_Get_For_EngineerVisitID.JobItemIDColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string Summary
            {
                get
                {
                    return Conversions.ToString(this[tableEngineerVisitUnitsUsed_Get_For_EngineerVisitID.SummaryColumn]);
                }

                set
                {
                    this[tableEngineerVisitUnitsUsed_Get_For_EngineerVisitID.SummaryColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public decimal NumAllocated
            {
                get
                {
                    try
                    {
                        return Conversions.ToDecimal(this[tableEngineerVisitUnitsUsed_Get_For_EngineerVisitID.NumAllocatedColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'NumAllocated' in table 'EngineerVisitUnitsUsed_Get_For_Engi" + "neerVisitID' is DBNull.", e);
                    }
                }

                set
                {
                    this[tableEngineerVisitUnitsUsed_Get_For_EngineerVisitID.NumAllocatedColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public decimal NumUnitsUsed
            {
                get
                {
                    try
                    {
                        return Conversions.ToDecimal(this[tableEngineerVisitUnitsUsed_Get_For_EngineerVisitID.NumUnitsUsedColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'NumUnitsUsed' in table 'EngineerVisitUnitsUsed_Get_For_Engi" + "neerVisitID' is DBNull.", e);
                    }
                }

                set
                {
                    this[tableEngineerVisitUnitsUsed_Get_For_EngineerVisitID.NumUnitsUsedColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public decimal Price
            {
                get
                {
                    try
                    {
                        return Conversions.ToDecimal(this[tableEngineerVisitUnitsUsed_Get_For_EngineerVisitID.PriceColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'Price' in table 'EngineerVisitUnitsUsed_Get_For_EngineerVis" + "itID' is DBNull.", e);
                    }
                }

                set
                {
                    this[tableEngineerVisitUnitsUsed_Get_For_EngineerVisitID.PriceColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsNumAllocatedNull()
            {
                return IsNull(tableEngineerVisitUnitsUsed_Get_For_EngineerVisitID.NumAllocatedColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetNumAllocatedNull()
            {
                this[tableEngineerVisitUnitsUsed_Get_For_EngineerVisitID.NumAllocatedColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsNumUnitsUsedNull()
            {
                return IsNull(tableEngineerVisitUnitsUsed_Get_For_EngineerVisitID.NumUnitsUsedColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetNumUnitsUsedNull()
            {
                this[tableEngineerVisitUnitsUsed_Get_For_EngineerVisitID.NumUnitsUsedColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsPriceNull()
            {
                return IsNull(tableEngineerVisitUnitsUsed_Get_For_EngineerVisitID.PriceColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetPriceNull()
            {
                this[tableEngineerVisitUnitsUsed_Get_For_EngineerVisitID.PriceColumn] = Convert.DBNull;
            }
        }

        /// <summary>
    /// Represents strongly named DataRow class.
    /// </summary>
        public partial class InvoiceAddress_Get_EngineerVisitIDRow : DataRow
        {
            private InvoiceAddress_Get_EngineerVisitIDDataTable tableInvoiceAddress_Get_EngineerVisitID;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal InvoiceAddress_Get_EngineerVisitIDRow(DataRowBuilder rb) : base(rb)
            {
                tableInvoiceAddress_Get_EngineerVisitID = (InvoiceAddress_Get_EngineerVisitIDDataTable)Table;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public int AddressTypeID
            {
                get
                {
                    try
                    {
                        return Conversions.ToInteger(this[tableInvoiceAddress_Get_EngineerVisitID.AddressTypeIDColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'AddressTypeID' in table 'InvoiceAddress_Get_EngineerVisitID" + "' is DBNull.", e);
                    }
                }

                set
                {
                    this[tableInvoiceAddress_Get_EngineerVisitID.AddressTypeIDColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string AddressType
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableInvoiceAddress_Get_EngineerVisitID.AddressTypeColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'AddressType' in table 'InvoiceAddress_Get_EngineerVisitID' " + "is DBNull.", e);
                    }
                }

                set
                {
                    this[tableInvoiceAddress_Get_EngineerVisitID.AddressTypeColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public int AddressID
            {
                get
                {
                    return Conversions.ToInteger(this[tableInvoiceAddress_Get_EngineerVisitID.AddressIDColumn]);
                }

                set
                {
                    this[tableInvoiceAddress_Get_EngineerVisitID.AddressIDColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string Address1
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableInvoiceAddress_Get_EngineerVisitID.Address1Column]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'Address1' in table 'InvoiceAddress_Get_EngineerVisitID' is " + "DBNull.", e);
                    }
                }

                set
                {
                    this[tableInvoiceAddress_Get_EngineerVisitID.Address1Column] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string Address2
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableInvoiceAddress_Get_EngineerVisitID.Address2Column]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'Address2' in table 'InvoiceAddress_Get_EngineerVisitID' is " + "DBNull.", e);
                    }
                }

                set
                {
                    this[tableInvoiceAddress_Get_EngineerVisitID.Address2Column] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string Address3
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableInvoiceAddress_Get_EngineerVisitID.Address3Column]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'Address3' in table 'InvoiceAddress_Get_EngineerVisitID' is " + "DBNull.", e);
                    }
                }

                set
                {
                    this[tableInvoiceAddress_Get_EngineerVisitID.Address3Column] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string Address4
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableInvoiceAddress_Get_EngineerVisitID.Address4Column]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'Address4' in table 'InvoiceAddress_Get_EngineerVisitID' is " + "DBNull.", e);
                    }
                }

                set
                {
                    this[tableInvoiceAddress_Get_EngineerVisitID.Address4Column] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string Address5
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableInvoiceAddress_Get_EngineerVisitID.Address5Column]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'Address5' in table 'InvoiceAddress_Get_EngineerVisitID' is " + "DBNull.", e);
                    }
                }

                set
                {
                    this[tableInvoiceAddress_Get_EngineerVisitID.Address5Column] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string Postcode
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableInvoiceAddress_Get_EngineerVisitID.PostcodeColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'Postcode' in table 'InvoiceAddress_Get_EngineerVisitID' is " + "DBNull.", e);
                    }
                }

                set
                {
                    this[tableInvoiceAddress_Get_EngineerVisitID.PostcodeColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string TelephoneNum
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableInvoiceAddress_Get_EngineerVisitID.TelephoneNumColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'TelephoneNum' in table 'InvoiceAddress_Get_EngineerVisitID'" + " is DBNull.", e);
                    }
                }

                set
                {
                    this[tableInvoiceAddress_Get_EngineerVisitID.TelephoneNumColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string FaxNum
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableInvoiceAddress_Get_EngineerVisitID.FaxNumColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'FaxNum' in table 'InvoiceAddress_Get_EngineerVisitID' is DB" + "Null.", e);
                    }
                }

                set
                {
                    this[tableInvoiceAddress_Get_EngineerVisitID.FaxNumColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string EmailAddress
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableInvoiceAddress_Get_EngineerVisitID.EmailAddressColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'EmailAddress' in table 'InvoiceAddress_Get_EngineerVisitID'" + " is DBNull.", e);
                    }
                }

                set
                {
                    this[tableInvoiceAddress_Get_EngineerVisitID.EmailAddressColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsAddressTypeIDNull()
            {
                return IsNull(tableInvoiceAddress_Get_EngineerVisitID.AddressTypeIDColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetAddressTypeIDNull()
            {
                this[tableInvoiceAddress_Get_EngineerVisitID.AddressTypeIDColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsAddressTypeNull()
            {
                return IsNull(tableInvoiceAddress_Get_EngineerVisitID.AddressTypeColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetAddressTypeNull()
            {
                this[tableInvoiceAddress_Get_EngineerVisitID.AddressTypeColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsAddress1Null()
            {
                return IsNull(tableInvoiceAddress_Get_EngineerVisitID.Address1Column);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetAddress1Null()
            {
                this[tableInvoiceAddress_Get_EngineerVisitID.Address1Column] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsAddress2Null()
            {
                return IsNull(tableInvoiceAddress_Get_EngineerVisitID.Address2Column);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetAddress2Null()
            {
                this[tableInvoiceAddress_Get_EngineerVisitID.Address2Column] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsAddress3Null()
            {
                return IsNull(tableInvoiceAddress_Get_EngineerVisitID.Address3Column);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetAddress3Null()
            {
                this[tableInvoiceAddress_Get_EngineerVisitID.Address3Column] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsAddress4Null()
            {
                return IsNull(tableInvoiceAddress_Get_EngineerVisitID.Address4Column);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetAddress4Null()
            {
                this[tableInvoiceAddress_Get_EngineerVisitID.Address4Column] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsAddress5Null()
            {
                return IsNull(tableInvoiceAddress_Get_EngineerVisitID.Address5Column);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetAddress5Null()
            {
                this[tableInvoiceAddress_Get_EngineerVisitID.Address5Column] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsPostcodeNull()
            {
                return IsNull(tableInvoiceAddress_Get_EngineerVisitID.PostcodeColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetPostcodeNull()
            {
                this[tableInvoiceAddress_Get_EngineerVisitID.PostcodeColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsTelephoneNumNull()
            {
                return IsNull(tableInvoiceAddress_Get_EngineerVisitID.TelephoneNumColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetTelephoneNumNull()
            {
                this[tableInvoiceAddress_Get_EngineerVisitID.TelephoneNumColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsFaxNumNull()
            {
                return IsNull(tableInvoiceAddress_Get_EngineerVisitID.FaxNumColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetFaxNumNull()
            {
                this[tableInvoiceAddress_Get_EngineerVisitID.FaxNumColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsEmailAddressNull()
            {
                return IsNull(tableInvoiceAddress_Get_EngineerVisitID.EmailAddressColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetEmailAddressNull()
            {
                this[tableInvoiceAddress_Get_EngineerVisitID.EmailAddressColumn] = Convert.DBNull;
            }
        }

        /// <summary>
    /// Represents strongly named DataRow class.
    /// </summary>
        public partial class Job_Get_For_An_EngineerVisit_IDRow : DataRow
        {
            private Job_Get_For_An_EngineerVisit_IDDataTable tableJob_Get_For_An_EngineerVisit_ID;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal Job_Get_For_An_EngineerVisit_IDRow(DataRowBuilder rb) : base(rb)
            {
                tableJob_Get_For_An_EngineerVisit_ID = (Job_Get_For_An_EngineerVisit_IDDataTable)Table;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public int JobID
            {
                get
                {
                    return Conversions.ToInteger(this[tableJob_Get_For_An_EngineerVisit_ID.JobIDColumn]);
                }

                set
                {
                    this[tableJob_Get_For_An_EngineerVisit_ID.JobIDColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public int SiteID
            {
                get
                {
                    return Conversions.ToInteger(this[tableJob_Get_For_An_EngineerVisit_ID.SiteIDColumn]);
                }

                set
                {
                    this[tableJob_Get_For_An_EngineerVisit_ID.SiteIDColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public int JobDefinitionEnumID
            {
                get
                {
                    return Conversions.ToInteger(this[tableJob_Get_For_An_EngineerVisit_ID.JobDefinitionEnumIDColumn]);
                }

                set
                {
                    this[tableJob_Get_For_An_EngineerVisit_ID.JobDefinitionEnumIDColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public int JobTypeID
            {
                get
                {
                    return Conversions.ToInteger(this[tableJob_Get_For_An_EngineerVisit_ID.JobTypeIDColumn]);
                }

                set
                {
                    this[tableJob_Get_For_An_EngineerVisit_ID.JobTypeIDColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public int StatusEnumID
            {
                get
                {
                    return Conversions.ToInteger(this[tableJob_Get_For_An_EngineerVisit_ID.StatusEnumIDColumn]);
                }

                set
                {
                    this[tableJob_Get_For_An_EngineerVisit_ID.StatusEnumIDColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DateTime DateCreated
            {
                get
                {
                    return Conversions.ToDate(this[tableJob_Get_For_An_EngineerVisit_ID.DateCreatedColumn]);
                }

                set
                {
                    this[tableJob_Get_For_An_EngineerVisit_ID.DateCreatedColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public int CreatedByUserID
            {
                get
                {
                    return Conversions.ToInteger(this[tableJob_Get_For_An_EngineerVisit_ID.CreatedByUserIDColumn]);
                }

                set
                {
                    this[tableJob_Get_For_An_EngineerVisit_ID.CreatedByUserIDColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string JobNumber
            {
                get
                {
                    return Conversions.ToString(this[tableJob_Get_For_An_EngineerVisit_ID.JobNumberColumn]);
                }

                set
                {
                    this[tableJob_Get_For_An_EngineerVisit_ID.JobNumberColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string PONumber
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableJob_Get_For_An_EngineerVisit_ID.PONumberColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'PONumber' in table 'Job_Get_For_An_EngineerVisit_ID' is DBN" + "ull.", e);
                    }
                }

                set
                {
                    this[tableJob_Get_For_An_EngineerVisit_ID.PONumberColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public int QuoteID
            {
                get
                {
                    return Conversions.ToInteger(this[tableJob_Get_For_An_EngineerVisit_ID.QuoteIDColumn]);
                }

                set
                {
                    this[tableJob_Get_For_An_EngineerVisit_ID.QuoteIDColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public int ContractID
            {
                get
                {
                    return Conversions.ToInteger(this[tableJob_Get_For_An_EngineerVisit_ID.ContractIDColumn]);
                }

                set
                {
                    this[tableJob_Get_For_An_EngineerVisit_ID.ContractIDColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool ToBePartPaid
            {
                get
                {
                    return Conversions.ToBoolean(this[tableJob_Get_For_An_EngineerVisit_ID.ToBePartPaidColumn]);
                }

                set
                {
                    this[tableJob_Get_For_An_EngineerVisit_ID.ToBePartPaidColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public decimal Retention
            {
                get
                {
                    return Conversions.ToDecimal(this[tableJob_Get_For_An_EngineerVisit_ID.RetentionColumn]);
                }

                set
                {
                    this[tableJob_Get_For_An_EngineerVisit_ID.RetentionColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool Deleted
            {
                get
                {
                    return Conversions.ToBoolean(this[tableJob_Get_For_An_EngineerVisit_ID.DeletedColumn]);
                }

                set
                {
                    this[tableJob_Get_For_An_EngineerVisit_ID.DeletedColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool CollectPayment
            {
                get
                {
                    try
                    {
                        return Conversions.ToBoolean(this[tableJob_Get_For_An_EngineerVisit_ID.CollectPaymentColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'CollectPayment' in table 'Job_Get_For_An_EngineerVisit_ID' " + "is DBNull.", e);
                    }
                }

                set
                {
                    this[tableJob_Get_For_An_EngineerVisit_ID.CollectPaymentColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsPONumberNull()
            {
                return IsNull(tableJob_Get_For_An_EngineerVisit_ID.PONumberColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetPONumberNull()
            {
                this[tableJob_Get_For_An_EngineerVisit_ID.PONumberColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsCollectPaymentNull()
            {
                return IsNull(tableJob_Get_For_An_EngineerVisit_ID.CollectPaymentColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetCollectPaymentNull()
            {
                this[tableJob_Get_For_An_EngineerVisit_ID.CollectPaymentColumn] = Convert.DBNull;
            }
        }

        /// <summary>
    /// Represents strongly named DataRow class.
    /// </summary>
        public partial class JobItems_Get_For_JobRow : DataRow
        {
            private JobItems_Get_For_JobDataTable tableJobItems_Get_For_Job;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal JobItems_Get_For_JobRow(DataRowBuilder rb) : base(rb)
            {
                tableJobItems_Get_For_Job = (JobItems_Get_For_JobDataTable)Table;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string Summary
            {
                get
                {
                    return Conversions.ToString(this[tableJobItems_Get_For_Job.SummaryColumn]);
                }

                set
                {
                    this[tableJobItems_Get_For_Job.SummaryColumn] = value;
                }
            }
        }

        /// <summary>
    /// Represents strongly named DataRow class.
    /// </summary>
        public partial class Site_Get_ForEngineerVisitIDRow : DataRow
        {
            private Site_Get_ForEngineerVisitIDDataTable tableSite_Get_ForEngineerVisitID;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal Site_Get_ForEngineerVisitIDRow(DataRowBuilder rb) : base(rb)
            {
                tableSite_Get_ForEngineerVisitID = (Site_Get_ForEngineerVisitIDDataTable)Table;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public int SiteID
            {
                get
                {
                    return Conversions.ToInteger(this[tableSite_Get_ForEngineerVisitID.SiteIDColumn]);
                }

                set
                {
                    this[tableSite_Get_ForEngineerVisitID.SiteIDColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string Name
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableSite_Get_ForEngineerVisitID.NameColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'Name' in table 'Site_Get_ForEngineerVisitID' is DBNull.", e);
                    }
                }

                set
                {
                    this[tableSite_Get_ForEngineerVisitID.NameColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public int CustomerID
            {
                get
                {
                    return Conversions.ToInteger(this[tableSite_Get_ForEngineerVisitID.CustomerIDColumn]);
                }

                set
                {
                    this[tableSite_Get_ForEngineerVisitID.CustomerIDColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public int RegionID
            {
                get
                {
                    return Conversions.ToInteger(this[tableSite_Get_ForEngineerVisitID.RegionIDColumn]);
                }

                set
                {
                    this[tableSite_Get_ForEngineerVisitID.RegionIDColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool HeadOffice
            {
                get
                {
                    return Conversions.ToBoolean(this[tableSite_Get_ForEngineerVisitID.HeadOfficeColumn]);
                }

                set
                {
                    this[tableSite_Get_ForEngineerVisitID.HeadOfficeColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string HeadOfficeResult
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableSite_Get_ForEngineerVisitID.HeadOfficeResultColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'HeadOfficeResult' in table 'Site_Get_ForEngineerVisitID' is" + " DBNull.", e);
                    }
                }

                set
                {
                    this[tableSite_Get_ForEngineerVisitID.HeadOfficeResultColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string Notes
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableSite_Get_ForEngineerVisitID.NotesColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'Notes' in table 'Site_Get_ForEngineerVisitID' is DBNull.", e);
                    }
                }

                set
                {
                    this[tableSite_Get_ForEngineerVisitID.NotesColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string Address1
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableSite_Get_ForEngineerVisitID.Address1Column]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'Address1' in table 'Site_Get_ForEngineerVisitID' is DBNull." + "", e);
                    }
                }

                set
                {
                    this[tableSite_Get_ForEngineerVisitID.Address1Column] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string Address2
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableSite_Get_ForEngineerVisitID.Address2Column]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'Address2' in table 'Site_Get_ForEngineerVisitID' is DBNull." + "", e);
                    }
                }

                set
                {
                    this[tableSite_Get_ForEngineerVisitID.Address2Column] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string Address3
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableSite_Get_ForEngineerVisitID.Address3Column]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'Address3' in table 'Site_Get_ForEngineerVisitID' is DBNull." + "", e);
                    }
                }

                set
                {
                    this[tableSite_Get_ForEngineerVisitID.Address3Column] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string Address4
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableSite_Get_ForEngineerVisitID.Address4Column]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'Address4' in table 'Site_Get_ForEngineerVisitID' is DBNull." + "", e);
                    }
                }

                set
                {
                    this[tableSite_Get_ForEngineerVisitID.Address4Column] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string Address5
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableSite_Get_ForEngineerVisitID.Address5Column]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'Address5' in table 'Site_Get_ForEngineerVisitID' is DBNull." + "", e);
                    }
                }

                set
                {
                    this[tableSite_Get_ForEngineerVisitID.Address5Column] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string Postcode
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableSite_Get_ForEngineerVisitID.PostcodeColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'Postcode' in table 'Site_Get_ForEngineerVisitID' is DBNull." + "", e);
                    }
                }

                set
                {
                    this[tableSite_Get_ForEngineerVisitID.PostcodeColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string TelephoneNum
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableSite_Get_ForEngineerVisitID.TelephoneNumColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'TelephoneNum' in table 'Site_Get_ForEngineerVisitID' is DBN" + "ull.", e);
                    }
                }

                set
                {
                    this[tableSite_Get_ForEngineerVisitID.TelephoneNumColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string FaxNum
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableSite_Get_ForEngineerVisitID.FaxNumColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'FaxNum' in table 'Site_Get_ForEngineerVisitID' is DBNull.", e);
                    }
                }

                set
                {
                    this[tableSite_Get_ForEngineerVisitID.FaxNumColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string EmailAddress
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableSite_Get_ForEngineerVisitID.EmailAddressColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'EmailAddress' in table 'Site_Get_ForEngineerVisitID' is DBN" + "ull.", e);
                    }
                }

                set
                {
                    this[tableSite_Get_ForEngineerVisitID.EmailAddressColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public int EngineerID
            {
                get
                {
                    try
                    {
                        return Conversions.ToInteger(this[tableSite_Get_ForEngineerVisitID.EngineerIDColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'EngineerID' in table 'Site_Get_ForEngineerVisitID' is DBNul" + "l.", e);
                    }
                }

                set
                {
                    this[tableSite_Get_ForEngineerVisitID.EngineerIDColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool PoNumReqd
            {
                get
                {
                    return Conversions.ToBoolean(this[tableSite_Get_ForEngineerVisitID.PoNumReqdColumn]);
                }

                set
                {
                    this[tableSite_Get_ForEngineerVisitID.PoNumReqdColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool AcceptChargesChanges
            {
                get
                {
                    try
                    {
                        return Conversions.ToBoolean(this[tableSite_Get_ForEngineerVisitID.AcceptChargesChangesColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'AcceptChargesChanges' in table 'Site_Get_ForEngineerVisitID" + "' is DBNull.", e);
                    }
                }

                set
                {
                    this[tableSite_Get_ForEngineerVisitID.AcceptChargesChangesColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool Deleted
            {
                get
                {
                    return Conversions.ToBoolean(this[tableSite_Get_ForEngineerVisitID.DeletedColumn]);
                }

                set
                {
                    this[tableSite_Get_ForEngineerVisitID.DeletedColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string SourceOfCustomer
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableSite_Get_ForEngineerVisitID.SourceOfCustomerColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'SourceOfCustomer' in table 'Site_Get_ForEngineerVisitID' is" + " DBNull.", e);
                    }
                }

                set
                {
                    this[tableSite_Get_ForEngineerVisitID.SourceOfCustomerColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string PolicyNumber
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableSite_Get_ForEngineerVisitID.PolicyNumberColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'PolicyNumber' in table 'Site_Get_ForEngineerVisitID' is DBN" + "ull.", e);
                    }
                }

                set
                {
                    this[tableSite_Get_ForEngineerVisitID.PolicyNumberColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsNameNull()
            {
                return IsNull(tableSite_Get_ForEngineerVisitID.NameColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetNameNull()
            {
                this[tableSite_Get_ForEngineerVisitID.NameColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsHeadOfficeResultNull()
            {
                return IsNull(tableSite_Get_ForEngineerVisitID.HeadOfficeResultColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetHeadOfficeResultNull()
            {
                this[tableSite_Get_ForEngineerVisitID.HeadOfficeResultColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsNotesNull()
            {
                return IsNull(tableSite_Get_ForEngineerVisitID.NotesColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetNotesNull()
            {
                this[tableSite_Get_ForEngineerVisitID.NotesColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsAddress1Null()
            {
                return IsNull(tableSite_Get_ForEngineerVisitID.Address1Column);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetAddress1Null()
            {
                this[tableSite_Get_ForEngineerVisitID.Address1Column] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsAddress2Null()
            {
                return IsNull(tableSite_Get_ForEngineerVisitID.Address2Column);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetAddress2Null()
            {
                this[tableSite_Get_ForEngineerVisitID.Address2Column] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsAddress3Null()
            {
                return IsNull(tableSite_Get_ForEngineerVisitID.Address3Column);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetAddress3Null()
            {
                this[tableSite_Get_ForEngineerVisitID.Address3Column] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsAddress4Null()
            {
                return IsNull(tableSite_Get_ForEngineerVisitID.Address4Column);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetAddress4Null()
            {
                this[tableSite_Get_ForEngineerVisitID.Address4Column] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsAddress5Null()
            {
                return IsNull(tableSite_Get_ForEngineerVisitID.Address5Column);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetAddress5Null()
            {
                this[tableSite_Get_ForEngineerVisitID.Address5Column] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsPostcodeNull()
            {
                return IsNull(tableSite_Get_ForEngineerVisitID.PostcodeColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetPostcodeNull()
            {
                this[tableSite_Get_ForEngineerVisitID.PostcodeColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsTelephoneNumNull()
            {
                return IsNull(tableSite_Get_ForEngineerVisitID.TelephoneNumColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetTelephoneNumNull()
            {
                this[tableSite_Get_ForEngineerVisitID.TelephoneNumColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsFaxNumNull()
            {
                return IsNull(tableSite_Get_ForEngineerVisitID.FaxNumColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetFaxNumNull()
            {
                this[tableSite_Get_ForEngineerVisitID.FaxNumColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsEmailAddressNull()
            {
                return IsNull(tableSite_Get_ForEngineerVisitID.EmailAddressColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetEmailAddressNull()
            {
                this[tableSite_Get_ForEngineerVisitID.EmailAddressColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsEngineerIDNull()
            {
                return IsNull(tableSite_Get_ForEngineerVisitID.EngineerIDColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetEngineerIDNull()
            {
                this[tableSite_Get_ForEngineerVisitID.EngineerIDColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsAcceptChargesChangesNull()
            {
                return IsNull(tableSite_Get_ForEngineerVisitID.AcceptChargesChangesColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetAcceptChargesChangesNull()
            {
                this[tableSite_Get_ForEngineerVisitID.AcceptChargesChangesColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsSourceOfCustomerNull()
            {
                return IsNull(tableSite_Get_ForEngineerVisitID.SourceOfCustomerColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetSourceOfCustomerNull()
            {
                this[tableSite_Get_ForEngineerVisitID.SourceOfCustomerColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsPolicyNumberNull()
            {
                return IsNull(tableSite_Get_ForEngineerVisitID.PolicyNumberColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetPolicyNumberNull()
            {
                this[tableSite_Get_ForEngineerVisitID.PolicyNumberColumn] = Convert.DBNull;
            }
        }

        /// <summary>
    /// Row event argument class
    /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public class Customer_Get_ForSiteIDRowChangeEvent : EventArgs
        {
            private Customer_Get_ForSiteIDRow eventRow;
            private DataRowAction eventAction;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public Customer_Get_ForSiteIDRowChangeEvent(Customer_Get_ForSiteIDRow row, DataRowAction action) : base()
            {
                eventRow = row;
                eventAction = action;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public Customer_Get_ForSiteIDRow Row
            {
                get
                {
                    return eventRow;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return eventAction;
                }
            }
        }

        /// <summary>
    /// Row event argument class
    /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public class EngineerVisitAssetWorkSheet_GetForVisitRowChangeEvent : EventArgs
        {
            private EngineerVisitAssetWorkSheet_GetForVisitRow eventRow;
            private DataRowAction eventAction;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public EngineerVisitAssetWorkSheet_GetForVisitRowChangeEvent(EngineerVisitAssetWorkSheet_GetForVisitRow row, DataRowAction action) : base()
            {
                eventRow = row;
                eventAction = action;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public EngineerVisitAssetWorkSheet_GetForVisitRow Row
            {
                get
                {
                    return eventRow;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return eventAction;
                }
            }
        }

        /// <summary>
    /// Row event argument class
    /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public class EngineerVisitDefects_GetForEngineerVisitRowChangeEvent : EventArgs
        {
            private EngineerVisitDefects_GetForEngineerVisitRow eventRow;
            private DataRowAction eventAction;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public EngineerVisitDefects_GetForEngineerVisitRowChangeEvent(EngineerVisitDefects_GetForEngineerVisitRow row, DataRowAction action) : base()
            {
                eventRow = row;
                eventAction = action;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public EngineerVisitDefects_GetForEngineerVisitRow Row
            {
                get
                {
                    return eventRow;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return eventAction;
                }
            }
        }

        /// <summary>
    /// Row event argument class
    /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public class EngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitIDRowChangeEvent : EventArgs
        {
            private EngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitIDRow eventRow;
            private DataRowAction eventAction;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public EngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitIDRowChangeEvent(EngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitIDRow row, DataRowAction action) : base()
            {
                eventRow = row;
                eventAction = action;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public EngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitIDRow Row
            {
                get
                {
                    return eventRow;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return eventAction;
                }
            }
        }

        /// <summary>
    /// Row event argument class
    /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public class EngineerVisitTimeSheet_Get_For_EngineerVisitIDRowChangeEvent : EventArgs
        {
            private EngineerVisitTimeSheet_Get_For_EngineerVisitIDRow eventRow;
            private DataRowAction eventAction;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public EngineerVisitTimeSheet_Get_For_EngineerVisitIDRowChangeEvent(EngineerVisitTimeSheet_Get_For_EngineerVisitIDRow row, DataRowAction action) : base()
            {
                eventRow = row;
                eventAction = action;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public EngineerVisitTimeSheet_Get_For_EngineerVisitIDRow Row
            {
                get
                {
                    return eventRow;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return eventAction;
                }
            }
        }

        /// <summary>
    /// Row event argument class
    /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public class EngineerVisitUnitsUsed_Get_For_EngineerVisitIDRowChangeEvent : EventArgs
        {
            private EngineerVisitUnitsUsed_Get_For_EngineerVisitIDRow eventRow;
            private DataRowAction eventAction;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public EngineerVisitUnitsUsed_Get_For_EngineerVisitIDRowChangeEvent(EngineerVisitUnitsUsed_Get_For_EngineerVisitIDRow row, DataRowAction action) : base()
            {
                eventRow = row;
                eventAction = action;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public EngineerVisitUnitsUsed_Get_For_EngineerVisitIDRow Row
            {
                get
                {
                    return eventRow;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return eventAction;
                }
            }
        }

        /// <summary>
    /// Row event argument class
    /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public class InvoiceAddress_Get_EngineerVisitIDRowChangeEvent : EventArgs
        {
            private InvoiceAddress_Get_EngineerVisitIDRow eventRow;
            private DataRowAction eventAction;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public InvoiceAddress_Get_EngineerVisitIDRowChangeEvent(InvoiceAddress_Get_EngineerVisitIDRow row, DataRowAction action) : base()
            {
                eventRow = row;
                eventAction = action;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public InvoiceAddress_Get_EngineerVisitIDRow Row
            {
                get
                {
                    return eventRow;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return eventAction;
                }
            }
        }

        /// <summary>
    /// Row event argument class
    /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public class Job_Get_For_An_EngineerVisit_IDRowChangeEvent : EventArgs
        {
            private Job_Get_For_An_EngineerVisit_IDRow eventRow;
            private DataRowAction eventAction;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public Job_Get_For_An_EngineerVisit_IDRowChangeEvent(Job_Get_For_An_EngineerVisit_IDRow row, DataRowAction action) : base()
            {
                eventRow = row;
                eventAction = action;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public Job_Get_For_An_EngineerVisit_IDRow Row
            {
                get
                {
                    return eventRow;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return eventAction;
                }
            }
        }

        /// <summary>
    /// Row event argument class
    /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public class JobItems_Get_For_JobRowChangeEvent : EventArgs
        {
            private JobItems_Get_For_JobRow eventRow;
            private DataRowAction eventAction;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public JobItems_Get_For_JobRowChangeEvent(JobItems_Get_For_JobRow row, DataRowAction action) : base()
            {
                eventRow = row;
                eventAction = action;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public JobItems_Get_For_JobRow Row
            {
                get
                {
                    return eventRow;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return eventAction;
                }
            }
        }

        /// <summary>
    /// Row event argument class
    /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public class Site_Get_ForEngineerVisitIDRowChangeEvent : EventArgs
        {
            private Site_Get_ForEngineerVisitIDRow eventRow;
            private DataRowAction eventAction;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public Site_Get_ForEngineerVisitIDRowChangeEvent(Site_Get_ForEngineerVisitIDRow row, DataRowAction action) : base()
            {
                eventRow = row;
                eventAction = action;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public Site_Get_ForEngineerVisitIDRow Row
            {
                get
                {
                    return eventRow;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return eventAction;
                }
            }
        }
    }

    namespace FSMDataSetTableAdapters
    {

        /// <summary>
    /// Represents the connection and commands used to retrieve and save data.
    /// </summary>
        [System.ComponentModel.DesignerCategory("code")]
        [System.ComponentModel.ToolboxItem(true)]
        [System.ComponentModel.DataObject(true)]
        [System.ComponentModel.Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" + ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

        [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
        public partial class Customer_Get_ForSiteIDTableAdapter : System.ComponentModel.Component
        {
            private System.Data.SqlClient.SqlDataAdapter __adapter;

            private System.Data.SqlClient.SqlDataAdapter _adapter
            {
                [MethodImpl(MethodImplOptions.Synchronized)]
                get
                {
                    return __adapter;
                }

                [MethodImpl(MethodImplOptions.Synchronized)]
                set
                {
                    __adapter = value;
                }
            }

            private System.Data.SqlClient.SqlConnection _connection;
            private System.Data.SqlClient.SqlTransaction _transaction;
            private System.Data.SqlClient.SqlCommand[] _commandCollection;
            private bool _clearBeforeFill;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public Customer_Get_ForSiteIDTableAdapter() : base()
            {
                ClearBeforeFill = true;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected internal System.Data.SqlClient.SqlDataAdapter Adapter
            {
                get
                {
                    if (_adapter is null)
                    {
                        InitAdapter();
                    }

                    return _adapter;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal System.Data.SqlClient.SqlConnection Connection
            {
                get
                {
                    if (_connection is null)
                    {
                        InitConnection();
                    }

                    return _connection;
                }

                set
                {
                    _connection = value;
                    if (Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Connection = value;
                    }

                    if (Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Connection = value;
                    }

                    if (Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Connection = value;
                    }

                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        if (CommandCollection[i] is object)
                        {
                            CommandCollection[i].Connection = value;
                        }

                        i = i + 1;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal System.Data.SqlClient.SqlTransaction Transaction
            {
                get
                {
                    return _transaction;
                }

                set
                {
                    _transaction = value;
                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        CommandCollection[i].Transaction = _transaction;
                        i = i + 1;
                    }

                    if (Adapter is object && Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Transaction = _transaction;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected System.Data.SqlClient.SqlCommand[] CommandCollection
            {
                get
                {
                    if (_commandCollection is null)
                    {
                        InitCommandCollection();
                    }

                    return _commandCollection;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool ClearBeforeFill
            {
                get
                {
                    return _clearBeforeFill;
                }

                set
                {
                    _clearBeforeFill = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            private void InitAdapter()
            {
                _adapter = new System.Data.SqlClient.SqlDataAdapter();
                var tableMapping = new System.Data.Common.DataTableMapping();
                tableMapping.SourceTable = "Table";
                tableMapping.DataSetTable = "Customer_Get_ForSiteID";
                tableMapping.ColumnMappings.Add("CustomerID", "CustomerID");
                tableMapping.ColumnMappings.Add("Name", "Name");
                tableMapping.ColumnMappings.Add("CustomerTypeID", "CustomerTypeID");
                tableMapping.ColumnMappings.Add("RegionID", "RegionID");
                tableMapping.ColumnMappings.Add("Notes", "Notes");
                tableMapping.ColumnMappings.Add("AccountNumber", "AccountNumber");
                tableMapping.ColumnMappings.Add("Status", "Status");
                tableMapping.ColumnMappings.Add("AcceptChargesChanges", "AcceptChargesChanges");
                tableMapping.ColumnMappings.Add("Deleted", "Deleted");
                tableMapping.ColumnMappings.Add("MainContractorDiscount", "MainContractorDiscount");
                _adapter.TableMappings.Add(tableMapping);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            private void InitConnection()
            {
                _connection = new System.Data.SqlClient.SqlConnection();
                _connection.ConnectionString = "";
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            private void InitCommandCollection()
            {
                _commandCollection = new System.Data.SqlClient.SqlCommand[1];
                _commandCollection[0] = new System.Data.SqlClient.SqlCommand();
                _commandCollection[0].Connection = Connection;
                _commandCollection[0].CommandText = "dbo.Customer_Get_ForSiteID";
                _commandCollection[0].CommandType = CommandType.StoredProcedure;
                _commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
                _commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@SiteID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Fill, true)]
            public virtual int Fill(FSMDataSet.Customer_Get_ForSiteIDDataTable dataTable, int? SiteID)
            {
                Adapter.SelectCommand = CommandCollection[0];
                if (SiteID.HasValue == true)
                {
                    Adapter.SelectCommand.Parameters[1].Value = SiteID.Value;
                }
                else
                {
                    Adapter.SelectCommand.Parameters[1].Value = DBNull.Value;
                }

                if (ClearBeforeFill == true)
                {
                    dataTable.Clear();
                }

                int returnValue = Adapter.Fill(dataTable);
                return returnValue;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select, true)]
            public virtual FSMDataSet.Customer_Get_ForSiteIDDataTable GetData(int? SiteID)
            {
                Adapter.SelectCommand = CommandCollection[0];
                if (SiteID.HasValue == true)
                {
                    Adapter.SelectCommand.Parameters[1].Value = SiteID.Value;
                }
                else
                {
                    Adapter.SelectCommand.Parameters[1].Value = DBNull.Value;
                }

                var dataTable = new FSMDataSet.Customer_Get_ForSiteIDDataTable();
                Adapter.Fill(dataTable);
                return dataTable;
            }
        }

        /// <summary>
    /// Represents the connection and commands used to retrieve and save data.
    /// </summary>
        [System.ComponentModel.DesignerCategory("code")]
        [System.ComponentModel.ToolboxItem(true)]
        [System.ComponentModel.DataObject(true)]
        [System.ComponentModel.Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" + ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

        [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
        public partial class EngineerVisitAssetWorkSheet_GetForVisitTableAdapter : System.ComponentModel.Component
        {
            private System.Data.SqlClient.SqlDataAdapter __adapter;

            private System.Data.SqlClient.SqlDataAdapter _adapter
            {
                [MethodImpl(MethodImplOptions.Synchronized)]
                get
                {
                    return __adapter;
                }

                [MethodImpl(MethodImplOptions.Synchronized)]
                set
                {
                    __adapter = value;
                }
            }

            private System.Data.SqlClient.SqlConnection _connection;
            private System.Data.SqlClient.SqlTransaction _transaction;
            private System.Data.SqlClient.SqlCommand[] _commandCollection;
            private bool _clearBeforeFill;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public EngineerVisitAssetWorkSheet_GetForVisitTableAdapter() : base()
            {
                ClearBeforeFill = true;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected internal System.Data.SqlClient.SqlDataAdapter Adapter
            {
                get
                {
                    if (_adapter is null)
                    {
                        InitAdapter();
                    }

                    return _adapter;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal System.Data.SqlClient.SqlConnection Connection
            {
                get
                {
                    if (_connection is null)
                    {
                        InitConnection();
                    }

                    return _connection;
                }

                set
                {
                    _connection = value;
                    if (Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Connection = value;
                    }

                    if (Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Connection = value;
                    }

                    if (Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Connection = value;
                    }

                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        if (CommandCollection[i] is object)
                        {
                            CommandCollection[i].Connection = value;
                        }

                        i = i + 1;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal System.Data.SqlClient.SqlTransaction Transaction
            {
                get
                {
                    return _transaction;
                }

                set
                {
                    _transaction = value;
                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        CommandCollection[i].Transaction = _transaction;
                        i = i + 1;
                    }

                    if (Adapter is object && Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Transaction = _transaction;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected System.Data.SqlClient.SqlCommand[] CommandCollection
            {
                get
                {
                    if (_commandCollection is null)
                    {
                        InitCommandCollection();
                    }

                    return _commandCollection;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool ClearBeforeFill
            {
                get
                {
                    return _clearBeforeFill;
                }

                set
                {
                    _clearBeforeFill = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            private void InitAdapter()
            {
                _adapter = new System.Data.SqlClient.SqlDataAdapter();
                var tableMapping = new System.Data.Common.DataTableMapping();
                tableMapping.SourceTable = "Table";
                tableMapping.DataSetTable = "EngineerVisitAssetWorkSheet_GetForVisit";
                tableMapping.ColumnMappings.Add("EngineerVisitAssetWorkSheetID", "EngineerVisitAssetWorkSheetID");
                tableMapping.ColumnMappings.Add("EngineerVisitID", "EngineerVisitID");
                tableMapping.ColumnMappings.Add("AssetID", "AssetID");
                tableMapping.ColumnMappings.Add("FlueTerminationSatisfactoryID", "FlueTerminationSatisfactoryID");
                tableMapping.ColumnMappings.Add("FlueFlowTestID", "FlueFlowTestID");
                tableMapping.ColumnMappings.Add("SpillageTestID", "SpillageTestID");
                tableMapping.ColumnMappings.Add("VentilationProvisionSatisfactoryID", "VentilationProvisionSatisfactoryID");
                tableMapping.ColumnMappings.Add("SafetyDeviceOperationID", "SafetyDeviceOperationID");
                tableMapping.ColumnMappings.Add("DHWFlowRate", "DHWFlowRate");
                tableMapping.ColumnMappings.Add("ColdWaterTemp", "ColdWaterTemp");
                tableMapping.ColumnMappings.Add("DHWTemp", "DHWTemp");
                tableMapping.ColumnMappings.Add("InletStaticPressure", "InletStaticPressure");
                tableMapping.ColumnMappings.Add("InletWorkingPressure", "InletWorkingPressure");
                tableMapping.ColumnMappings.Add("MinBurnerPressure", "MinBurnerPressure");
                tableMapping.ColumnMappings.Add("MaxBurnerPressure", "MaxBurnerPressure");
                tableMapping.ColumnMappings.Add("CO2", "CO2");
                tableMapping.ColumnMappings.Add("CO2CORatio", "CO2CORatio");
                tableMapping.ColumnMappings.Add("LandlordsApplianceID", "LandlordsApplianceID");
                tableMapping.ColumnMappings.Add("ApplianceServiceOrInspectedID", "ApplianceServiceOrInspectedID");
                tableMapping.ColumnMappings.Add("ApplianceSafeID", "ApplianceSafeID");
                tableMapping.ColumnMappings.Add("VisualConditionOfFlueSatisfactoryID", "VisualConditionOfFlueSatisfactoryID");
                tableMapping.ColumnMappings.Add("Deleted", "Deleted");
                tableMapping.ColumnMappings.Add("Location", "Location");
                tableMapping.ColumnMappings.Add("SerialNum", "SerialNum");
                tableMapping.ColumnMappings.Add("typemakemodel", "typemakemodel");
                _adapter.TableMappings.Add(tableMapping);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            private void InitConnection()
            {
                _connection = new System.Data.SqlClient.SqlConnection();
                _connection.ConnectionString = "";
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            private void InitCommandCollection()
            {
                _commandCollection = new System.Data.SqlClient.SqlCommand[1];
                _commandCollection[0] = new System.Data.SqlClient.SqlCommand();
                _commandCollection[0].Connection = Connection;
                _commandCollection[0].CommandText = "dbo.EngineerVisitAssetWorkSheet_GetForVisit";
                _commandCollection[0].CommandType = CommandType.StoredProcedure;
                _commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
                _commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@EngineerVisitID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Fill, true)]
            public virtual int Fill(FSMDataSet.EngineerVisitAssetWorkSheet_GetForVisitDataTable dataTable, int? EngineerVisitID)
            {
                Adapter.SelectCommand = CommandCollection[0];
                if (EngineerVisitID.HasValue == true)
                {
                    Adapter.SelectCommand.Parameters[1].Value = EngineerVisitID.Value;
                }
                else
                {
                    Adapter.SelectCommand.Parameters[1].Value = DBNull.Value;
                }

                if (ClearBeforeFill == true)
                {
                    dataTable.Clear();
                }

                int returnValue = Adapter.Fill(dataTable);
                return returnValue;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select, true)]
            public virtual FSMDataSet.EngineerVisitAssetWorkSheet_GetForVisitDataTable GetData(int? EngineerVisitID)
            {
                Adapter.SelectCommand = CommandCollection[0];
                if (EngineerVisitID.HasValue == true)
                {
                    Adapter.SelectCommand.Parameters[1].Value = EngineerVisitID.Value;
                }
                else
                {
                    Adapter.SelectCommand.Parameters[1].Value = DBNull.Value;
                }

                var dataTable = new FSMDataSet.EngineerVisitAssetWorkSheet_GetForVisitDataTable();
                Adapter.Fill(dataTable);
                return dataTable;
            }
        }

        /// <summary>
    /// Represents the connection and commands used to retrieve and save data.
    /// </summary>
        [System.ComponentModel.DesignerCategory("code")]
        [System.ComponentModel.ToolboxItem(true)]
        [System.ComponentModel.DataObject(true)]
        [System.ComponentModel.Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" + ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

        [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
        public partial class EngineerVisitDefects_GetForEngineerVisitTableAdapter : System.ComponentModel.Component
        {
            private System.Data.SqlClient.SqlDataAdapter __adapter;

            private System.Data.SqlClient.SqlDataAdapter _adapter
            {
                [MethodImpl(MethodImplOptions.Synchronized)]
                get
                {
                    return __adapter;
                }

                [MethodImpl(MethodImplOptions.Synchronized)]
                set
                {
                    __adapter = value;
                }
            }

            private System.Data.SqlClient.SqlConnection _connection;
            private System.Data.SqlClient.SqlTransaction _transaction;
            private System.Data.SqlClient.SqlCommand[] _commandCollection;
            private bool _clearBeforeFill;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public EngineerVisitDefects_GetForEngineerVisitTableAdapter() : base()
            {
                ClearBeforeFill = true;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected internal System.Data.SqlClient.SqlDataAdapter Adapter
            {
                get
                {
                    if (_adapter is null)
                    {
                        InitAdapter();
                    }

                    return _adapter;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal System.Data.SqlClient.SqlConnection Connection
            {
                get
                {
                    if (_connection is null)
                    {
                        InitConnection();
                    }

                    return _connection;
                }

                set
                {
                    _connection = value;
                    if (Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Connection = value;
                    }

                    if (Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Connection = value;
                    }

                    if (Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Connection = value;
                    }

                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        if (CommandCollection[i] is object)
                        {
                            CommandCollection[i].Connection = value;
                        }

                        i = i + 1;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal System.Data.SqlClient.SqlTransaction Transaction
            {
                get
                {
                    return _transaction;
                }

                set
                {
                    _transaction = value;
                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        CommandCollection[i].Transaction = _transaction;
                        i = i + 1;
                    }

                    if (Adapter is object && Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Transaction = _transaction;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected System.Data.SqlClient.SqlCommand[] CommandCollection
            {
                get
                {
                    if (_commandCollection is null)
                    {
                        InitCommandCollection();
                    }

                    return _commandCollection;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool ClearBeforeFill
            {
                get
                {
                    return _clearBeforeFill;
                }

                set
                {
                    _clearBeforeFill = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            private void InitAdapter()
            {
                _adapter = new System.Data.SqlClient.SqlDataAdapter();
                var tableMapping = new System.Data.Common.DataTableMapping();
                tableMapping.SourceTable = "Table";
                tableMapping.DataSetTable = "EngineerVisitDefects_GetForEngineerVisit";
                tableMapping.ColumnMappings.Add("EngineerVisitDefectID", "EngineerVisitDefectID");
                tableMapping.ColumnMappings.Add("CategoryID", "CategoryID");
                tableMapping.ColumnMappings.Add("Reason", "Reason");
                tableMapping.ColumnMappings.Add("ActionTaken", "ActionTaken");
                tableMapping.ColumnMappings.Add("WarningNoticeIssued", "WarningNoticeIssued");
                tableMapping.ColumnMappings.Add("Disconnected", "Disconnected");
                tableMapping.ColumnMappings.Add("Disconnected1", "Disconnected1");
                tableMapping.ColumnMappings.Add("Comments", "Comments");
                tableMapping.ColumnMappings.Add("AssetID", "AssetID");
                tableMapping.ColumnMappings.Add("Category", "Category");
                tableMapping.ColumnMappings.Add("Location", "Location");
                tableMapping.ColumnMappings.Add("SerialNum", "SerialNum");
                tableMapping.ColumnMappings.Add("typemakemodel", "typemakemodel");
                tableMapping.ColumnMappings.Add("EngineerVisitID", "EngineerVisitID");
                tableMapping.ColumnMappings.Add("Deleted", "Deleted");
                _adapter.TableMappings.Add(tableMapping);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            private void InitConnection()
            {
                _connection = new System.Data.SqlClient.SqlConnection();
                _connection.ConnectionString = "";
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            private void InitCommandCollection()
            {
                _commandCollection = new System.Data.SqlClient.SqlCommand[1];
                _commandCollection[0] = new System.Data.SqlClient.SqlCommand();
                _commandCollection[0].Connection = Connection;
                _commandCollection[0].CommandText = "dbo.EngineerVisitDefects_GetForEngineerVisit";
                _commandCollection[0].CommandType = CommandType.StoredProcedure;
                _commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
                _commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@EngineerVisitID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Fill, true)]
            public virtual int Fill(FSMDataSet.EngineerVisitDefects_GetForEngineerVisitDataTable dataTable, int? EngineerVisitID)
            {
                Adapter.SelectCommand = CommandCollection[0];
                if (EngineerVisitID.HasValue == true)
                {
                    Adapter.SelectCommand.Parameters[1].Value = EngineerVisitID.Value;
                }
                else
                {
                    Adapter.SelectCommand.Parameters[1].Value = DBNull.Value;
                }

                if (ClearBeforeFill == true)
                {
                    dataTable.Clear();
                }

                int returnValue = Adapter.Fill(dataTable);
                return returnValue;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select, true)]
            public virtual FSMDataSet.EngineerVisitDefects_GetForEngineerVisitDataTable GetData(int? EngineerVisitID)
            {
                Adapter.SelectCommand = CommandCollection[0];
                if (EngineerVisitID.HasValue == true)
                {
                    Adapter.SelectCommand.Parameters[1].Value = EngineerVisitID.Value;
                }
                else
                {
                    Adapter.SelectCommand.Parameters[1].Value = DBNull.Value;
                }

                var dataTable = new FSMDataSet.EngineerVisitDefects_GetForEngineerVisitDataTable();
                Adapter.Fill(dataTable);
                return dataTable;
            }
        }

        /// <summary>
    /// Represents the connection and commands used to retrieve and save data.
    /// </summary>
        [System.ComponentModel.DesignerCategory("code")]
        [System.ComponentModel.ToolboxItem(true)]
        [System.ComponentModel.DataObject(true)]
        [System.ComponentModel.Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" + ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

        [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
        public partial class EngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitIDTableAdapter : System.ComponentModel.Component
        {
            private System.Data.SqlClient.SqlDataAdapter __adapter;

            private System.Data.SqlClient.SqlDataAdapter _adapter
            {
                [MethodImpl(MethodImplOptions.Synchronized)]
                get
                {
                    return __adapter;
                }

                [MethodImpl(MethodImplOptions.Synchronized)]
                set
                {
                    __adapter = value;
                }
            }

            private System.Data.SqlClient.SqlConnection _connection;
            private System.Data.SqlClient.SqlTransaction _transaction;
            private System.Data.SqlClient.SqlCommand[] _commandCollection;
            private bool _clearBeforeFill;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public EngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitIDTableAdapter() : base()
            {
                ClearBeforeFill = true;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected internal System.Data.SqlClient.SqlDataAdapter Adapter
            {
                get
                {
                    if (_adapter is null)
                    {
                        InitAdapter();
                    }

                    return _adapter;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal System.Data.SqlClient.SqlConnection Connection
            {
                get
                {
                    if (_connection is null)
                    {
                        InitConnection();
                    }

                    return _connection;
                }

                set
                {
                    _connection = value;
                    if (Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Connection = value;
                    }

                    if (Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Connection = value;
                    }

                    if (Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Connection = value;
                    }

                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        if (CommandCollection[i] is object)
                        {
                            CommandCollection[i].Connection = value;
                        }

                        i = i + 1;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal System.Data.SqlClient.SqlTransaction Transaction
            {
                get
                {
                    return _transaction;
                }

                set
                {
                    _transaction = value;
                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        CommandCollection[i].Transaction = _transaction;
                        i = i + 1;
                    }

                    if (Adapter is object && Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Transaction = _transaction;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected System.Data.SqlClient.SqlCommand[] CommandCollection
            {
                get
                {
                    if (_commandCollection is null)
                    {
                        InitCommandCollection();
                    }

                    return _commandCollection;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool ClearBeforeFill
            {
                get
                {
                    return _clearBeforeFill;
                }

                set
                {
                    _clearBeforeFill = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            private void InitAdapter()
            {
                _adapter = new System.Data.SqlClient.SqlDataAdapter();
                var tableMapping = new System.Data.Common.DataTableMapping();
                tableMapping.SourceTable = "Table";
                tableMapping.DataSetTable = "EngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitID";
                tableMapping.ColumnMappings.Add("tick", "tick");
                tableMapping.ColumnMappings.Add("EngineerVisitScheduleOfRateChargesID", "EngineerVisitScheduleOfRateChargesID");
                tableMapping.ColumnMappings.Add("JobItemID", "JobItemID");
                tableMapping.ColumnMappings.Add("Code", "Code");
                tableMapping.ColumnMappings.Add("category", "category");
                tableMapping.ColumnMappings.Add("Summary", "Summary");
                tableMapping.ColumnMappings.Add("NumUnitsUsed", "NumUnitsUsed");
                tableMapping.ColumnMappings.Add("Price", "Price");
                tableMapping.ColumnMappings.Add("Total", "Total");
                tableMapping.ColumnMappings.Add("tick1", "tick1");
                _adapter.TableMappings.Add(tableMapping);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            private void InitConnection()
            {
                _connection = new System.Data.SqlClient.SqlConnection();
                _connection.ConnectionString = "";
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            private void InitCommandCollection()
            {
                _commandCollection = new System.Data.SqlClient.SqlCommand[1];
                _commandCollection[0] = new System.Data.SqlClient.SqlCommand();
                _commandCollection[0].Connection = Connection;
                _commandCollection[0].CommandText = "dbo.EngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitID";
                _commandCollection[0].CommandType = CommandType.StoredProcedure;
                _commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
                _commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@EngineerVisitID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Fill, true)]
            public virtual int Fill(FSMDataSet.EngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitIDDataTable dataTable, int? EngineerVisitID)
            {
                Adapter.SelectCommand = CommandCollection[0];
                if (EngineerVisitID.HasValue == true)
                {
                    Adapter.SelectCommand.Parameters[1].Value = EngineerVisitID.Value;
                }
                else
                {
                    Adapter.SelectCommand.Parameters[1].Value = DBNull.Value;
                }

                if (ClearBeforeFill == true)
                {
                    dataTable.Clear();
                }

                int returnValue = Adapter.Fill(dataTable);
                return returnValue;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select, true)]
            public virtual FSMDataSet.EngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitIDDataTable GetData(int? EngineerVisitID)
            {
                Adapter.SelectCommand = CommandCollection[0];
                if (EngineerVisitID.HasValue == true)
                {
                    Adapter.SelectCommand.Parameters[1].Value = EngineerVisitID.Value;
                }
                else
                {
                    Adapter.SelectCommand.Parameters[1].Value = DBNull.Value;
                }

                var dataTable = new FSMDataSet.EngineerVisitScheduleOfRatesCharge_Get_For_EngineerVisitIDDataTable();
                Adapter.Fill(dataTable);
                return dataTable;
            }
        }

        /// <summary>
    /// Represents the connection and commands used to retrieve and save data.
    /// </summary>
        [System.ComponentModel.DesignerCategory("code")]
        [System.ComponentModel.ToolboxItem(true)]
        [System.ComponentModel.DataObject(true)]
        [System.ComponentModel.Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" + ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

        [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
        public partial class EngineerVisitTimeSheet_Get_For_EngineerVisitIDTableAdapter : System.ComponentModel.Component
        {
            private System.Data.SqlClient.SqlDataAdapter __adapter;

            private System.Data.SqlClient.SqlDataAdapter _adapter
            {
                [MethodImpl(MethodImplOptions.Synchronized)]
                get
                {
                    return __adapter;
                }

                [MethodImpl(MethodImplOptions.Synchronized)]
                set
                {
                    __adapter = value;
                }
            }

            private System.Data.SqlClient.SqlConnection _connection;
            private System.Data.SqlClient.SqlTransaction _transaction;
            private System.Data.SqlClient.SqlCommand[] _commandCollection;
            private bool _clearBeforeFill;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public EngineerVisitTimeSheet_Get_For_EngineerVisitIDTableAdapter() : base()
            {
                ClearBeforeFill = true;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected internal System.Data.SqlClient.SqlDataAdapter Adapter
            {
                get
                {
                    if (_adapter is null)
                    {
                        InitAdapter();
                    }

                    return _adapter;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal System.Data.SqlClient.SqlConnection Connection
            {
                get
                {
                    if (_connection is null)
                    {
                        InitConnection();
                    }

                    return _connection;
                }

                set
                {
                    _connection = value;
                    if (Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Connection = value;
                    }

                    if (Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Connection = value;
                    }

                    if (Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Connection = value;
                    }

                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        if (CommandCollection[i] is object)
                        {
                            CommandCollection[i].Connection = value;
                        }

                        i = i + 1;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal System.Data.SqlClient.SqlTransaction Transaction
            {
                get
                {
                    return _transaction;
                }

                set
                {
                    _transaction = value;
                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        CommandCollection[i].Transaction = _transaction;
                        i = i + 1;
                    }

                    if (Adapter is object && Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Transaction = _transaction;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected System.Data.SqlClient.SqlCommand[] CommandCollection
            {
                get
                {
                    if (_commandCollection is null)
                    {
                        InitCommandCollection();
                    }

                    return _commandCollection;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool ClearBeforeFill
            {
                get
                {
                    return _clearBeforeFill;
                }

                set
                {
                    _clearBeforeFill = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            private void InitAdapter()
            {
                _adapter = new System.Data.SqlClient.SqlDataAdapter();
                var tableMapping = new System.Data.Common.DataTableMapping();
                tableMapping.SourceTable = "Table";
                tableMapping.DataSetTable = "EngineerVisitTimeSheet_Get_For_EngineerVisitID";
                tableMapping.ColumnMappings.Add("EngineerVisitTimeSheetID", "EngineerVisitTimeSheetID");
                tableMapping.ColumnMappings.Add("EngineerVisitID", "EngineerVisitID");
                tableMapping.ColumnMappings.Add("StartDateTime", "StartDateTime");
                tableMapping.ColumnMappings.Add("EndDateTime", "EndDateTime");
                tableMapping.ColumnMappings.Add("Comments", "Comments");
                tableMapping.ColumnMappings.Add("TimeSheetType", "TimeSheetType");
                tableMapping.ColumnMappings.Add("TimesheetTypeID", "TimesheetTypeID");
                _adapter.TableMappings.Add(tableMapping);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            private void InitConnection()
            {
                _connection = new System.Data.SqlClient.SqlConnection();
                _connection.ConnectionString = "";
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            private void InitCommandCollection()
            {
                _commandCollection = new System.Data.SqlClient.SqlCommand[1];
                _commandCollection[0] = new System.Data.SqlClient.SqlCommand();
                _commandCollection[0].Connection = Connection;
                _commandCollection[0].CommandText = "dbo.EngineerVisitTimeSheet_Get_For_EngineerVisitID";
                _commandCollection[0].CommandType = CommandType.StoredProcedure;
                _commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
                _commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@EngineerVisitID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Fill, true)]
            public virtual int Fill(FSMDataSet.EngineerVisitTimeSheet_Get_For_EngineerVisitIDDataTable dataTable, int? EngineerVisitID)
            {
                Adapter.SelectCommand = CommandCollection[0];
                if (EngineerVisitID.HasValue == true)
                {
                    Adapter.SelectCommand.Parameters[1].Value = EngineerVisitID.Value;
                }
                else
                {
                    Adapter.SelectCommand.Parameters[1].Value = DBNull.Value;
                }

                if (ClearBeforeFill == true)
                {
                    dataTable.Clear();
                }

                int returnValue = Adapter.Fill(dataTable);
                return returnValue;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select, true)]
            public virtual FSMDataSet.EngineerVisitTimeSheet_Get_For_EngineerVisitIDDataTable GetData(int? EngineerVisitID)
            {
                Adapter.SelectCommand = CommandCollection[0];
                if (EngineerVisitID.HasValue == true)
                {
                    Adapter.SelectCommand.Parameters[1].Value = EngineerVisitID.Value;
                }
                else
                {
                    Adapter.SelectCommand.Parameters[1].Value = DBNull.Value;
                }

                var dataTable = new FSMDataSet.EngineerVisitTimeSheet_Get_For_EngineerVisitIDDataTable();
                Adapter.Fill(dataTable);
                return dataTable;
            }
        }

        /// <summary>
    /// Represents the connection and commands used to retrieve and save data.
    /// </summary>
        [System.ComponentModel.DesignerCategory("code")]
        [System.ComponentModel.ToolboxItem(true)]
        [System.ComponentModel.DataObject(true)]
        [System.ComponentModel.Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" + ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

        [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
        public partial class EngineerVisitUnitsUsed_Get_For_EngineerVisitIDTableAdapter : System.ComponentModel.Component
        {
            private System.Data.SqlClient.SqlDataAdapter __adapter;

            private System.Data.SqlClient.SqlDataAdapter _adapter
            {
                [MethodImpl(MethodImplOptions.Synchronized)]
                get
                {
                    return __adapter;
                }

                [MethodImpl(MethodImplOptions.Synchronized)]
                set
                {
                    __adapter = value;
                }
            }

            private System.Data.SqlClient.SqlConnection _connection;
            private System.Data.SqlClient.SqlTransaction _transaction;
            private System.Data.SqlClient.SqlCommand[] _commandCollection;
            private bool _clearBeforeFill;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public EngineerVisitUnitsUsed_Get_For_EngineerVisitIDTableAdapter() : base()
            {
                ClearBeforeFill = true;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected internal System.Data.SqlClient.SqlDataAdapter Adapter
            {
                get
                {
                    if (_adapter is null)
                    {
                        InitAdapter();
                    }

                    return _adapter;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal System.Data.SqlClient.SqlConnection Connection
            {
                get
                {
                    if (_connection is null)
                    {
                        InitConnection();
                    }

                    return _connection;
                }

                set
                {
                    _connection = value;
                    if (Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Connection = value;
                    }

                    if (Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Connection = value;
                    }

                    if (Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Connection = value;
                    }

                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        if (CommandCollection[i] is object)
                        {
                            CommandCollection[i].Connection = value;
                        }

                        i = i + 1;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal System.Data.SqlClient.SqlTransaction Transaction
            {
                get
                {
                    return _transaction;
                }

                set
                {
                    _transaction = value;
                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        CommandCollection[i].Transaction = _transaction;
                        i = i + 1;
                    }

                    if (Adapter is object && Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Transaction = _transaction;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected System.Data.SqlClient.SqlCommand[] CommandCollection
            {
                get
                {
                    if (_commandCollection is null)
                    {
                        InitCommandCollection();
                    }

                    return _commandCollection;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool ClearBeforeFill
            {
                get
                {
                    return _clearBeforeFill;
                }

                set
                {
                    _clearBeforeFill = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            private void InitAdapter()
            {
                _adapter = new System.Data.SqlClient.SqlDataAdapter();
                var tableMapping = new System.Data.Common.DataTableMapping();
                tableMapping.SourceTable = "Table";
                tableMapping.DataSetTable = "EngineerVisitUnitsUsed_Get_For_EngineerVisitID";
                tableMapping.ColumnMappings.Add("JobItemID", "JobItemID");
                tableMapping.ColumnMappings.Add("Summary", "Summary");
                tableMapping.ColumnMappings.Add("NumAllocated", "NumAllocated");
                tableMapping.ColumnMappings.Add("NumUnitsUsed", "NumUnitsUsed");
                tableMapping.ColumnMappings.Add("Price", "Price");
                _adapter.TableMappings.Add(tableMapping);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            private void InitConnection()
            {
                _connection = new System.Data.SqlClient.SqlConnection();
                _connection.ConnectionString = "";
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            private void InitCommandCollection()
            {
                _commandCollection = new System.Data.SqlClient.SqlCommand[1];
                _commandCollection[0] = new System.Data.SqlClient.SqlCommand();
                _commandCollection[0].Connection = Connection;
                _commandCollection[0].CommandText = "dbo.EngineerVisitUnitsUsed_Get_For_EngineerVisitID";
                _commandCollection[0].CommandType = CommandType.StoredProcedure;
                _commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
                _commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@EngineerVisitID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Fill, true)]
            public virtual int Fill(FSMDataSet.EngineerVisitUnitsUsed_Get_For_EngineerVisitIDDataTable dataTable, int? EngineerVisitID)
            {
                Adapter.SelectCommand = CommandCollection[0];
                if (EngineerVisitID.HasValue == true)
                {
                    Adapter.SelectCommand.Parameters[1].Value = EngineerVisitID.Value;
                }
                else
                {
                    Adapter.SelectCommand.Parameters[1].Value = DBNull.Value;
                }

                if (ClearBeforeFill == true)
                {
                    dataTable.Clear();
                }

                int returnValue = Adapter.Fill(dataTable);
                return returnValue;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select, true)]
            public virtual FSMDataSet.EngineerVisitUnitsUsed_Get_For_EngineerVisitIDDataTable GetData(int? EngineerVisitID)
            {
                Adapter.SelectCommand = CommandCollection[0];
                if (EngineerVisitID.HasValue == true)
                {
                    Adapter.SelectCommand.Parameters[1].Value = EngineerVisitID.Value;
                }
                else
                {
                    Adapter.SelectCommand.Parameters[1].Value = DBNull.Value;
                }

                var dataTable = new FSMDataSet.EngineerVisitUnitsUsed_Get_For_EngineerVisitIDDataTable();
                Adapter.Fill(dataTable);
                return dataTable;
            }
        }

        /// <summary>
    /// Represents the connection and commands used to retrieve and save data.
    /// </summary>
        [System.ComponentModel.DesignerCategory("code")]
        [System.ComponentModel.ToolboxItem(true)]
        [System.ComponentModel.DataObject(true)]
        [System.ComponentModel.Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" + ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

        [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
        public partial class InvoiceAddress_Get_EngineerVisitIDTableAdapter : System.ComponentModel.Component
        {
            private System.Data.SqlClient.SqlDataAdapter __adapter;

            private System.Data.SqlClient.SqlDataAdapter _adapter
            {
                [MethodImpl(MethodImplOptions.Synchronized)]
                get
                {
                    return __adapter;
                }

                [MethodImpl(MethodImplOptions.Synchronized)]
                set
                {
                    __adapter = value;
                }
            }

            private System.Data.SqlClient.SqlConnection _connection;
            private System.Data.SqlClient.SqlTransaction _transaction;
            private System.Data.SqlClient.SqlCommand[] _commandCollection;
            private bool _clearBeforeFill;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public InvoiceAddress_Get_EngineerVisitIDTableAdapter() : base()
            {
                ClearBeforeFill = true;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected internal System.Data.SqlClient.SqlDataAdapter Adapter
            {
                get
                {
                    if (_adapter is null)
                    {
                        InitAdapter();
                    }

                    return _adapter;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal System.Data.SqlClient.SqlConnection Connection
            {
                get
                {
                    if (_connection is null)
                    {
                        InitConnection();
                    }

                    return _connection;
                }

                set
                {
                    _connection = value;
                    if (Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Connection = value;
                    }

                    if (Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Connection = value;
                    }

                    if (Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Connection = value;
                    }

                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        if (CommandCollection[i] is object)
                        {
                            CommandCollection[i].Connection = value;
                        }

                        i = i + 1;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal System.Data.SqlClient.SqlTransaction Transaction
            {
                get
                {
                    return _transaction;
                }

                set
                {
                    _transaction = value;
                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        CommandCollection[i].Transaction = _transaction;
                        i = i + 1;
                    }

                    if (Adapter is object && Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Transaction = _transaction;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected System.Data.SqlClient.SqlCommand[] CommandCollection
            {
                get
                {
                    if (_commandCollection is null)
                    {
                        InitCommandCollection();
                    }

                    return _commandCollection;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool ClearBeforeFill
            {
                get
                {
                    return _clearBeforeFill;
                }

                set
                {
                    _clearBeforeFill = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            private void InitAdapter()
            {
                _adapter = new System.Data.SqlClient.SqlDataAdapter();
                var tableMapping = new System.Data.Common.DataTableMapping();
                tableMapping.SourceTable = "Table";
                tableMapping.DataSetTable = "InvoiceAddress_Get_EngineerVisitID";
                tableMapping.ColumnMappings.Add("AddressTypeID", "AddressTypeID");
                tableMapping.ColumnMappings.Add("AddressType", "AddressType");
                tableMapping.ColumnMappings.Add("AddressID", "AddressID");
                tableMapping.ColumnMappings.Add("Address1", "Address1");
                tableMapping.ColumnMappings.Add("Address2", "Address2");
                tableMapping.ColumnMappings.Add("Address3", "Address3");
                tableMapping.ColumnMappings.Add("Address4", "Address4");
                tableMapping.ColumnMappings.Add("Address5", "Address5");
                tableMapping.ColumnMappings.Add("Postcode", "Postcode");
                tableMapping.ColumnMappings.Add("TelephoneNum", "TelephoneNum");
                tableMapping.ColumnMappings.Add("FaxNum", "FaxNum");
                tableMapping.ColumnMappings.Add("EmailAddress", "EmailAddress");
                _adapter.TableMappings.Add(tableMapping);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            private void InitConnection()
            {
                _connection = new System.Data.SqlClient.SqlConnection();
                _connection.ConnectionString = "";
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            private void InitCommandCollection()
            {
                _commandCollection = new System.Data.SqlClient.SqlCommand[1];
                _commandCollection[0] = new System.Data.SqlClient.SqlCommand();
                _commandCollection[0].Connection = Connection;
                _commandCollection[0].CommandText = "dbo.InvoiceAddress_Get_EngineerVisitID";
                _commandCollection[0].CommandType = CommandType.StoredProcedure;
                _commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
                _commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@EngineerVisitID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
                _commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@InvoiceEnumVal", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
                _commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@SiteEnumVal", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
                _commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@HQEnumVal", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Fill, true)]
            public virtual int Fill(FSMDataSet.InvoiceAddress_Get_EngineerVisitIDDataTable dataTable, int? EngineerVisitID, int? InvoiceEnumVal, int? SiteEnumVal, int? HQEnumVal)
            {
                Adapter.SelectCommand = CommandCollection[0];
                if (EngineerVisitID.HasValue == true)
                {
                    Adapter.SelectCommand.Parameters[1].Value = EngineerVisitID.Value;
                }
                else
                {
                    Adapter.SelectCommand.Parameters[1].Value = DBNull.Value;
                }

                if (InvoiceEnumVal.HasValue == true)
                {
                    Adapter.SelectCommand.Parameters[2].Value = InvoiceEnumVal.Value;
                }
                else
                {
                    Adapter.SelectCommand.Parameters[2].Value = DBNull.Value;
                }

                if (SiteEnumVal.HasValue == true)
                {
                    Adapter.SelectCommand.Parameters[3].Value = SiteEnumVal.Value;
                }
                else
                {
                    Adapter.SelectCommand.Parameters[3].Value = DBNull.Value;
                }

                if (HQEnumVal.HasValue == true)
                {
                    Adapter.SelectCommand.Parameters[4].Value = HQEnumVal.Value;
                }
                else
                {
                    Adapter.SelectCommand.Parameters[4].Value = DBNull.Value;
                }

                if (ClearBeforeFill == true)
                {
                    dataTable.Clear();
                }

                int returnValue = Adapter.Fill(dataTable);
                return returnValue;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select, true)]
            public virtual FSMDataSet.InvoiceAddress_Get_EngineerVisitIDDataTable GetData(int? EngineerVisitID, int? InvoiceEnumVal, int? SiteEnumVal, int? HQEnumVal)
            {
                Adapter.SelectCommand = CommandCollection[0];
                if (EngineerVisitID.HasValue == true)
                {
                    Adapter.SelectCommand.Parameters[1].Value = EngineerVisitID.Value;
                }
                else
                {
                    Adapter.SelectCommand.Parameters[1].Value = DBNull.Value;
                }

                if (InvoiceEnumVal.HasValue == true)
                {
                    Adapter.SelectCommand.Parameters[2].Value = InvoiceEnumVal.Value;
                }
                else
                {
                    Adapter.SelectCommand.Parameters[2].Value = DBNull.Value;
                }

                if (SiteEnumVal.HasValue == true)
                {
                    Adapter.SelectCommand.Parameters[3].Value = SiteEnumVal.Value;
                }
                else
                {
                    Adapter.SelectCommand.Parameters[3].Value = DBNull.Value;
                }

                if (HQEnumVal.HasValue == true)
                {
                    Adapter.SelectCommand.Parameters[4].Value = HQEnumVal.Value;
                }
                else
                {
                    Adapter.SelectCommand.Parameters[4].Value = DBNull.Value;
                }

                var dataTable = new FSMDataSet.InvoiceAddress_Get_EngineerVisitIDDataTable();
                Adapter.Fill(dataTable);
                return dataTable;
            }
        }

        /// <summary>
    /// Represents the connection and commands used to retrieve and save data.
    /// </summary>
        [System.ComponentModel.DesignerCategory("code")]
        [System.ComponentModel.ToolboxItem(true)]
        [System.ComponentModel.DataObject(true)]
        [System.ComponentModel.Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" + ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

        [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
        public partial class Job_Get_For_An_EngineerVisit_IDTableAdapter : System.ComponentModel.Component
        {
            private System.Data.SqlClient.SqlDataAdapter __adapter;

            private System.Data.SqlClient.SqlDataAdapter _adapter
            {
                [MethodImpl(MethodImplOptions.Synchronized)]
                get
                {
                    return __adapter;
                }

                [MethodImpl(MethodImplOptions.Synchronized)]
                set
                {
                    __adapter = value;
                }
            }

            private System.Data.SqlClient.SqlConnection _connection;
            private System.Data.SqlClient.SqlTransaction _transaction;
            private System.Data.SqlClient.SqlCommand[] _commandCollection;
            private bool _clearBeforeFill;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public Job_Get_For_An_EngineerVisit_IDTableAdapter() : base()
            {
                ClearBeforeFill = true;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected internal System.Data.SqlClient.SqlDataAdapter Adapter
            {
                get
                {
                    if (_adapter is null)
                    {
                        InitAdapter();
                    }

                    return _adapter;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal System.Data.SqlClient.SqlConnection Connection
            {
                get
                {
                    if (_connection is null)
                    {
                        InitConnection();
                    }

                    return _connection;
                }

                set
                {
                    _connection = value;
                    if (Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Connection = value;
                    }

                    if (Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Connection = value;
                    }

                    if (Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Connection = value;
                    }

                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        if (CommandCollection[i] is object)
                        {
                            CommandCollection[i].Connection = value;
                        }

                        i = i + 1;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal System.Data.SqlClient.SqlTransaction Transaction
            {
                get
                {
                    return _transaction;
                }

                set
                {
                    _transaction = value;
                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        CommandCollection[i].Transaction = _transaction;
                        i = i + 1;
                    }

                    if (Adapter is object && Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Transaction = _transaction;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected System.Data.SqlClient.SqlCommand[] CommandCollection
            {
                get
                {
                    if (_commandCollection is null)
                    {
                        InitCommandCollection();
                    }

                    return _commandCollection;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool ClearBeforeFill
            {
                get
                {
                    return _clearBeforeFill;
                }

                set
                {
                    _clearBeforeFill = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            private void InitAdapter()
            {
                _adapter = new System.Data.SqlClient.SqlDataAdapter();
                var tableMapping = new System.Data.Common.DataTableMapping();
                tableMapping.SourceTable = "Table";
                tableMapping.DataSetTable = "Job_Get_For_An_EngineerVisit_ID";
                tableMapping.ColumnMappings.Add("JobID", "JobID");
                tableMapping.ColumnMappings.Add("SiteID", "SiteID");
                tableMapping.ColumnMappings.Add("JobDefinitionEnumID", "JobDefinitionEnumID");
                tableMapping.ColumnMappings.Add("JobTypeID", "JobTypeID");
                tableMapping.ColumnMappings.Add("StatusEnumID", "StatusEnumID");
                tableMapping.ColumnMappings.Add("DateCreated", "DateCreated");
                tableMapping.ColumnMappings.Add("CreatedByUserID", "CreatedByUserID");
                tableMapping.ColumnMappings.Add("JobNumber", "JobNumber");
                tableMapping.ColumnMappings.Add("PONumber", "PONumber");
                tableMapping.ColumnMappings.Add("QuoteID", "QuoteID");
                tableMapping.ColumnMappings.Add("ContractID", "ContractID");
                tableMapping.ColumnMappings.Add("ToBePartPaid", "ToBePartPaid");
                tableMapping.ColumnMappings.Add("Retention", "Retention");
                tableMapping.ColumnMappings.Add("Deleted", "Deleted");
                tableMapping.ColumnMappings.Add("CollectPayment", "CollectPayment");
                _adapter.TableMappings.Add(tableMapping);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            private void InitConnection()
            {
                _connection = new System.Data.SqlClient.SqlConnection();
                _connection.ConnectionString = "";
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            private void InitCommandCollection()
            {
                _commandCollection = new System.Data.SqlClient.SqlCommand[1];
                _commandCollection[0] = new System.Data.SqlClient.SqlCommand();
                _commandCollection[0].Connection = Connection;
                _commandCollection[0].CommandText = "dbo.Job_Get_For_An_EngineerVisit_ID";
                _commandCollection[0].CommandType = CommandType.StoredProcedure;
                _commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
                _commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@engineerVisitID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Fill, true)]
            public virtual int Fill(FSMDataSet.Job_Get_For_An_EngineerVisit_IDDataTable dataTable, int? engineerVisitID)
            {
                Adapter.SelectCommand = CommandCollection[0];
                if (engineerVisitID.HasValue == true)
                {
                    Adapter.SelectCommand.Parameters[1].Value = engineerVisitID.Value;
                }
                else
                {
                    Adapter.SelectCommand.Parameters[1].Value = DBNull.Value;
                }

                if (ClearBeforeFill == true)
                {
                    dataTable.Clear();
                }

                int returnValue = Adapter.Fill(dataTable);
                return returnValue;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select, true)]
            public virtual FSMDataSet.Job_Get_For_An_EngineerVisit_IDDataTable GetData(int? engineerVisitID)
            {
                Adapter.SelectCommand = CommandCollection[0];
                if (engineerVisitID.HasValue == true)
                {
                    Adapter.SelectCommand.Parameters[1].Value = engineerVisitID.Value;
                }
                else
                {
                    Adapter.SelectCommand.Parameters[1].Value = DBNull.Value;
                }

                var dataTable = new FSMDataSet.Job_Get_For_An_EngineerVisit_IDDataTable();
                Adapter.Fill(dataTable);
                return dataTable;
            }
        }

        /// <summary>
    /// Represents the connection and commands used to retrieve and save data.
    /// </summary>
        [System.ComponentModel.DesignerCategory("code")]
        [System.ComponentModel.ToolboxItem(true)]
        [System.ComponentModel.DataObject(true)]
        [System.ComponentModel.Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" + ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

        [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
        public partial class JobItems_Get_For_JobTableAdapter : System.ComponentModel.Component
        {
            private System.Data.SqlClient.SqlDataAdapter __adapter;

            private System.Data.SqlClient.SqlDataAdapter _adapter
            {
                [MethodImpl(MethodImplOptions.Synchronized)]
                get
                {
                    return __adapter;
                }

                [MethodImpl(MethodImplOptions.Synchronized)]
                set
                {
                    __adapter = value;
                }
            }

            private System.Data.SqlClient.SqlConnection _connection;
            private System.Data.SqlClient.SqlTransaction _transaction;
            private System.Data.SqlClient.SqlCommand[] _commandCollection;
            private bool _clearBeforeFill;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public JobItems_Get_For_JobTableAdapter() : base()
            {
                ClearBeforeFill = true;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected internal System.Data.SqlClient.SqlDataAdapter Adapter
            {
                get
                {
                    if (_adapter is null)
                    {
                        InitAdapter();
                    }

                    return _adapter;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal System.Data.SqlClient.SqlConnection Connection
            {
                get
                {
                    if (_connection is null)
                    {
                        InitConnection();
                    }

                    return _connection;
                }

                set
                {
                    _connection = value;
                    if (Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Connection = value;
                    }

                    if (Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Connection = value;
                    }

                    if (Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Connection = value;
                    }

                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        if (CommandCollection[i] is object)
                        {
                            CommandCollection[i].Connection = value;
                        }

                        i = i + 1;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal System.Data.SqlClient.SqlTransaction Transaction
            {
                get
                {
                    return _transaction;
                }

                set
                {
                    _transaction = value;
                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        CommandCollection[i].Transaction = _transaction;
                        i = i + 1;
                    }

                    if (Adapter is object && Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Transaction = _transaction;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected System.Data.SqlClient.SqlCommand[] CommandCollection
            {
                get
                {
                    if (_commandCollection is null)
                    {
                        InitCommandCollection();
                    }

                    return _commandCollection;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool ClearBeforeFill
            {
                get
                {
                    return _clearBeforeFill;
                }

                set
                {
                    _clearBeforeFill = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            private void InitAdapter()
            {
                _adapter = new System.Data.SqlClient.SqlDataAdapter();
                var tableMapping = new System.Data.Common.DataTableMapping();
                tableMapping.SourceTable = "Table";
                tableMapping.DataSetTable = "JobItems_Get_For_Job";
                tableMapping.ColumnMappings.Add("Summary", "Summary");
                _adapter.TableMappings.Add(tableMapping);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            private void InitConnection()
            {
                _connection = new System.Data.SqlClient.SqlConnection();
                _connection.ConnectionString = "";
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            private void InitCommandCollection()
            {
                _commandCollection = new System.Data.SqlClient.SqlCommand[1];
                _commandCollection[0] = new System.Data.SqlClient.SqlCommand();
                _commandCollection[0].Connection = Connection;
                _commandCollection[0].CommandText = "dbo.JobItems_Get_For_Job";
                _commandCollection[0].CommandType = CommandType.StoredProcedure;
                _commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
                _commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@JobID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Fill, true)]
            public virtual int Fill(FSMDataSet.JobItems_Get_For_JobDataTable dataTable, int? JobID)
            {
                Adapter.SelectCommand = CommandCollection[0];
                if (JobID.HasValue == true)
                {
                    Adapter.SelectCommand.Parameters[1].Value = JobID.Value;
                }
                else
                {
                    Adapter.SelectCommand.Parameters[1].Value = DBNull.Value;
                }

                if (ClearBeforeFill == true)
                {
                    dataTable.Clear();
                }

                int returnValue = Adapter.Fill(dataTable);
                return returnValue;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select, true)]
            public virtual FSMDataSet.JobItems_Get_For_JobDataTable GetData(int? JobID)
            {
                Adapter.SelectCommand = CommandCollection[0];
                if (JobID.HasValue == true)
                {
                    Adapter.SelectCommand.Parameters[1].Value = JobID.Value;
                }
                else
                {
                    Adapter.SelectCommand.Parameters[1].Value = DBNull.Value;
                }

                var dataTable = new FSMDataSet.JobItems_Get_For_JobDataTable();
                Adapter.Fill(dataTable);
                return dataTable;
            }
        }

        /// <summary>
    /// Represents the connection and commands used to retrieve and save data.
    /// </summary>
        [System.ComponentModel.DesignerCategory("code")]
        [System.ComponentModel.ToolboxItem(true)]
        [System.ComponentModel.DataObject(true)]
        [System.ComponentModel.Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" + ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

        [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
        public partial class Site_Get_ForEngineerVisitIDTableAdapter : System.ComponentModel.Component
        {
            private System.Data.SqlClient.SqlDataAdapter __adapter;

            private System.Data.SqlClient.SqlDataAdapter _adapter
            {
                [MethodImpl(MethodImplOptions.Synchronized)]
                get
                {
                    return __adapter;
                }

                [MethodImpl(MethodImplOptions.Synchronized)]
                set
                {
                    __adapter = value;
                }
            }

            private System.Data.SqlClient.SqlConnection _connection;
            private System.Data.SqlClient.SqlTransaction _transaction;
            private System.Data.SqlClient.SqlCommand[] _commandCollection;
            private bool _clearBeforeFill;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public Site_Get_ForEngineerVisitIDTableAdapter() : base()
            {
                ClearBeforeFill = true;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected internal System.Data.SqlClient.SqlDataAdapter Adapter
            {
                get
                {
                    if (_adapter is null)
                    {
                        InitAdapter();
                    }

                    return _adapter;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal System.Data.SqlClient.SqlConnection Connection
            {
                get
                {
                    if (_connection is null)
                    {
                        InitConnection();
                    }

                    return _connection;
                }

                set
                {
                    _connection = value;
                    if (Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Connection = value;
                    }

                    if (Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Connection = value;
                    }

                    if (Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Connection = value;
                    }

                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        if (CommandCollection[i] is object)
                        {
                            CommandCollection[i].Connection = value;
                        }

                        i = i + 1;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal System.Data.SqlClient.SqlTransaction Transaction
            {
                get
                {
                    return _transaction;
                }

                set
                {
                    _transaction = value;
                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        CommandCollection[i].Transaction = _transaction;
                        i = i + 1;
                    }

                    if (Adapter is object && Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Transaction = _transaction;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected System.Data.SqlClient.SqlCommand[] CommandCollection
            {
                get
                {
                    if (_commandCollection is null)
                    {
                        InitCommandCollection();
                    }

                    return _commandCollection;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool ClearBeforeFill
            {
                get
                {
                    return _clearBeforeFill;
                }

                set
                {
                    _clearBeforeFill = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            private void InitAdapter()
            {
                _adapter = new System.Data.SqlClient.SqlDataAdapter();
                var tableMapping = new System.Data.Common.DataTableMapping();
                tableMapping.SourceTable = "Table";
                tableMapping.DataSetTable = "Site_Get_ForEngineerVisitID";
                tableMapping.ColumnMappings.Add("SiteID", "SiteID");
                tableMapping.ColumnMappings.Add("Name", "Name");
                tableMapping.ColumnMappings.Add("CustomerID", "CustomerID");
                tableMapping.ColumnMappings.Add("RegionID", "RegionID");
                tableMapping.ColumnMappings.Add("HeadOffice", "HeadOffice");
                tableMapping.ColumnMappings.Add("HeadOfficeResult", "HeadOfficeResult");
                tableMapping.ColumnMappings.Add("Notes", "Notes");
                tableMapping.ColumnMappings.Add("Address1", "Address1");
                tableMapping.ColumnMappings.Add("Address2", "Address2");
                tableMapping.ColumnMappings.Add("Address3", "Address3");
                tableMapping.ColumnMappings.Add("Address4", "Address4");
                tableMapping.ColumnMappings.Add("Address5", "Address5");
                tableMapping.ColumnMappings.Add("Postcode", "Postcode");
                tableMapping.ColumnMappings.Add("TelephoneNum", "TelephoneNum");
                tableMapping.ColumnMappings.Add("FaxNum", "FaxNum");
                tableMapping.ColumnMappings.Add("EmailAddress", "EmailAddress");
                tableMapping.ColumnMappings.Add("EngineerID", "EngineerID");
                tableMapping.ColumnMappings.Add("PoNumReqd", "PoNumReqd");
                tableMapping.ColumnMappings.Add("AcceptChargesChanges", "AcceptChargesChanges");
                tableMapping.ColumnMappings.Add("Deleted", "Deleted");
                tableMapping.ColumnMappings.Add("SourceOfCustomer", "SourceOfCustomer");
                tableMapping.ColumnMappings.Add("PolicyNumber", "PolicyNumber");
                _adapter.TableMappings.Add(tableMapping);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            private void InitConnection()
            {
                _connection = new System.Data.SqlClient.SqlConnection();
                _connection.ConnectionString = "";
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            private void InitCommandCollection()
            {
                _commandCollection = new System.Data.SqlClient.SqlCommand[1];
                _commandCollection[0] = new System.Data.SqlClient.SqlCommand();
                _commandCollection[0].Connection = Connection;
                _commandCollection[0].CommandText = "dbo.Site_Get_ForEngineerVisitID";
                _commandCollection[0].CommandType = CommandType.StoredProcedure;
                _commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
                _commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@EngineerVisitID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Fill, true)]
            public virtual int Fill(FSMDataSet.Site_Get_ForEngineerVisitIDDataTable dataTable, int? EngineerVisitID)
            {
                Adapter.SelectCommand = CommandCollection[0];
                if (EngineerVisitID.HasValue == true)
                {
                    Adapter.SelectCommand.Parameters[1].Value = EngineerVisitID.Value;
                }
                else
                {
                    Adapter.SelectCommand.Parameters[1].Value = DBNull.Value;
                }

                if (ClearBeforeFill == true)
                {
                    dataTable.Clear();
                }

                int returnValue = Adapter.Fill(dataTable);
                return returnValue;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select, true)]
            public virtual FSMDataSet.Site_Get_ForEngineerVisitIDDataTable GetData(int? EngineerVisitID)
            {
                Adapter.SelectCommand = CommandCollection[0];
                if (EngineerVisitID.HasValue == true)
                {
                    Adapter.SelectCommand.Parameters[1].Value = EngineerVisitID.Value;
                }
                else
                {
                    Adapter.SelectCommand.Parameters[1].Value = DBNull.Value;
                }

                var dataTable = new FSMDataSet.Site_Get_ForEngineerVisitIDDataTable();
                Adapter.Fill(dataTable);
                return dataTable;
            }
        }

        /// <summary>
    /// TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    /// </summary>
        [System.ComponentModel.DesignerCategory("code")]
        [System.ComponentModel.ToolboxItem(true)]
        [System.ComponentModel.Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" + "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

        [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapterManager")]
        public partial class TableAdapterManager : System.ComponentModel.Component
        {
            private UpdateOrderOption _updateOrder;
            private bool _backupDataSetBeforeUpdate;
            private IDbConnection _connection;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public UpdateOrderOption UpdateOrder
            {
                get
                {
                    return _updateOrder;
                }

                set
                {
                    _updateOrder = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool BackupDataSetBeforeUpdate
            {
                get
                {
                    return _backupDataSetBeforeUpdate;
                }

                set
                {
                    _backupDataSetBeforeUpdate = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public IDbConnection Connection
            {
                get
                {
                    if (_connection is object)
                    {
                        return _connection;
                    }

                    return null;
                }

                set
                {
                    _connection = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public int TableAdapterInstanceCount
            {
                get
                {
                    int count = 0;
                    return count;
                }
            }

            /// <summary>
        /// Update rows in top-down order.
        /// </summary>
            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            private int UpdateUpdatedRows(FSMDataSet dataSet, System.Collections.Generic.List<DataRow> allChangedRows, System.Collections.Generic.List<DataRow> allAddedRows)
            {
                int result = 0;
                return result;
            }

            /// <summary>
        /// Insert rows in top-down order.
        /// </summary>
            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            private int UpdateInsertedRows(FSMDataSet dataSet, System.Collections.Generic.List<DataRow> allAddedRows)
            {
                int result = 0;
                return result;
            }

            /// <summary>
        /// Delete rows in bottom-up order.
        /// </summary>
            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            private int UpdateDeletedRows(FSMDataSet dataSet, System.Collections.Generic.List<DataRow> allChangedRows)
            {
                int result = 0;
                return result;
            }

            /// <summary>
        /// Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        /// </summary>
            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            private DataRow[] GetRealUpdatedRows(DataRow[] updatedRows, System.Collections.Generic.List<DataRow> allAddedRows)
            {
                if (updatedRows is null || updatedRows.Length < 1)
                {
                    return updatedRows;
                }

                if (allAddedRows is null || allAddedRows.Count < 1)
                {
                    return updatedRows;
                }

                var realUpdatedRows = new System.Collections.Generic.List<DataRow>();
                int i = 0;
                while (i < updatedRows.Length)
                {
                    var row = updatedRows[i];
                    if (allAddedRows.Contains(row) == false)
                    {
                        realUpdatedRows.Add(row);
                    }

                    i = i + 1;
                }

                return realUpdatedRows.ToArray();
            }

            /// <summary>
        /// Update all changes to the dataset.
        /// </summary>
            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public virtual int UpdateAll(FSMDataSet dataSet)
            {
                if (dataSet is null)
                {
                    throw new ArgumentNullException("dataSet");
                }

                if (dataSet.HasChanges() == false)
                {
                    return 0;
                }

                var workConnection = Connection;
                if (workConnection is null)
                {
                    throw new ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" + "ger TableAdapter property to a valid TableAdapter instance.");
                }

                bool workConnOpened = false;
                if ((workConnection.State & ConnectionState.Broken) == ConnectionState.Broken)
                {
                    workConnection.Close();
                }

                if (workConnection.State == ConnectionState.Closed)
                {
                    workConnection.Open();
                    workConnOpened = true;
                }

                var workTransaction = workConnection.BeginTransaction();
                if (workTransaction is null)
                {
                    throw new ApplicationException("The transaction cannot begin. The current data connection does not support transa" + "ctions or the current state is not allowing the transaction to begin.");
                }

                var allChangedRows = new System.Collections.Generic.List<DataRow>();
                var allAddedRows = new System.Collections.Generic.List<DataRow>();
                var adaptersWithAcceptChangesDuringUpdate = new System.Collections.Generic.List<System.Data.Common.DataAdapter>();
                var revertConnections = new System.Collections.Generic.Dictionary<object, IDbConnection>();
                int result = 0;
                DataSet backupDataSet = null;
                if (BackupDataSetBeforeUpdate)
                {
                    backupDataSet = new DataSet();
                    backupDataSet.Merge(dataSet);
                }

                try
                {
                    // ---- Prepare for update -----------
                    // 
                    // 
                    // ---- Perform updates -----------
                    // 
                    if (UpdateOrder == UpdateOrderOption.UpdateInsertDelete)
                    {
                        result = result + UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows);
                        result = result + UpdateInsertedRows(dataSet, allAddedRows);
                    }
                    else
                    {
                        result = result + UpdateInsertedRows(dataSet, allAddedRows);
                        result = result + UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows);
                    }

                    result = result + UpdateDeletedRows(dataSet, allChangedRows);
                    // 
                    // ---- Commit updates -----------
                    // 
                    workTransaction.Commit();
                    if (0 < allAddedRows.Count)
                    {
                        var rows = new DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        int i = 0;
                        while (i < rows.Length)
                        {
                            var row = rows[i];
                            row.AcceptChanges();
                            i = i + 1;
                        }
                    }

                    if (0 < allChangedRows.Count)
                    {
                        var rows = new DataRow[allChangedRows.Count];
                        allChangedRows.CopyTo(rows);
                        int i = 0;
                        while (i < rows.Length)
                        {
                            var row = rows[i];
                            row.AcceptChanges();
                            i = i + 1;
                        }
                    }
                }
                catch (Exception ex)
                {
                    workTransaction.Rollback();
                    // ---- Restore the dataset -----------
                    if (BackupDataSetBeforeUpdate)
                    {
                        Debug.Assert(backupDataSet is object);
                        dataSet.Clear();
                        dataSet.Merge(backupDataSet);
                    }
                    else if (0 < allAddedRows.Count)
                    {
                        var rows = new DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        int i = 0;
                        while (i < rows.Length)
                        {
                            var row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                            i = i + 1;
                        }
                    }

                    throw ex;
                }
                finally
                {
                    if (workConnOpened)
                    {
                        workConnection.Close();
                    }

                    if (0 < adaptersWithAcceptChangesDuringUpdate.Count)
                    {
                        var adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                        adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                        int i = 0;
                        while (i < adapters.Length)
                        {
                            var adapter = adapters[i];
                            adapter.AcceptChangesDuringUpdate = true;
                            i = i + 1;
                        }
                    }
                }

                return result;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected virtual void SortSelfReferenceRows(DataRow[] rows, DataRelation relation, bool childFirst)
            {
                Array.Sort(rows, new SelfReferenceComparer(relation, childFirst));
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected virtual bool MatchTableAdapterConnection(IDbConnection inputConnection)
            {
                if (_connection is object)
                {
                    return true;
                }

                if (Connection is null || inputConnection is null)
                {
                    return true;
                }

                if (string.Equals(Connection.ConnectionString, inputConnection.ConnectionString, StringComparison.Ordinal))
                {
                    return true;
                }

                return false;
            }

            /// <summary>
        /// Update Order Option
        /// </summary>
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public enum UpdateOrderOption
            {
                InsertUpdateDelete = 0,
                UpdateInsertDelete = 1
            }

            /// <summary>
        /// Used to sort self-referenced table's rows
        /// </summary>
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            private class SelfReferenceComparer : object, System.Collections.Generic.IComparer<DataRow>
            {
                private DataRelation _relation;
                private int _childFirst;

                [DebuggerNonUserCode()]
                [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
                internal SelfReferenceComparer(DataRelation relation, bool childFirst) : base()
                {
                    _relation = relation;
                    if (childFirst)
                    {
                        _childFirst = -1;
                    }
                    else
                    {
                        _childFirst = 1;
                    }
                }

                [DebuggerNonUserCode()]
                [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
                private DataRow GetRoot(DataRow row, ref int distance)
                {
                    Debug.Assert(row is object);
                    var root = row;
                    distance = 0;
                    System.Collections.Generic.IDictionary<DataRow, DataRow> traversedRows = new System.Collections.Generic.Dictionary<DataRow, DataRow>();
                    traversedRows[row] = row;
                    var parent = row.GetParentRow(_relation, DataRowVersion.Default);
                    while (parent is object && traversedRows.ContainsKey(parent) == false)
                    {
                        distance = distance + 1;
                        root = parent;
                        traversedRows[parent] = parent;
                        parent = parent.GetParentRow(_relation, DataRowVersion.Default);
                    }

                    if (distance == 0)
                    {
                        traversedRows.Clear();
                        traversedRows[row] = row;
                        parent = row.GetParentRow(_relation, DataRowVersion.Original);
                        while (parent is object && traversedRows.ContainsKey(parent) == false)
                        {
                            distance = distance + 1;
                            root = parent;
                            traversedRows[parent] = parent;
                            parent = parent.GetParentRow(_relation, DataRowVersion.Original);
                        }
                    }

                    return root;
                }

                [DebuggerNonUserCode()]
                [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
                public int Compare(DataRow row1, DataRow row2)
                {
                    if (ReferenceEquals(row1, row2))
                    {
                        return 0;
                    }

                    if (row1 is null)
                    {
                        return -1;
                    }

                    if (row2 is null)
                    {
                        return 1;
                    }

                    int distance1 = 0;
                    var root1 = GetRoot(row1, ref distance1);
                    int distance2 = 0;
                    var root2 = GetRoot(row2, ref distance2);
                    if (ReferenceEquals(root1, root2))
                    {
                        return _childFirst * distance1.CompareTo(distance2);
                    }
                    else
                    {
                        Debug.Assert(root1.Table is object && root2.Table is object);
                        if (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2))
                        {
                            return -1;
                        }
                        else
                        {
                            return 1;
                        }
                    }
                }
            }
        }
    }
}