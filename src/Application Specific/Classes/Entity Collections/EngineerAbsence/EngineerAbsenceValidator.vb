

'AUTO-GENERATED VALIDATOR  CLASS -  Tools 1.0
'This class was generated by a TOOL !




Public Class EngineerAbsenceValidator
    'make sure that contact object is valid
    Inherits BaseValidator

    Public Sub Validate(ByVal oEA As Entity.EngineerAbsence.EngineerAbsence)

        'make sure that contact object is valid
        If oEA.Errors.Count > 0 Then
            Dim de As DictionaryEntry
            For Each de In oEA.Errors
                Me.AddCriticalMessage(CStr(de.Value))
            Next
        End If

        'If oEngineerAbsence.Exists = False Then
        'If Not Database.Utilities.IsPrimaryKeyUnique("EngineerAbsenceID", oEngineerAbsence.EngineerAbsenceID, "tblEngineerAbsence") Then
        'Me.AddCriticalMessage(ErrorMsg.AlreadyExists("EngineerAbsenceID"))
        'End If
        'End If

        'ok now check business logic of contact

        'TO-DO: Work for developer ... add validation code for the entity here

        Dim e As New Entity.Engineers.Engineer
        e = DB.Engineer.Engineer_Get(oEA.EngineerID)


        If oEA.EngineerID = "-1" Then
            AddCriticalMessage(ErrorMsg.FieldRequired("Engineer"))
        End If

        If oEA.AbsenceTypeID = -1 Then
            AddCriticalMessage(ErrorMsg.FieldRequired("Absence Type"))
        End If

        If oEA.MorningSlots < 0 Then
            AddCriticalMessage(ErrorMsg.NegativeNumber("Morning Slots"))
        End If

        If oEA.AfternoonSlots < 0 Then
            AddCriticalMessage(ErrorMsg.NegativeNumber("Afternoon Slots"))
        End If

        If Me.ValidatorMessages.CriticalMessages.Count > 0 Then
            Throw New ValidationException(Me)
        End If

    End Sub


End Class

